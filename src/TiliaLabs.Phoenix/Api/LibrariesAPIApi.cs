/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TiliaLabs.Phoenix.Client;
using TiliaLabs.Phoenix.Model;

namespace TiliaLabs.Phoenix.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ILibrariesAPIApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add new grade to stock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity AddGrade (string stockid, GradeEntity body = null);

        /// <summary>
        /// Add new grade to stock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> AddGradeWithHttpInfo (string stockid, GradeEntity body = null);
        /// <summary>
        /// Add new mode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity AddMode1 (Mode body = null);

        /// <summary>
        /// Add new mode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> AddMode1WithHttpInfo (Mode body = null);
        /// <summary>
        /// Add new plate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity AddPlate1 (PlateEntity body = null);

        /// <summary>
        /// Add new plate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> AddPlate1WithHttpInfo (PlateEntity body = null);
        /// <summary>
        /// Add new press
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity AddPress1 (PressEntity body = null);

        /// <summary>
        /// Add new press
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> AddPress1WithHttpInfo (PressEntity body = null);
        /// <summary>
        /// Add new process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity AddProcess1 (Process body = null);

        /// <summary>
        /// Add new process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> AddProcess1WithHttpInfo (Process body = null);
        /// <summary>
        /// Add new process type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity AddProcessType1 (ProcessType body = null);

        /// <summary>
        /// Add new process type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> AddProcessType1WithHttpInfo (ProcessType body = null);
        /// <summary>
        /// Add new roll to grade
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity AddRoll (string gradeid, string stockid, RollEntity body = null);

        /// <summary>
        /// Add new roll to grade
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> AddRollWithHttpInfo (string gradeid, string stockid, RollEntity body = null);
        /// <summary>
        /// Add new sheet to grade
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity AddSheet (string gradeid, string stockid, SheetEntity body = null);

        /// <summary>
        /// Add new sheet to grade
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> AddSheetWithHttpInfo (string gradeid, string stockid, SheetEntity body = null);
        /// <summary>
        /// Add new stock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity AddStock1 (StockEntity body = null);

        /// <summary>
        /// Add new stock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> AddStock1WithHttpInfo (StockEntity body = null);
        /// <summary>
        /// Add new stock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity AddStock2 (Stock body = null);

        /// <summary>
        /// Add new stock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> AddStock2WithHttpInfo (Stock body = null);
        /// <summary>
        /// Add new stock type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity AddStockType1 (StockType body = null);

        /// <summary>
        /// Add new stock type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> AddStockType1WithHttpInfo (StockType body = null);
        /// <summary>
        /// Add new thing
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity AddThing1 (Thing body = null);

        /// <summary>
        /// Add new thing
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> AddThing1WithHttpInfo (Thing body = null);
        /// <summary>
        /// Delete die design
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="diedesignid">ID of die design to delete</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity DeleteDieDesign1 (string diedesignid);

        /// <summary>
        /// Delete die design
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="diedesignid">ID of die design to delete</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> DeleteDieDesign1WithHttpInfo (string diedesignid);
        /// <summary>
        /// Delete grade in stock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade to delete</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity DeleteGrade (string gradeid, string stockid);

        /// <summary>
        /// Delete grade in stock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade to delete</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> DeleteGradeWithHttpInfo (string gradeid, string stockid);
        /// <summary>
        /// Delete mode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modeid">ID of mode to delete</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity DeleteMode1 (string modeid);

        /// <summary>
        /// Delete mode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modeid">ID of mode to delete</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> DeleteMode1WithHttpInfo (string modeid);
        /// <summary>
        /// Delete plate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="plateid">ID of plate to delete</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity DeletePlate1 (string plateid);

        /// <summary>
        /// Delete plate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="plateid">ID of plate to delete</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> DeletePlate1WithHttpInfo (string plateid);
        /// <summary>
        /// Delete press
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pressid">ID of press to delete</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity DeletePress1 (string pressid);

        /// <summary>
        /// Delete press
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pressid">ID of press to delete</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> DeletePress1WithHttpInfo (string pressid);
        /// <summary>
        /// Delete process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processid">ID of process to delete</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity DeleteProcess1 (string processid);

        /// <summary>
        /// Delete process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processid">ID of process to delete</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> DeleteProcess1WithHttpInfo (string processid);
        /// <summary>
        /// Delete process type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processtypeid">ID of process type to delete</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity DeleteProcessType1 (string processtypeid);

        /// <summary>
        /// Delete process type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processtypeid">ID of process type to delete</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> DeleteProcessType1WithHttpInfo (string processtypeid);
        /// <summary>
        /// Delete roll in grade
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rollid">ID of roll to delete</param>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity DeleteRoll (string rollid, string gradeid, string stockid);

        /// <summary>
        /// Delete roll in grade
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rollid">ID of roll to delete</param>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> DeleteRollWithHttpInfo (string rollid, string gradeid, string stockid);
        /// <summary>
        /// Delete sheet in grade
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sheetid">ID of sheet to delete</param>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity DeleteSheet (string sheetid, string gradeid, string stockid);

        /// <summary>
        /// Delete sheet in grade
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sheetid">ID of sheet to delete</param>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> DeleteSheetWithHttpInfo (string sheetid, string gradeid, string stockid);
        /// <summary>
        /// Delete stock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock to delete</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity DeleteStock1 (string stockid);

        /// <summary>
        /// Delete stock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock to delete</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> DeleteStock1WithHttpInfo (string stockid);
        /// <summary>
        /// Delete stock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock to delete</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity DeleteStock2 (string stockid);

        /// <summary>
        /// Delete stock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock to delete</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> DeleteStock2WithHttpInfo (string stockid);
        /// <summary>
        /// Delete stock type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocktypeid">ID of stock type to delete</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity DeleteStockType1 (string stocktypeid);

        /// <summary>
        /// Delete stock type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocktypeid">ID of stock type to delete</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> DeleteStockType1WithHttpInfo (string stocktypeid);
        /// <summary>
        /// Delete template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateid">ID of template to delete</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity DeleteTemplate1 (string templateid);

        /// <summary>
        /// Delete template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateid">ID of template to delete</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> DeleteTemplate1WithHttpInfo (string templateid);
        /// <summary>
        /// Delete thing
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingid">ID of thing to delete</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity DeleteThing1 (string thingid);

        /// <summary>
        /// Delete thing
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingid">ID of thing to delete</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> DeleteThing1WithHttpInfo (string thingid);
        /// <summary>
        /// Edit grade
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade to edit</param>
        /// <param name="stockid">ID of stock</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity EditGrade (string gradeid, string stockid, GradeEntity body = null);

        /// <summary>
        /// Edit grade
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade to edit</param>
        /// <param name="stockid">ID of stock</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> EditGradeWithHttpInfo (string gradeid, string stockid, GradeEntity body = null);
        /// <summary>
        /// Edit mode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modeid">ID of mode to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity EditMode1 (string modeid, Mode body = null);

        /// <summary>
        /// Edit mode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modeid">ID of mode to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> EditMode1WithHttpInfo (string modeid, Mode body = null);
        /// <summary>
        /// Edit plate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="plateid">ID of plate to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity EditPlate1 (string plateid, PlateEntity body = null);

        /// <summary>
        /// Edit plate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="plateid">ID of plate to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> EditPlate1WithHttpInfo (string plateid, PlateEntity body = null);
        /// <summary>
        /// Edit press
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pressid">ID of press to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity EditPress1 (string pressid, PressEntity body = null);

        /// <summary>
        /// Edit press
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pressid">ID of press to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> EditPress1WithHttpInfo (string pressid, PressEntity body = null);
        /// <summary>
        /// Edit process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processid">ID of process to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity EditProcess1 (string processid, Process body = null);

        /// <summary>
        /// Edit process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processid">ID of process to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> EditProcess1WithHttpInfo (string processid, Process body = null);
        /// <summary>
        /// Edit process type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processtypeid">ID of process type to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity EditProcessType1 (string processtypeid, ProcessType body = null);

        /// <summary>
        /// Edit process type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processtypeid">ID of process type to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> EditProcessType1WithHttpInfo (string processtypeid, ProcessType body = null);
        /// <summary>
        /// Edit roll
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rollid">ID of roll to edit</param>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity EditRoll (string rollid, string gradeid, string stockid, RollEntity body = null);

        /// <summary>
        /// Edit roll
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rollid">ID of roll to edit</param>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> EditRollWithHttpInfo (string rollid, string gradeid, string stockid, RollEntity body = null);
        /// <summary>
        /// Edit sheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sheetid">ID of sheet to edit</param>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity EditSheet (string sheetid, string gradeid, string stockid, SheetEntity body = null);

        /// <summary>
        /// Edit sheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sheetid">ID of sheet to edit</param>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> EditSheetWithHttpInfo (string sheetid, string gradeid, string stockid, SheetEntity body = null);
        /// <summary>
        /// Edit stock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity EditStock1 (string stockid, StockEntity body = null);

        /// <summary>
        /// Edit stock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> EditStock1WithHttpInfo (string stockid, StockEntity body = null);
        /// <summary>
        /// Edit stock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity EditStock2 (string stockid, Stock body = null);

        /// <summary>
        /// Edit stock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> EditStock2WithHttpInfo (string stockid, Stock body = null);
        /// <summary>
        /// Edit stock type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocktypeid">ID of stock type to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity EditStockType1 (string stocktypeid, StockType body = null);

        /// <summary>
        /// Edit stock type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocktypeid">ID of stock type to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> EditStockType1WithHttpInfo (string stocktypeid, StockType body = null);
        /// <summary>
        /// Edit thing
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingid">ID of thing to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity EditThing1 (string thingid, Thing body = null);

        /// <summary>
        /// Edit thing
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingid">ID of thing to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> EditThing1WithHttpInfo (string thingid, Thing body = null);
        /// <summary>
        /// Get die design by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="diedesignid">ID of die design to get</param>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <returns>DieDesignEntity</returns>
        DieDesignEntity GetDieDesign1 (string diedesignid, bool? thumb = null);

        /// <summary>
        /// Get die design by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="diedesignid">ID of die design to get</param>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <returns>ApiResponse of DieDesignEntity</returns>
        ApiResponse<DieDesignEntity> GetDieDesign1WithHttpInfo (string diedesignid, bool? thumb = null);
        /// <summary>
        /// Get list of all die designs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <returns>List&lt;DieDesignEntity&gt;</returns>
        List<DieDesignEntity> GetDieDesigns1 (bool? thumb = null);

        /// <summary>
        /// Get list of all die designs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;DieDesignEntity&gt;</returns>
        ApiResponse<List<DieDesignEntity>> GetDieDesigns1WithHttpInfo (bool? thumb = null);
        /// <summary>
        /// Get list of all folding patterns
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;FoldingPatternEntity&gt;</returns>
        List<FoldingPatternEntity> GetFoldingPatterns ();

        /// <summary>
        /// Get list of all folding patterns
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;FoldingPatternEntity&gt;</returns>
        ApiResponse<List<FoldingPatternEntity>> GetFoldingPatternsWithHttpInfo ();
        /// <summary>
        /// Get grade by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade to get</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>GradeEntity</returns>
        GradeEntity GetGrade1 (string gradeid, string stockid);

        /// <summary>
        /// Get grade by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade to get</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>ApiResponse of GradeEntity</returns>
        ApiResponse<GradeEntity> GetGrade1WithHttpInfo (string gradeid, string stockid);
        /// <summary>
        /// Get list of all grades in the stock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock</param>
        /// <returns>List&lt;GradeEntity&gt;</returns>
        List<GradeEntity> GetGrades (string stockid);

        /// <summary>
        /// Get list of all grades in the stock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock</param>
        /// <returns>ApiResponse of List&lt;GradeEntity&gt;</returns>
        ApiResponse<List<GradeEntity>> GetGradesWithHttpInfo (string stockid);
        /// <summary>
        /// Get list of all mark sets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;MarkSetEntity&gt;</returns>
        List<MarkSetEntity> GetMarkSets ();

        /// <summary>
        /// Get list of all mark sets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;MarkSetEntity&gt;</returns>
        ApiResponse<List<MarkSetEntity>> GetMarkSetsWithHttpInfo ();
        /// <summary>
        /// Get list of all marks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;MarkEntity&gt;</returns>
        List<MarkEntity> GetMarks ();

        /// <summary>
        /// Get list of all marks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;MarkEntity&gt;</returns>
        ApiResponse<List<MarkEntity>> GetMarksWithHttpInfo ();
        /// <summary>
        /// Get mode by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modeid">ID of mode to get</param>
        /// <returns>Mode</returns>
        Mode GetMode1 (string modeid);

        /// <summary>
        /// Get mode by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modeid">ID of mode to get</param>
        /// <returns>ApiResponse of Mode</returns>
        ApiResponse<Mode> GetMode1WithHttpInfo (string modeid);
        /// <summary>
        /// Get list of all modes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Mode&gt;</returns>
        List<Mode> GetModes1 ();

        /// <summary>
        /// Get list of all modes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Mode&gt;</returns>
        ApiResponse<List<Mode>> GetModes1WithHttpInfo ();
        /// <summary>
        /// Get plate by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="plateid">ID of plate to get</param>
        /// <returns>PlateEntity</returns>
        PlateEntity GetPlate1 (string plateid);

        /// <summary>
        /// Get plate by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="plateid">ID of plate to get</param>
        /// <returns>ApiResponse of PlateEntity</returns>
        ApiResponse<PlateEntity> GetPlate1WithHttpInfo (string plateid);
        /// <summary>
        /// Get list of all plates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PlateEntity&gt;</returns>
        List<PlateEntity> GetPlates1 ();

        /// <summary>
        /// Get list of all plates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PlateEntity&gt;</returns>
        ApiResponse<List<PlateEntity>> GetPlates1WithHttpInfo ();
        /// <summary>
        /// Get press by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pressid">ID of press to get</param>
        /// <returns>PressEntity</returns>
        PressEntity GetPress1 (string pressid);

        /// <summary>
        /// Get press by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pressid">ID of press to get</param>
        /// <returns>ApiResponse of PressEntity</returns>
        ApiResponse<PressEntity> GetPress1WithHttpInfo (string pressid);
        /// <summary>
        /// Get list of all presses
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PressEntity&gt;</returns>
        List<PressEntity> GetPresses1 ();

        /// <summary>
        /// Get list of all presses
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PressEntity&gt;</returns>
        ApiResponse<List<PressEntity>> GetPresses1WithHttpInfo ();
        /// <summary>
        /// Get process by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processid">ID of process to get</param>
        /// <returns>Process</returns>
        Process GetProcess1 (string processid);

        /// <summary>
        /// Get process by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processid">ID of process to get</param>
        /// <returns>ApiResponse of Process</returns>
        ApiResponse<Process> GetProcess1WithHttpInfo (string processid);
        /// <summary>
        /// Get process type by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processtypeid">ID of process type to get</param>
        /// <returns>ProcessType</returns>
        ProcessType GetProcessType1 (string processtypeid);

        /// <summary>
        /// Get process type by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processtypeid">ID of process type to get</param>
        /// <returns>ApiResponse of ProcessType</returns>
        ApiResponse<ProcessType> GetProcessType1WithHttpInfo (string processtypeid);
        /// <summary>
        /// Get list of all process types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ProcessType&gt;</returns>
        List<ProcessType> GetProcessTypes1 ();

        /// <summary>
        /// Get list of all process types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ProcessType&gt;</returns>
        ApiResponse<List<ProcessType>> GetProcessTypes1WithHttpInfo ();
        /// <summary>
        /// Get list of all processes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Process&gt;</returns>
        List<Process> GetProcesses1 ();

        /// <summary>
        /// Get list of all processes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Process&gt;</returns>
        ApiResponse<List<Process>> GetProcesses1WithHttpInfo ();
        /// <summary>
        /// Get roll by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rollid">ID of roll to get</param>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>RollEntity</returns>
        RollEntity GetRoll1 (string rollid, string gradeid, string stockid);

        /// <summary>
        /// Get roll by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rollid">ID of roll to get</param>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>ApiResponse of RollEntity</returns>
        ApiResponse<RollEntity> GetRoll1WithHttpInfo (string rollid, string gradeid, string stockid);
        /// <summary>
        /// Get list of all rolls in the grade
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>List&lt;RollEntity&gt;</returns>
        List<RollEntity> GetRolls (string gradeid, string stockid);

        /// <summary>
        /// Get list of all rolls in the grade
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>ApiResponse of List&lt;RollEntity&gt;</returns>
        ApiResponse<List<RollEntity>> GetRollsWithHttpInfo (string gradeid, string stockid);
        /// <summary>
        /// Get sheet by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sheetid">ID of sheet to get</param>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>SheetEntity</returns>
        SheetEntity GetSheet1 (string sheetid, string gradeid, string stockid);

        /// <summary>
        /// Get sheet by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sheetid">ID of sheet to get</param>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>ApiResponse of SheetEntity</returns>
        ApiResponse<SheetEntity> GetSheet1WithHttpInfo (string sheetid, string gradeid, string stockid);
        /// <summary>
        /// Get list of all sheets in the grade
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>List&lt;SheetEntity&gt;</returns>
        List<SheetEntity> GetSheets (string gradeid, string stockid);

        /// <summary>
        /// Get list of all sheets in the grade
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>ApiResponse of List&lt;SheetEntity&gt;</returns>
        ApiResponse<List<SheetEntity>> GetSheetsWithHttpInfo (string gradeid, string stockid);
        /// <summary>
        /// Get stock by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock to get</param>
        /// <returns>StockEntity</returns>
        StockEntity GetStock1 (string stockid);

        /// <summary>
        /// Get stock by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock to get</param>
        /// <returns>ApiResponse of StockEntity</returns>
        ApiResponse<StockEntity> GetStock1WithHttpInfo (string stockid);
        /// <summary>
        /// Get stock by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock to get</param>
        /// <returns>Stock</returns>
        Stock GetStock2 (string stockid);

        /// <summary>
        /// Get stock by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock to get</param>
        /// <returns>ApiResponse of Stock</returns>
        ApiResponse<Stock> GetStock2WithHttpInfo (string stockid);
        /// <summary>
        /// Get stock type by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocktypeid">ID of stock type to get</param>
        /// <returns>StockType</returns>
        StockType GetStockType1 (string stocktypeid);

        /// <summary>
        /// Get stock type by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocktypeid">ID of stock type to get</param>
        /// <returns>ApiResponse of StockType</returns>
        ApiResponse<StockType> GetStockType1WithHttpInfo (string stocktypeid);
        /// <summary>
        /// Get list of all stock types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;StockType&gt;</returns>
        List<StockType> GetStockTypes1 ();

        /// <summary>
        /// Get list of all stock types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;StockType&gt;</returns>
        ApiResponse<List<StockType>> GetStockTypes1WithHttpInfo ();
        /// <summary>
        /// Get list of all stocks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;StockEntity&gt;</returns>
        List<StockEntity> GetStocks1 ();

        /// <summary>
        /// Get list of all stocks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;StockEntity&gt;</returns>
        ApiResponse<List<StockEntity>> GetStocks1WithHttpInfo ();
        /// <summary>
        /// Get list of all stocks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Stock&gt;</returns>
        List<Stock> GetStocks2 ();

        /// <summary>
        /// Get list of all stocks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Stock&gt;</returns>
        ApiResponse<List<Stock>> GetStocks2WithHttpInfo ();
        /// <summary>
        /// Get template by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateid">ID of template to get</param>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <returns>TemplateEntity</returns>
        TemplateEntity GetTemplate1 (string templateid, bool? thumb = null);

        /// <summary>
        /// Get template by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateid">ID of template to get</param>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <returns>ApiResponse of TemplateEntity</returns>
        ApiResponse<TemplateEntity> GetTemplate1WithHttpInfo (string templateid, bool? thumb = null);
        /// <summary>
        /// Get list of all templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <returns>List&lt;TemplateEntity&gt;</returns>
        List<TemplateEntity> GetTemplates1 (bool? thumb = null);

        /// <summary>
        /// Get list of all templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;TemplateEntity&gt;</returns>
        ApiResponse<List<TemplateEntity>> GetTemplates1WithHttpInfo (bool? thumb = null);
        /// <summary>
        /// Get thing by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingid">ID of thing to get</param>
        /// <returns>Thing</returns>
        Thing GetThing1 (string thingid);

        /// <summary>
        /// Get thing by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingid">ID of thing to get</param>
        /// <returns>ApiResponse of Thing</returns>
        ApiResponse<Thing> GetThing1WithHttpInfo (string thingid);
        /// <summary>
        /// Get list of all things
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Thing&gt;</returns>
        List<Thing> GetThings1 ();

        /// <summary>
        /// Get list of all things
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Thing&gt;</returns>
        ApiResponse<List<Thing>> GetThings1WithHttpInfo ();
        /// <summary>
        /// Import new die design
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity ImportDieDesign1 (ImportDieDesignEntity body = null);

        /// <summary>
        /// Import new die design
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> ImportDieDesign1WithHttpInfo (ImportDieDesignEntity body = null);
        /// <summary>
        /// Import new template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity ImportTemplate1 (ImportTemplateEntity body = null);

        /// <summary>
        /// Import new template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> ImportTemplate1WithHttpInfo (ImportTemplateEntity body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add new grade to stock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> AddGradeAsync (string stockid, GradeEntity body = null);

        /// <summary>
        /// Add new grade to stock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> AddGradeAsyncWithHttpInfo (string stockid, GradeEntity body = null);
        /// <summary>
        /// Add new mode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> AddMode1Async (Mode body = null);

        /// <summary>
        /// Add new mode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> AddMode1AsyncWithHttpInfo (Mode body = null);
        /// <summary>
        /// Add new plate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> AddPlate1Async (PlateEntity body = null);

        /// <summary>
        /// Add new plate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> AddPlate1AsyncWithHttpInfo (PlateEntity body = null);
        /// <summary>
        /// Add new press
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> AddPress1Async (PressEntity body = null);

        /// <summary>
        /// Add new press
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> AddPress1AsyncWithHttpInfo (PressEntity body = null);
        /// <summary>
        /// Add new process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> AddProcess1Async (Process body = null);

        /// <summary>
        /// Add new process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> AddProcess1AsyncWithHttpInfo (Process body = null);
        /// <summary>
        /// Add new process type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> AddProcessType1Async (ProcessType body = null);

        /// <summary>
        /// Add new process type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> AddProcessType1AsyncWithHttpInfo (ProcessType body = null);
        /// <summary>
        /// Add new roll to grade
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> AddRollAsync (string gradeid, string stockid, RollEntity body = null);

        /// <summary>
        /// Add new roll to grade
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> AddRollAsyncWithHttpInfo (string gradeid, string stockid, RollEntity body = null);
        /// <summary>
        /// Add new sheet to grade
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> AddSheetAsync (string gradeid, string stockid, SheetEntity body = null);

        /// <summary>
        /// Add new sheet to grade
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> AddSheetAsyncWithHttpInfo (string gradeid, string stockid, SheetEntity body = null);
        /// <summary>
        /// Add new stock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> AddStock1Async (StockEntity body = null);

        /// <summary>
        /// Add new stock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> AddStock1AsyncWithHttpInfo (StockEntity body = null);
        /// <summary>
        /// Add new stock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> AddStock2Async (Stock body = null);

        /// <summary>
        /// Add new stock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> AddStock2AsyncWithHttpInfo (Stock body = null);
        /// <summary>
        /// Add new stock type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> AddStockType1Async (StockType body = null);

        /// <summary>
        /// Add new stock type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> AddStockType1AsyncWithHttpInfo (StockType body = null);
        /// <summary>
        /// Add new thing
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> AddThing1Async (Thing body = null);

        /// <summary>
        /// Add new thing
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> AddThing1AsyncWithHttpInfo (Thing body = null);
        /// <summary>
        /// Delete die design
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="diedesignid">ID of die design to delete</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> DeleteDieDesign1Async (string diedesignid);

        /// <summary>
        /// Delete die design
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="diedesignid">ID of die design to delete</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> DeleteDieDesign1AsyncWithHttpInfo (string diedesignid);
        /// <summary>
        /// Delete grade in stock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade to delete</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> DeleteGradeAsync (string gradeid, string stockid);

        /// <summary>
        /// Delete grade in stock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade to delete</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> DeleteGradeAsyncWithHttpInfo (string gradeid, string stockid);
        /// <summary>
        /// Delete mode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modeid">ID of mode to delete</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> DeleteMode1Async (string modeid);

        /// <summary>
        /// Delete mode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modeid">ID of mode to delete</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> DeleteMode1AsyncWithHttpInfo (string modeid);
        /// <summary>
        /// Delete plate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="plateid">ID of plate to delete</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> DeletePlate1Async (string plateid);

        /// <summary>
        /// Delete plate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="plateid">ID of plate to delete</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> DeletePlate1AsyncWithHttpInfo (string plateid);
        /// <summary>
        /// Delete press
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pressid">ID of press to delete</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> DeletePress1Async (string pressid);

        /// <summary>
        /// Delete press
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pressid">ID of press to delete</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> DeletePress1AsyncWithHttpInfo (string pressid);
        /// <summary>
        /// Delete process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processid">ID of process to delete</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> DeleteProcess1Async (string processid);

        /// <summary>
        /// Delete process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processid">ID of process to delete</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> DeleteProcess1AsyncWithHttpInfo (string processid);
        /// <summary>
        /// Delete process type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processtypeid">ID of process type to delete</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> DeleteProcessType1Async (string processtypeid);

        /// <summary>
        /// Delete process type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processtypeid">ID of process type to delete</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> DeleteProcessType1AsyncWithHttpInfo (string processtypeid);
        /// <summary>
        /// Delete roll in grade
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rollid">ID of roll to delete</param>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> DeleteRollAsync (string rollid, string gradeid, string stockid);

        /// <summary>
        /// Delete roll in grade
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rollid">ID of roll to delete</param>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> DeleteRollAsyncWithHttpInfo (string rollid, string gradeid, string stockid);
        /// <summary>
        /// Delete sheet in grade
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sheetid">ID of sheet to delete</param>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> DeleteSheetAsync (string sheetid, string gradeid, string stockid);

        /// <summary>
        /// Delete sheet in grade
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sheetid">ID of sheet to delete</param>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> DeleteSheetAsyncWithHttpInfo (string sheetid, string gradeid, string stockid);
        /// <summary>
        /// Delete stock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock to delete</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> DeleteStock1Async (string stockid);

        /// <summary>
        /// Delete stock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock to delete</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> DeleteStock1AsyncWithHttpInfo (string stockid);
        /// <summary>
        /// Delete stock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock to delete</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> DeleteStock2Async (string stockid);

        /// <summary>
        /// Delete stock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock to delete</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> DeleteStock2AsyncWithHttpInfo (string stockid);
        /// <summary>
        /// Delete stock type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocktypeid">ID of stock type to delete</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> DeleteStockType1Async (string stocktypeid);

        /// <summary>
        /// Delete stock type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocktypeid">ID of stock type to delete</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> DeleteStockType1AsyncWithHttpInfo (string stocktypeid);
        /// <summary>
        /// Delete template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateid">ID of template to delete</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> DeleteTemplate1Async (string templateid);

        /// <summary>
        /// Delete template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateid">ID of template to delete</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> DeleteTemplate1AsyncWithHttpInfo (string templateid);
        /// <summary>
        /// Delete thing
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingid">ID of thing to delete</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> DeleteThing1Async (string thingid);

        /// <summary>
        /// Delete thing
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingid">ID of thing to delete</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> DeleteThing1AsyncWithHttpInfo (string thingid);
        /// <summary>
        /// Edit grade
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade to edit</param>
        /// <param name="stockid">ID of stock</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> EditGradeAsync (string gradeid, string stockid, GradeEntity body = null);

        /// <summary>
        /// Edit grade
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade to edit</param>
        /// <param name="stockid">ID of stock</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> EditGradeAsyncWithHttpInfo (string gradeid, string stockid, GradeEntity body = null);
        /// <summary>
        /// Edit mode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modeid">ID of mode to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> EditMode1Async (string modeid, Mode body = null);

        /// <summary>
        /// Edit mode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modeid">ID of mode to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> EditMode1AsyncWithHttpInfo (string modeid, Mode body = null);
        /// <summary>
        /// Edit plate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="plateid">ID of plate to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> EditPlate1Async (string plateid, PlateEntity body = null);

        /// <summary>
        /// Edit plate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="plateid">ID of plate to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> EditPlate1AsyncWithHttpInfo (string plateid, PlateEntity body = null);
        /// <summary>
        /// Edit press
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pressid">ID of press to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> EditPress1Async (string pressid, PressEntity body = null);

        /// <summary>
        /// Edit press
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pressid">ID of press to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> EditPress1AsyncWithHttpInfo (string pressid, PressEntity body = null);
        /// <summary>
        /// Edit process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processid">ID of process to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> EditProcess1Async (string processid, Process body = null);

        /// <summary>
        /// Edit process
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processid">ID of process to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> EditProcess1AsyncWithHttpInfo (string processid, Process body = null);
        /// <summary>
        /// Edit process type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processtypeid">ID of process type to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> EditProcessType1Async (string processtypeid, ProcessType body = null);

        /// <summary>
        /// Edit process type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processtypeid">ID of process type to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> EditProcessType1AsyncWithHttpInfo (string processtypeid, ProcessType body = null);
        /// <summary>
        /// Edit roll
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rollid">ID of roll to edit</param>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> EditRollAsync (string rollid, string gradeid, string stockid, RollEntity body = null);

        /// <summary>
        /// Edit roll
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rollid">ID of roll to edit</param>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> EditRollAsyncWithHttpInfo (string rollid, string gradeid, string stockid, RollEntity body = null);
        /// <summary>
        /// Edit sheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sheetid">ID of sheet to edit</param>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> EditSheetAsync (string sheetid, string gradeid, string stockid, SheetEntity body = null);

        /// <summary>
        /// Edit sheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sheetid">ID of sheet to edit</param>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> EditSheetAsyncWithHttpInfo (string sheetid, string gradeid, string stockid, SheetEntity body = null);
        /// <summary>
        /// Edit stock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> EditStock1Async (string stockid, StockEntity body = null);

        /// <summary>
        /// Edit stock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> EditStock1AsyncWithHttpInfo (string stockid, StockEntity body = null);
        /// <summary>
        /// Edit stock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> EditStock2Async (string stockid, Stock body = null);

        /// <summary>
        /// Edit stock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> EditStock2AsyncWithHttpInfo (string stockid, Stock body = null);
        /// <summary>
        /// Edit stock type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocktypeid">ID of stock type to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> EditStockType1Async (string stocktypeid, StockType body = null);

        /// <summary>
        /// Edit stock type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocktypeid">ID of stock type to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> EditStockType1AsyncWithHttpInfo (string stocktypeid, StockType body = null);
        /// <summary>
        /// Edit thing
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingid">ID of thing to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> EditThing1Async (string thingid, Thing body = null);

        /// <summary>
        /// Edit thing
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingid">ID of thing to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> EditThing1AsyncWithHttpInfo (string thingid, Thing body = null);
        /// <summary>
        /// Get die design by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="diedesignid">ID of die design to get</param>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <returns>Task of DieDesignEntity</returns>
        System.Threading.Tasks.Task<DieDesignEntity> GetDieDesign1Async (string diedesignid, bool? thumb = null);

        /// <summary>
        /// Get die design by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="diedesignid">ID of die design to get</param>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <returns>Task of ApiResponse (DieDesignEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<DieDesignEntity>> GetDieDesign1AsyncWithHttpInfo (string diedesignid, bool? thumb = null);
        /// <summary>
        /// Get list of all die designs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <returns>Task of List&lt;DieDesignEntity&gt;</returns>
        System.Threading.Tasks.Task<List<DieDesignEntity>> GetDieDesigns1Async (bool? thumb = null);

        /// <summary>
        /// Get list of all die designs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <returns>Task of ApiResponse (List&lt;DieDesignEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DieDesignEntity>>> GetDieDesigns1AsyncWithHttpInfo (bool? thumb = null);
        /// <summary>
        /// Get list of all folding patterns
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;FoldingPatternEntity&gt;</returns>
        System.Threading.Tasks.Task<List<FoldingPatternEntity>> GetFoldingPatternsAsync ();

        /// <summary>
        /// Get list of all folding patterns
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;FoldingPatternEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FoldingPatternEntity>>> GetFoldingPatternsAsyncWithHttpInfo ();
        /// <summary>
        /// Get grade by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade to get</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>Task of GradeEntity</returns>
        System.Threading.Tasks.Task<GradeEntity> GetGrade1Async (string gradeid, string stockid);

        /// <summary>
        /// Get grade by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade to get</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>Task of ApiResponse (GradeEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<GradeEntity>> GetGrade1AsyncWithHttpInfo (string gradeid, string stockid);
        /// <summary>
        /// Get list of all grades in the stock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock</param>
        /// <returns>Task of List&lt;GradeEntity&gt;</returns>
        System.Threading.Tasks.Task<List<GradeEntity>> GetGradesAsync (string stockid);

        /// <summary>
        /// Get list of all grades in the stock
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock</param>
        /// <returns>Task of ApiResponse (List&lt;GradeEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GradeEntity>>> GetGradesAsyncWithHttpInfo (string stockid);
        /// <summary>
        /// Get list of all mark sets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;MarkSetEntity&gt;</returns>
        System.Threading.Tasks.Task<List<MarkSetEntity>> GetMarkSetsAsync ();

        /// <summary>
        /// Get list of all mark sets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;MarkSetEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MarkSetEntity>>> GetMarkSetsAsyncWithHttpInfo ();
        /// <summary>
        /// Get list of all marks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;MarkEntity&gt;</returns>
        System.Threading.Tasks.Task<List<MarkEntity>> GetMarksAsync ();

        /// <summary>
        /// Get list of all marks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;MarkEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MarkEntity>>> GetMarksAsyncWithHttpInfo ();
        /// <summary>
        /// Get mode by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modeid">ID of mode to get</param>
        /// <returns>Task of Mode</returns>
        System.Threading.Tasks.Task<Mode> GetMode1Async (string modeid);

        /// <summary>
        /// Get mode by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modeid">ID of mode to get</param>
        /// <returns>Task of ApiResponse (Mode)</returns>
        System.Threading.Tasks.Task<ApiResponse<Mode>> GetMode1AsyncWithHttpInfo (string modeid);
        /// <summary>
        /// Get list of all modes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Mode&gt;</returns>
        System.Threading.Tasks.Task<List<Mode>> GetModes1Async ();

        /// <summary>
        /// Get list of all modes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Mode&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Mode>>> GetModes1AsyncWithHttpInfo ();
        /// <summary>
        /// Get plate by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="plateid">ID of plate to get</param>
        /// <returns>Task of PlateEntity</returns>
        System.Threading.Tasks.Task<PlateEntity> GetPlate1Async (string plateid);

        /// <summary>
        /// Get plate by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="plateid">ID of plate to get</param>
        /// <returns>Task of ApiResponse (PlateEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlateEntity>> GetPlate1AsyncWithHttpInfo (string plateid);
        /// <summary>
        /// Get list of all plates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PlateEntity&gt;</returns>
        System.Threading.Tasks.Task<List<PlateEntity>> GetPlates1Async ();

        /// <summary>
        /// Get list of all plates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PlateEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PlateEntity>>> GetPlates1AsyncWithHttpInfo ();
        /// <summary>
        /// Get press by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pressid">ID of press to get</param>
        /// <returns>Task of PressEntity</returns>
        System.Threading.Tasks.Task<PressEntity> GetPress1Async (string pressid);

        /// <summary>
        /// Get press by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pressid">ID of press to get</param>
        /// <returns>Task of ApiResponse (PressEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<PressEntity>> GetPress1AsyncWithHttpInfo (string pressid);
        /// <summary>
        /// Get list of all presses
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PressEntity&gt;</returns>
        System.Threading.Tasks.Task<List<PressEntity>> GetPresses1Async ();

        /// <summary>
        /// Get list of all presses
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PressEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PressEntity>>> GetPresses1AsyncWithHttpInfo ();
        /// <summary>
        /// Get process by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processid">ID of process to get</param>
        /// <returns>Task of Process</returns>
        System.Threading.Tasks.Task<Process> GetProcess1Async (string processid);

        /// <summary>
        /// Get process by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processid">ID of process to get</param>
        /// <returns>Task of ApiResponse (Process)</returns>
        System.Threading.Tasks.Task<ApiResponse<Process>> GetProcess1AsyncWithHttpInfo (string processid);
        /// <summary>
        /// Get process type by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processtypeid">ID of process type to get</param>
        /// <returns>Task of ProcessType</returns>
        System.Threading.Tasks.Task<ProcessType> GetProcessType1Async (string processtypeid);

        /// <summary>
        /// Get process type by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processtypeid">ID of process type to get</param>
        /// <returns>Task of ApiResponse (ProcessType)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessType>> GetProcessType1AsyncWithHttpInfo (string processtypeid);
        /// <summary>
        /// Get list of all process types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ProcessType&gt;</returns>
        System.Threading.Tasks.Task<List<ProcessType>> GetProcessTypes1Async ();

        /// <summary>
        /// Get list of all process types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ProcessType&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProcessType>>> GetProcessTypes1AsyncWithHttpInfo ();
        /// <summary>
        /// Get list of all processes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Process&gt;</returns>
        System.Threading.Tasks.Task<List<Process>> GetProcesses1Async ();

        /// <summary>
        /// Get list of all processes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Process&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Process>>> GetProcesses1AsyncWithHttpInfo ();
        /// <summary>
        /// Get roll by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rollid">ID of roll to get</param>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>Task of RollEntity</returns>
        System.Threading.Tasks.Task<RollEntity> GetRoll1Async (string rollid, string gradeid, string stockid);

        /// <summary>
        /// Get roll by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rollid">ID of roll to get</param>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>Task of ApiResponse (RollEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<RollEntity>> GetRoll1AsyncWithHttpInfo (string rollid, string gradeid, string stockid);
        /// <summary>
        /// Get list of all rolls in the grade
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>Task of List&lt;RollEntity&gt;</returns>
        System.Threading.Tasks.Task<List<RollEntity>> GetRollsAsync (string gradeid, string stockid);

        /// <summary>
        /// Get list of all rolls in the grade
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>Task of ApiResponse (List&lt;RollEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RollEntity>>> GetRollsAsyncWithHttpInfo (string gradeid, string stockid);
        /// <summary>
        /// Get sheet by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sheetid">ID of sheet to get</param>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>Task of SheetEntity</returns>
        System.Threading.Tasks.Task<SheetEntity> GetSheet1Async (string sheetid, string gradeid, string stockid);

        /// <summary>
        /// Get sheet by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sheetid">ID of sheet to get</param>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>Task of ApiResponse (SheetEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<SheetEntity>> GetSheet1AsyncWithHttpInfo (string sheetid, string gradeid, string stockid);
        /// <summary>
        /// Get list of all sheets in the grade
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>Task of List&lt;SheetEntity&gt;</returns>
        System.Threading.Tasks.Task<List<SheetEntity>> GetSheetsAsync (string gradeid, string stockid);

        /// <summary>
        /// Get list of all sheets in the grade
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>Task of ApiResponse (List&lt;SheetEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SheetEntity>>> GetSheetsAsyncWithHttpInfo (string gradeid, string stockid);
        /// <summary>
        /// Get stock by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock to get</param>
        /// <returns>Task of StockEntity</returns>
        System.Threading.Tasks.Task<StockEntity> GetStock1Async (string stockid);

        /// <summary>
        /// Get stock by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock to get</param>
        /// <returns>Task of ApiResponse (StockEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<StockEntity>> GetStock1AsyncWithHttpInfo (string stockid);
        /// <summary>
        /// Get stock by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock to get</param>
        /// <returns>Task of Stock</returns>
        System.Threading.Tasks.Task<Stock> GetStock2Async (string stockid);

        /// <summary>
        /// Get stock by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock to get</param>
        /// <returns>Task of ApiResponse (Stock)</returns>
        System.Threading.Tasks.Task<ApiResponse<Stock>> GetStock2AsyncWithHttpInfo (string stockid);
        /// <summary>
        /// Get stock type by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocktypeid">ID of stock type to get</param>
        /// <returns>Task of StockType</returns>
        System.Threading.Tasks.Task<StockType> GetStockType1Async (string stocktypeid);

        /// <summary>
        /// Get stock type by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocktypeid">ID of stock type to get</param>
        /// <returns>Task of ApiResponse (StockType)</returns>
        System.Threading.Tasks.Task<ApiResponse<StockType>> GetStockType1AsyncWithHttpInfo (string stocktypeid);
        /// <summary>
        /// Get list of all stock types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;StockType&gt;</returns>
        System.Threading.Tasks.Task<List<StockType>> GetStockTypes1Async ();

        /// <summary>
        /// Get list of all stock types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;StockType&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<StockType>>> GetStockTypes1AsyncWithHttpInfo ();
        /// <summary>
        /// Get list of all stocks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;StockEntity&gt;</returns>
        System.Threading.Tasks.Task<List<StockEntity>> GetStocks1Async ();

        /// <summary>
        /// Get list of all stocks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;StockEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<StockEntity>>> GetStocks1AsyncWithHttpInfo ();
        /// <summary>
        /// Get list of all stocks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Stock&gt;</returns>
        System.Threading.Tasks.Task<List<Stock>> GetStocks2Async ();

        /// <summary>
        /// Get list of all stocks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Stock&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Stock>>> GetStocks2AsyncWithHttpInfo ();
        /// <summary>
        /// Get template by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateid">ID of template to get</param>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <returns>Task of TemplateEntity</returns>
        System.Threading.Tasks.Task<TemplateEntity> GetTemplate1Async (string templateid, bool? thumb = null);

        /// <summary>
        /// Get template by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateid">ID of template to get</param>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <returns>Task of ApiResponse (TemplateEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateEntity>> GetTemplate1AsyncWithHttpInfo (string templateid, bool? thumb = null);
        /// <summary>
        /// Get list of all templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <returns>Task of List&lt;TemplateEntity&gt;</returns>
        System.Threading.Tasks.Task<List<TemplateEntity>> GetTemplates1Async (bool? thumb = null);

        /// <summary>
        /// Get list of all templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <returns>Task of ApiResponse (List&lt;TemplateEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TemplateEntity>>> GetTemplates1AsyncWithHttpInfo (bool? thumb = null);
        /// <summary>
        /// Get thing by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingid">ID of thing to get</param>
        /// <returns>Task of Thing</returns>
        System.Threading.Tasks.Task<Thing> GetThing1Async (string thingid);

        /// <summary>
        /// Get thing by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingid">ID of thing to get</param>
        /// <returns>Task of ApiResponse (Thing)</returns>
        System.Threading.Tasks.Task<ApiResponse<Thing>> GetThing1AsyncWithHttpInfo (string thingid);
        /// <summary>
        /// Get list of all things
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Thing&gt;</returns>
        System.Threading.Tasks.Task<List<Thing>> GetThings1Async ();

        /// <summary>
        /// Get list of all things
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Thing&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Thing>>> GetThings1AsyncWithHttpInfo ();
        /// <summary>
        /// Import new die design
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> ImportDieDesign1Async (ImportDieDesignEntity body = null);

        /// <summary>
        /// Import new die design
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ImportDieDesign1AsyncWithHttpInfo (ImportDieDesignEntity body = null);
        /// <summary>
        /// Import new template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> ImportTemplate1Async (ImportTemplateEntity body = null);

        /// <summary>
        /// Import new template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ImportTemplate1AsyncWithHttpInfo (ImportTemplateEntity body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class LibrariesAPIApi : ILibrariesAPIApi
    {
        private TiliaLabs.Phoenix.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LibrariesAPIApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LibrariesAPIApi(String basePath)
        {
            this.Configuration = new TiliaLabs.Phoenix.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TiliaLabs.Phoenix.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LibrariesAPIApi"/> class
        /// </summary>
        /// <returns></returns>
        public LibrariesAPIApi()
        {
            this.Configuration = TiliaLabs.Phoenix.Client.Configuration.Default;

            ExceptionFactory = TiliaLabs.Phoenix.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LibrariesAPIApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LibrariesAPIApi(TiliaLabs.Phoenix.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TiliaLabs.Phoenix.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TiliaLabs.Phoenix.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TiliaLabs.Phoenix.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TiliaLabs.Phoenix.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add new grade to stock 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity AddGrade (string stockid, GradeEntity body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = AddGradeWithHttpInfo(stockid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add new grade to stock 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > AddGradeWithHttpInfo (string stockid, GradeEntity body = null)
        {
            // verify the required parameter 'stockid' is set
            if (stockid == null)
                throw new ApiException(400, "Missing required parameter 'stockid' when calling LibrariesAPIApi->AddGrade");

            var localVarPath = "/libraries/stocks/{stockid}/grades";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stockid != null) localVarPathParams.Add("stockid", this.Configuration.ApiClient.ParameterToString(stockid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddGrade", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Add new grade to stock 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> AddGradeAsync (string stockid, GradeEntity body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await AddGradeAsyncWithHttpInfo(stockid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add new grade to stock 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> AddGradeAsyncWithHttpInfo (string stockid, GradeEntity body = null)
        {
            // verify the required parameter 'stockid' is set
            if (stockid == null)
                throw new ApiException(400, "Missing required parameter 'stockid' when calling LibrariesAPIApi->AddGrade");

            var localVarPath = "/libraries/stocks/{stockid}/grades";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stockid != null) localVarPathParams.Add("stockid", this.Configuration.ApiClient.ParameterToString(stockid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddGrade", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Add new mode 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity AddMode1 (Mode body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = AddMode1WithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add new mode 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > AddMode1WithHttpInfo (Mode body = null)
        {

            var localVarPath = "/libraries/modes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddMode1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Add new mode 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> AddMode1Async (Mode body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await AddMode1AsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add new mode 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> AddMode1AsyncWithHttpInfo (Mode body = null)
        {

            var localVarPath = "/libraries/modes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddMode1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Add new plate 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity AddPlate1 (PlateEntity body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = AddPlate1WithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add new plate 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > AddPlate1WithHttpInfo (PlateEntity body = null)
        {

            var localVarPath = "/libraries/plates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPlate1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Add new plate 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> AddPlate1Async (PlateEntity body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await AddPlate1AsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add new plate 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> AddPlate1AsyncWithHttpInfo (PlateEntity body = null)
        {

            var localVarPath = "/libraries/plates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPlate1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Add new press 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity AddPress1 (PressEntity body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = AddPress1WithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add new press 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > AddPress1WithHttpInfo (PressEntity body = null)
        {

            var localVarPath = "/libraries/presses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPress1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Add new press 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> AddPress1Async (PressEntity body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await AddPress1AsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add new press 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> AddPress1AsyncWithHttpInfo (PressEntity body = null)
        {

            var localVarPath = "/libraries/presses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPress1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Add new process 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity AddProcess1 (Process body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = AddProcess1WithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add new process 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > AddProcess1WithHttpInfo (Process body = null)
        {

            var localVarPath = "/libraries/processes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddProcess1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Add new process 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> AddProcess1Async (Process body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await AddProcess1AsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add new process 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> AddProcess1AsyncWithHttpInfo (Process body = null)
        {

            var localVarPath = "/libraries/processes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddProcess1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Add new process type 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity AddProcessType1 (ProcessType body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = AddProcessType1WithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add new process type 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > AddProcessType1WithHttpInfo (ProcessType body = null)
        {

            var localVarPath = "/libraries/processtypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddProcessType1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Add new process type 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> AddProcessType1Async (ProcessType body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await AddProcessType1AsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add new process type 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> AddProcessType1AsyncWithHttpInfo (ProcessType body = null)
        {

            var localVarPath = "/libraries/processtypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddProcessType1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Add new roll to grade 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity AddRoll (string gradeid, string stockid, RollEntity body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = AddRollWithHttpInfo(gradeid, stockid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add new roll to grade 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > AddRollWithHttpInfo (string gradeid, string stockid, RollEntity body = null)
        {
            // verify the required parameter 'gradeid' is set
            if (gradeid == null)
                throw new ApiException(400, "Missing required parameter 'gradeid' when calling LibrariesAPIApi->AddRoll");
            // verify the required parameter 'stockid' is set
            if (stockid == null)
                throw new ApiException(400, "Missing required parameter 'stockid' when calling LibrariesAPIApi->AddRoll");

            var localVarPath = "/libraries/stocks/{stockid}/grades/{gradeid}/rolls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gradeid != null) localVarPathParams.Add("gradeid", this.Configuration.ApiClient.ParameterToString(gradeid)); // path parameter
            if (stockid != null) localVarPathParams.Add("stockid", this.Configuration.ApiClient.ParameterToString(stockid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddRoll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Add new roll to grade 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> AddRollAsync (string gradeid, string stockid, RollEntity body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await AddRollAsyncWithHttpInfo(gradeid, stockid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add new roll to grade 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> AddRollAsyncWithHttpInfo (string gradeid, string stockid, RollEntity body = null)
        {
            // verify the required parameter 'gradeid' is set
            if (gradeid == null)
                throw new ApiException(400, "Missing required parameter 'gradeid' when calling LibrariesAPIApi->AddRoll");
            // verify the required parameter 'stockid' is set
            if (stockid == null)
                throw new ApiException(400, "Missing required parameter 'stockid' when calling LibrariesAPIApi->AddRoll");

            var localVarPath = "/libraries/stocks/{stockid}/grades/{gradeid}/rolls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gradeid != null) localVarPathParams.Add("gradeid", this.Configuration.ApiClient.ParameterToString(gradeid)); // path parameter
            if (stockid != null) localVarPathParams.Add("stockid", this.Configuration.ApiClient.ParameterToString(stockid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddRoll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Add new sheet to grade 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity AddSheet (string gradeid, string stockid, SheetEntity body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = AddSheetWithHttpInfo(gradeid, stockid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add new sheet to grade 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > AddSheetWithHttpInfo (string gradeid, string stockid, SheetEntity body = null)
        {
            // verify the required parameter 'gradeid' is set
            if (gradeid == null)
                throw new ApiException(400, "Missing required parameter 'gradeid' when calling LibrariesAPIApi->AddSheet");
            // verify the required parameter 'stockid' is set
            if (stockid == null)
                throw new ApiException(400, "Missing required parameter 'stockid' when calling LibrariesAPIApi->AddSheet");

            var localVarPath = "/libraries/stocks/{stockid}/grades/{gradeid}/sheets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gradeid != null) localVarPathParams.Add("gradeid", this.Configuration.ApiClient.ParameterToString(gradeid)); // path parameter
            if (stockid != null) localVarPathParams.Add("stockid", this.Configuration.ApiClient.ParameterToString(stockid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Add new sheet to grade 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> AddSheetAsync (string gradeid, string stockid, SheetEntity body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await AddSheetAsyncWithHttpInfo(gradeid, stockid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add new sheet to grade 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> AddSheetAsyncWithHttpInfo (string gradeid, string stockid, SheetEntity body = null)
        {
            // verify the required parameter 'gradeid' is set
            if (gradeid == null)
                throw new ApiException(400, "Missing required parameter 'gradeid' when calling LibrariesAPIApi->AddSheet");
            // verify the required parameter 'stockid' is set
            if (stockid == null)
                throw new ApiException(400, "Missing required parameter 'stockid' when calling LibrariesAPIApi->AddSheet");

            var localVarPath = "/libraries/stocks/{stockid}/grades/{gradeid}/sheets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gradeid != null) localVarPathParams.Add("gradeid", this.Configuration.ApiClient.ParameterToString(gradeid)); // path parameter
            if (stockid != null) localVarPathParams.Add("stockid", this.Configuration.ApiClient.ParameterToString(stockid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Add new stock 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity AddStock1 (StockEntity body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = AddStock1WithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add new stock 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > AddStock1WithHttpInfo (StockEntity body = null)
        {

            var localVarPath = "/libraries/stocks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddStock1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Add new stock 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> AddStock1Async (StockEntity body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await AddStock1AsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add new stock 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> AddStock1AsyncWithHttpInfo (StockEntity body = null)
        {

            var localVarPath = "/libraries/stocks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddStock1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Add new stock 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity AddStock2 (Stock body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = AddStock2WithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add new stock 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > AddStock2WithHttpInfo (Stock body = null)
        {

            var localVarPath = "/libraries/v2/stocks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddStock2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Add new stock 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> AddStock2Async (Stock body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await AddStock2AsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add new stock 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> AddStock2AsyncWithHttpInfo (Stock body = null)
        {

            var localVarPath = "/libraries/v2/stocks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddStock2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Add new stock type 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity AddStockType1 (StockType body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = AddStockType1WithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add new stock type 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > AddStockType1WithHttpInfo (StockType body = null)
        {

            var localVarPath = "/libraries/stocktypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddStockType1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Add new stock type 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> AddStockType1Async (StockType body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await AddStockType1AsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add new stock type 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> AddStockType1AsyncWithHttpInfo (StockType body = null)
        {

            var localVarPath = "/libraries/stocktypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddStockType1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Add new thing 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity AddThing1 (Thing body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = AddThing1WithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add new thing 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > AddThing1WithHttpInfo (Thing body = null)
        {

            var localVarPath = "/libraries/things";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddThing1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Add new thing 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> AddThing1Async (Thing body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await AddThing1AsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add new thing 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> AddThing1AsyncWithHttpInfo (Thing body = null)
        {

            var localVarPath = "/libraries/things";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddThing1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Delete die design 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="diedesignid">ID of die design to delete</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity DeleteDieDesign1 (string diedesignid)
        {
             ApiResponse<ResponseEntity> localVarResponse = DeleteDieDesign1WithHttpInfo(diedesignid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete die design 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="diedesignid">ID of die design to delete</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > DeleteDieDesign1WithHttpInfo (string diedesignid)
        {
            // verify the required parameter 'diedesignid' is set
            if (diedesignid == null)
                throw new ApiException(400, "Missing required parameter 'diedesignid' when calling LibrariesAPIApi->DeleteDieDesign1");

            var localVarPath = "/libraries/diedesigns/{diedesignid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (diedesignid != null) localVarPathParams.Add("diedesignid", this.Configuration.ApiClient.ParameterToString(diedesignid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDieDesign1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Delete die design 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="diedesignid">ID of die design to delete</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> DeleteDieDesign1Async (string diedesignid)
        {
             ApiResponse<ResponseEntity> localVarResponse = await DeleteDieDesign1AsyncWithHttpInfo(diedesignid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete die design 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="diedesignid">ID of die design to delete</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> DeleteDieDesign1AsyncWithHttpInfo (string diedesignid)
        {
            // verify the required parameter 'diedesignid' is set
            if (diedesignid == null)
                throw new ApiException(400, "Missing required parameter 'diedesignid' when calling LibrariesAPIApi->DeleteDieDesign1");

            var localVarPath = "/libraries/diedesigns/{diedesignid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (diedesignid != null) localVarPathParams.Add("diedesignid", this.Configuration.ApiClient.ParameterToString(diedesignid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDieDesign1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Delete grade in stock 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade to delete</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity DeleteGrade (string gradeid, string stockid)
        {
             ApiResponse<ResponseEntity> localVarResponse = DeleteGradeWithHttpInfo(gradeid, stockid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete grade in stock 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade to delete</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > DeleteGradeWithHttpInfo (string gradeid, string stockid)
        {
            // verify the required parameter 'gradeid' is set
            if (gradeid == null)
                throw new ApiException(400, "Missing required parameter 'gradeid' when calling LibrariesAPIApi->DeleteGrade");
            // verify the required parameter 'stockid' is set
            if (stockid == null)
                throw new ApiException(400, "Missing required parameter 'stockid' when calling LibrariesAPIApi->DeleteGrade");

            var localVarPath = "/libraries/stocks/{stockid}/grades/{gradeid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gradeid != null) localVarPathParams.Add("gradeid", this.Configuration.ApiClient.ParameterToString(gradeid)); // path parameter
            if (stockid != null) localVarPathParams.Add("stockid", this.Configuration.ApiClient.ParameterToString(stockid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGrade", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Delete grade in stock 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade to delete</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> DeleteGradeAsync (string gradeid, string stockid)
        {
             ApiResponse<ResponseEntity> localVarResponse = await DeleteGradeAsyncWithHttpInfo(gradeid, stockid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete grade in stock 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade to delete</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> DeleteGradeAsyncWithHttpInfo (string gradeid, string stockid)
        {
            // verify the required parameter 'gradeid' is set
            if (gradeid == null)
                throw new ApiException(400, "Missing required parameter 'gradeid' when calling LibrariesAPIApi->DeleteGrade");
            // verify the required parameter 'stockid' is set
            if (stockid == null)
                throw new ApiException(400, "Missing required parameter 'stockid' when calling LibrariesAPIApi->DeleteGrade");

            var localVarPath = "/libraries/stocks/{stockid}/grades/{gradeid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gradeid != null) localVarPathParams.Add("gradeid", this.Configuration.ApiClient.ParameterToString(gradeid)); // path parameter
            if (stockid != null) localVarPathParams.Add("stockid", this.Configuration.ApiClient.ParameterToString(stockid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGrade", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Delete mode 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modeid">ID of mode to delete</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity DeleteMode1 (string modeid)
        {
             ApiResponse<ResponseEntity> localVarResponse = DeleteMode1WithHttpInfo(modeid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete mode 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modeid">ID of mode to delete</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > DeleteMode1WithHttpInfo (string modeid)
        {
            // verify the required parameter 'modeid' is set
            if (modeid == null)
                throw new ApiException(400, "Missing required parameter 'modeid' when calling LibrariesAPIApi->DeleteMode1");

            var localVarPath = "/libraries/modes/{modeid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modeid != null) localVarPathParams.Add("modeid", this.Configuration.ApiClient.ParameterToString(modeid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMode1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Delete mode 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modeid">ID of mode to delete</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> DeleteMode1Async (string modeid)
        {
             ApiResponse<ResponseEntity> localVarResponse = await DeleteMode1AsyncWithHttpInfo(modeid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete mode 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modeid">ID of mode to delete</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> DeleteMode1AsyncWithHttpInfo (string modeid)
        {
            // verify the required parameter 'modeid' is set
            if (modeid == null)
                throw new ApiException(400, "Missing required parameter 'modeid' when calling LibrariesAPIApi->DeleteMode1");

            var localVarPath = "/libraries/modes/{modeid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modeid != null) localVarPathParams.Add("modeid", this.Configuration.ApiClient.ParameterToString(modeid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMode1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Delete plate 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="plateid">ID of plate to delete</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity DeletePlate1 (string plateid)
        {
             ApiResponse<ResponseEntity> localVarResponse = DeletePlate1WithHttpInfo(plateid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete plate 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="plateid">ID of plate to delete</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > DeletePlate1WithHttpInfo (string plateid)
        {
            // verify the required parameter 'plateid' is set
            if (plateid == null)
                throw new ApiException(400, "Missing required parameter 'plateid' when calling LibrariesAPIApi->DeletePlate1");

            var localVarPath = "/libraries/plates/{plateid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (plateid != null) localVarPathParams.Add("plateid", this.Configuration.ApiClient.ParameterToString(plateid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePlate1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Delete plate 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="plateid">ID of plate to delete</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> DeletePlate1Async (string plateid)
        {
             ApiResponse<ResponseEntity> localVarResponse = await DeletePlate1AsyncWithHttpInfo(plateid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete plate 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="plateid">ID of plate to delete</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> DeletePlate1AsyncWithHttpInfo (string plateid)
        {
            // verify the required parameter 'plateid' is set
            if (plateid == null)
                throw new ApiException(400, "Missing required parameter 'plateid' when calling LibrariesAPIApi->DeletePlate1");

            var localVarPath = "/libraries/plates/{plateid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (plateid != null) localVarPathParams.Add("plateid", this.Configuration.ApiClient.ParameterToString(plateid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePlate1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Delete press 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pressid">ID of press to delete</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity DeletePress1 (string pressid)
        {
             ApiResponse<ResponseEntity> localVarResponse = DeletePress1WithHttpInfo(pressid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete press 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pressid">ID of press to delete</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > DeletePress1WithHttpInfo (string pressid)
        {
            // verify the required parameter 'pressid' is set
            if (pressid == null)
                throw new ApiException(400, "Missing required parameter 'pressid' when calling LibrariesAPIApi->DeletePress1");

            var localVarPath = "/libraries/presses/{pressid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pressid != null) localVarPathParams.Add("pressid", this.Configuration.ApiClient.ParameterToString(pressid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePress1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Delete press 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pressid">ID of press to delete</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> DeletePress1Async (string pressid)
        {
             ApiResponse<ResponseEntity> localVarResponse = await DeletePress1AsyncWithHttpInfo(pressid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete press 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pressid">ID of press to delete</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> DeletePress1AsyncWithHttpInfo (string pressid)
        {
            // verify the required parameter 'pressid' is set
            if (pressid == null)
                throw new ApiException(400, "Missing required parameter 'pressid' when calling LibrariesAPIApi->DeletePress1");

            var localVarPath = "/libraries/presses/{pressid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pressid != null) localVarPathParams.Add("pressid", this.Configuration.ApiClient.ParameterToString(pressid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePress1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Delete process 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processid">ID of process to delete</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity DeleteProcess1 (string processid)
        {
             ApiResponse<ResponseEntity> localVarResponse = DeleteProcess1WithHttpInfo(processid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete process 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processid">ID of process to delete</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > DeleteProcess1WithHttpInfo (string processid)
        {
            // verify the required parameter 'processid' is set
            if (processid == null)
                throw new ApiException(400, "Missing required parameter 'processid' when calling LibrariesAPIApi->DeleteProcess1");

            var localVarPath = "/libraries/processes/{processid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processid != null) localVarPathParams.Add("processid", this.Configuration.ApiClient.ParameterToString(processid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProcess1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Delete process 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processid">ID of process to delete</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> DeleteProcess1Async (string processid)
        {
             ApiResponse<ResponseEntity> localVarResponse = await DeleteProcess1AsyncWithHttpInfo(processid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete process 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processid">ID of process to delete</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> DeleteProcess1AsyncWithHttpInfo (string processid)
        {
            // verify the required parameter 'processid' is set
            if (processid == null)
                throw new ApiException(400, "Missing required parameter 'processid' when calling LibrariesAPIApi->DeleteProcess1");

            var localVarPath = "/libraries/processes/{processid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processid != null) localVarPathParams.Add("processid", this.Configuration.ApiClient.ParameterToString(processid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProcess1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Delete process type 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processtypeid">ID of process type to delete</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity DeleteProcessType1 (string processtypeid)
        {
             ApiResponse<ResponseEntity> localVarResponse = DeleteProcessType1WithHttpInfo(processtypeid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete process type 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processtypeid">ID of process type to delete</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > DeleteProcessType1WithHttpInfo (string processtypeid)
        {
            // verify the required parameter 'processtypeid' is set
            if (processtypeid == null)
                throw new ApiException(400, "Missing required parameter 'processtypeid' when calling LibrariesAPIApi->DeleteProcessType1");

            var localVarPath = "/libraries/processtypes/{processtypeid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processtypeid != null) localVarPathParams.Add("processtypeid", this.Configuration.ApiClient.ParameterToString(processtypeid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProcessType1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Delete process type 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processtypeid">ID of process type to delete</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> DeleteProcessType1Async (string processtypeid)
        {
             ApiResponse<ResponseEntity> localVarResponse = await DeleteProcessType1AsyncWithHttpInfo(processtypeid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete process type 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processtypeid">ID of process type to delete</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> DeleteProcessType1AsyncWithHttpInfo (string processtypeid)
        {
            // verify the required parameter 'processtypeid' is set
            if (processtypeid == null)
                throw new ApiException(400, "Missing required parameter 'processtypeid' when calling LibrariesAPIApi->DeleteProcessType1");

            var localVarPath = "/libraries/processtypes/{processtypeid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processtypeid != null) localVarPathParams.Add("processtypeid", this.Configuration.ApiClient.ParameterToString(processtypeid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProcessType1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Delete roll in grade 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rollid">ID of roll to delete</param>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity DeleteRoll (string rollid, string gradeid, string stockid)
        {
             ApiResponse<ResponseEntity> localVarResponse = DeleteRollWithHttpInfo(rollid, gradeid, stockid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete roll in grade 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rollid">ID of roll to delete</param>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > DeleteRollWithHttpInfo (string rollid, string gradeid, string stockid)
        {
            // verify the required parameter 'rollid' is set
            if (rollid == null)
                throw new ApiException(400, "Missing required parameter 'rollid' when calling LibrariesAPIApi->DeleteRoll");
            // verify the required parameter 'gradeid' is set
            if (gradeid == null)
                throw new ApiException(400, "Missing required parameter 'gradeid' when calling LibrariesAPIApi->DeleteRoll");
            // verify the required parameter 'stockid' is set
            if (stockid == null)
                throw new ApiException(400, "Missing required parameter 'stockid' when calling LibrariesAPIApi->DeleteRoll");

            var localVarPath = "/libraries/stocks/{stockid}/grades/{gradeid}/rolls/{rollid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rollid != null) localVarPathParams.Add("rollid", this.Configuration.ApiClient.ParameterToString(rollid)); // path parameter
            if (gradeid != null) localVarPathParams.Add("gradeid", this.Configuration.ApiClient.ParameterToString(gradeid)); // path parameter
            if (stockid != null) localVarPathParams.Add("stockid", this.Configuration.ApiClient.ParameterToString(stockid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRoll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Delete roll in grade 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rollid">ID of roll to delete</param>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> DeleteRollAsync (string rollid, string gradeid, string stockid)
        {
             ApiResponse<ResponseEntity> localVarResponse = await DeleteRollAsyncWithHttpInfo(rollid, gradeid, stockid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete roll in grade 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rollid">ID of roll to delete</param>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> DeleteRollAsyncWithHttpInfo (string rollid, string gradeid, string stockid)
        {
            // verify the required parameter 'rollid' is set
            if (rollid == null)
                throw new ApiException(400, "Missing required parameter 'rollid' when calling LibrariesAPIApi->DeleteRoll");
            // verify the required parameter 'gradeid' is set
            if (gradeid == null)
                throw new ApiException(400, "Missing required parameter 'gradeid' when calling LibrariesAPIApi->DeleteRoll");
            // verify the required parameter 'stockid' is set
            if (stockid == null)
                throw new ApiException(400, "Missing required parameter 'stockid' when calling LibrariesAPIApi->DeleteRoll");

            var localVarPath = "/libraries/stocks/{stockid}/grades/{gradeid}/rolls/{rollid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rollid != null) localVarPathParams.Add("rollid", this.Configuration.ApiClient.ParameterToString(rollid)); // path parameter
            if (gradeid != null) localVarPathParams.Add("gradeid", this.Configuration.ApiClient.ParameterToString(gradeid)); // path parameter
            if (stockid != null) localVarPathParams.Add("stockid", this.Configuration.ApiClient.ParameterToString(stockid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRoll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Delete sheet in grade 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sheetid">ID of sheet to delete</param>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity DeleteSheet (string sheetid, string gradeid, string stockid)
        {
             ApiResponse<ResponseEntity> localVarResponse = DeleteSheetWithHttpInfo(sheetid, gradeid, stockid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete sheet in grade 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sheetid">ID of sheet to delete</param>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > DeleteSheetWithHttpInfo (string sheetid, string gradeid, string stockid)
        {
            // verify the required parameter 'sheetid' is set
            if (sheetid == null)
                throw new ApiException(400, "Missing required parameter 'sheetid' when calling LibrariesAPIApi->DeleteSheet");
            // verify the required parameter 'gradeid' is set
            if (gradeid == null)
                throw new ApiException(400, "Missing required parameter 'gradeid' when calling LibrariesAPIApi->DeleteSheet");
            // verify the required parameter 'stockid' is set
            if (stockid == null)
                throw new ApiException(400, "Missing required parameter 'stockid' when calling LibrariesAPIApi->DeleteSheet");

            var localVarPath = "/libraries/stocks/{stockid}/grades/{gradeid}/sheets/{sheetid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sheetid != null) localVarPathParams.Add("sheetid", this.Configuration.ApiClient.ParameterToString(sheetid)); // path parameter
            if (gradeid != null) localVarPathParams.Add("gradeid", this.Configuration.ApiClient.ParameterToString(gradeid)); // path parameter
            if (stockid != null) localVarPathParams.Add("stockid", this.Configuration.ApiClient.ParameterToString(stockid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Delete sheet in grade 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sheetid">ID of sheet to delete</param>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> DeleteSheetAsync (string sheetid, string gradeid, string stockid)
        {
             ApiResponse<ResponseEntity> localVarResponse = await DeleteSheetAsyncWithHttpInfo(sheetid, gradeid, stockid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete sheet in grade 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sheetid">ID of sheet to delete</param>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> DeleteSheetAsyncWithHttpInfo (string sheetid, string gradeid, string stockid)
        {
            // verify the required parameter 'sheetid' is set
            if (sheetid == null)
                throw new ApiException(400, "Missing required parameter 'sheetid' when calling LibrariesAPIApi->DeleteSheet");
            // verify the required parameter 'gradeid' is set
            if (gradeid == null)
                throw new ApiException(400, "Missing required parameter 'gradeid' when calling LibrariesAPIApi->DeleteSheet");
            // verify the required parameter 'stockid' is set
            if (stockid == null)
                throw new ApiException(400, "Missing required parameter 'stockid' when calling LibrariesAPIApi->DeleteSheet");

            var localVarPath = "/libraries/stocks/{stockid}/grades/{gradeid}/sheets/{sheetid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sheetid != null) localVarPathParams.Add("sheetid", this.Configuration.ApiClient.ParameterToString(sheetid)); // path parameter
            if (gradeid != null) localVarPathParams.Add("gradeid", this.Configuration.ApiClient.ParameterToString(gradeid)); // path parameter
            if (stockid != null) localVarPathParams.Add("stockid", this.Configuration.ApiClient.ParameterToString(stockid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Delete stock 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock to delete</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity DeleteStock1 (string stockid)
        {
             ApiResponse<ResponseEntity> localVarResponse = DeleteStock1WithHttpInfo(stockid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete stock 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock to delete</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > DeleteStock1WithHttpInfo (string stockid)
        {
            // verify the required parameter 'stockid' is set
            if (stockid == null)
                throw new ApiException(400, "Missing required parameter 'stockid' when calling LibrariesAPIApi->DeleteStock1");

            var localVarPath = "/libraries/stocks/{stockid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stockid != null) localVarPathParams.Add("stockid", this.Configuration.ApiClient.ParameterToString(stockid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteStock1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Delete stock 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock to delete</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> DeleteStock1Async (string stockid)
        {
             ApiResponse<ResponseEntity> localVarResponse = await DeleteStock1AsyncWithHttpInfo(stockid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete stock 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock to delete</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> DeleteStock1AsyncWithHttpInfo (string stockid)
        {
            // verify the required parameter 'stockid' is set
            if (stockid == null)
                throw new ApiException(400, "Missing required parameter 'stockid' when calling LibrariesAPIApi->DeleteStock1");

            var localVarPath = "/libraries/stocks/{stockid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stockid != null) localVarPathParams.Add("stockid", this.Configuration.ApiClient.ParameterToString(stockid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteStock1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Delete stock 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock to delete</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity DeleteStock2 (string stockid)
        {
             ApiResponse<ResponseEntity> localVarResponse = DeleteStock2WithHttpInfo(stockid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete stock 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock to delete</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > DeleteStock2WithHttpInfo (string stockid)
        {
            // verify the required parameter 'stockid' is set
            if (stockid == null)
                throw new ApiException(400, "Missing required parameter 'stockid' when calling LibrariesAPIApi->DeleteStock2");

            var localVarPath = "/libraries/v2/stocks/{stockid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stockid != null) localVarPathParams.Add("stockid", this.Configuration.ApiClient.ParameterToString(stockid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteStock2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Delete stock 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock to delete</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> DeleteStock2Async (string stockid)
        {
             ApiResponse<ResponseEntity> localVarResponse = await DeleteStock2AsyncWithHttpInfo(stockid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete stock 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock to delete</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> DeleteStock2AsyncWithHttpInfo (string stockid)
        {
            // verify the required parameter 'stockid' is set
            if (stockid == null)
                throw new ApiException(400, "Missing required parameter 'stockid' when calling LibrariesAPIApi->DeleteStock2");

            var localVarPath = "/libraries/v2/stocks/{stockid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stockid != null) localVarPathParams.Add("stockid", this.Configuration.ApiClient.ParameterToString(stockid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteStock2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Delete stock type 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocktypeid">ID of stock type to delete</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity DeleteStockType1 (string stocktypeid)
        {
             ApiResponse<ResponseEntity> localVarResponse = DeleteStockType1WithHttpInfo(stocktypeid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete stock type 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocktypeid">ID of stock type to delete</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > DeleteStockType1WithHttpInfo (string stocktypeid)
        {
            // verify the required parameter 'stocktypeid' is set
            if (stocktypeid == null)
                throw new ApiException(400, "Missing required parameter 'stocktypeid' when calling LibrariesAPIApi->DeleteStockType1");

            var localVarPath = "/libraries/stocktypes/{stocktypeid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stocktypeid != null) localVarPathParams.Add("stocktypeid", this.Configuration.ApiClient.ParameterToString(stocktypeid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteStockType1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Delete stock type 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocktypeid">ID of stock type to delete</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> DeleteStockType1Async (string stocktypeid)
        {
             ApiResponse<ResponseEntity> localVarResponse = await DeleteStockType1AsyncWithHttpInfo(stocktypeid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete stock type 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocktypeid">ID of stock type to delete</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> DeleteStockType1AsyncWithHttpInfo (string stocktypeid)
        {
            // verify the required parameter 'stocktypeid' is set
            if (stocktypeid == null)
                throw new ApiException(400, "Missing required parameter 'stocktypeid' when calling LibrariesAPIApi->DeleteStockType1");

            var localVarPath = "/libraries/stocktypes/{stocktypeid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stocktypeid != null) localVarPathParams.Add("stocktypeid", this.Configuration.ApiClient.ParameterToString(stocktypeid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteStockType1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Delete template 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateid">ID of template to delete</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity DeleteTemplate1 (string templateid)
        {
             ApiResponse<ResponseEntity> localVarResponse = DeleteTemplate1WithHttpInfo(templateid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete template 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateid">ID of template to delete</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > DeleteTemplate1WithHttpInfo (string templateid)
        {
            // verify the required parameter 'templateid' is set
            if (templateid == null)
                throw new ApiException(400, "Missing required parameter 'templateid' when calling LibrariesAPIApi->DeleteTemplate1");

            var localVarPath = "/libraries/templates/{templateid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateid != null) localVarPathParams.Add("templateid", this.Configuration.ApiClient.ParameterToString(templateid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTemplate1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Delete template 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateid">ID of template to delete</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> DeleteTemplate1Async (string templateid)
        {
             ApiResponse<ResponseEntity> localVarResponse = await DeleteTemplate1AsyncWithHttpInfo(templateid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete template 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateid">ID of template to delete</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> DeleteTemplate1AsyncWithHttpInfo (string templateid)
        {
            // verify the required parameter 'templateid' is set
            if (templateid == null)
                throw new ApiException(400, "Missing required parameter 'templateid' when calling LibrariesAPIApi->DeleteTemplate1");

            var localVarPath = "/libraries/templates/{templateid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateid != null) localVarPathParams.Add("templateid", this.Configuration.ApiClient.ParameterToString(templateid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTemplate1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Delete thing 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingid">ID of thing to delete</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity DeleteThing1 (string thingid)
        {
             ApiResponse<ResponseEntity> localVarResponse = DeleteThing1WithHttpInfo(thingid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete thing 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingid">ID of thing to delete</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > DeleteThing1WithHttpInfo (string thingid)
        {
            // verify the required parameter 'thingid' is set
            if (thingid == null)
                throw new ApiException(400, "Missing required parameter 'thingid' when calling LibrariesAPIApi->DeleteThing1");

            var localVarPath = "/libraries/things/{thingid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thingid != null) localVarPathParams.Add("thingid", this.Configuration.ApiClient.ParameterToString(thingid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteThing1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Delete thing 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingid">ID of thing to delete</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> DeleteThing1Async (string thingid)
        {
             ApiResponse<ResponseEntity> localVarResponse = await DeleteThing1AsyncWithHttpInfo(thingid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete thing 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingid">ID of thing to delete</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> DeleteThing1AsyncWithHttpInfo (string thingid)
        {
            // verify the required parameter 'thingid' is set
            if (thingid == null)
                throw new ApiException(400, "Missing required parameter 'thingid' when calling LibrariesAPIApi->DeleteThing1");

            var localVarPath = "/libraries/things/{thingid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thingid != null) localVarPathParams.Add("thingid", this.Configuration.ApiClient.ParameterToString(thingid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteThing1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Edit grade 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade to edit</param>
        /// <param name="stockid">ID of stock</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity EditGrade (string gradeid, string stockid, GradeEntity body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = EditGradeWithHttpInfo(gradeid, stockid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit grade 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade to edit</param>
        /// <param name="stockid">ID of stock</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > EditGradeWithHttpInfo (string gradeid, string stockid, GradeEntity body = null)
        {
            // verify the required parameter 'gradeid' is set
            if (gradeid == null)
                throw new ApiException(400, "Missing required parameter 'gradeid' when calling LibrariesAPIApi->EditGrade");
            // verify the required parameter 'stockid' is set
            if (stockid == null)
                throw new ApiException(400, "Missing required parameter 'stockid' when calling LibrariesAPIApi->EditGrade");

            var localVarPath = "/libraries/stocks/{stockid}/grades/{gradeid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gradeid != null) localVarPathParams.Add("gradeid", this.Configuration.ApiClient.ParameterToString(gradeid)); // path parameter
            if (stockid != null) localVarPathParams.Add("stockid", this.Configuration.ApiClient.ParameterToString(stockid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditGrade", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Edit grade 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade to edit</param>
        /// <param name="stockid">ID of stock</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> EditGradeAsync (string gradeid, string stockid, GradeEntity body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await EditGradeAsyncWithHttpInfo(gradeid, stockid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit grade 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade to edit</param>
        /// <param name="stockid">ID of stock</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> EditGradeAsyncWithHttpInfo (string gradeid, string stockid, GradeEntity body = null)
        {
            // verify the required parameter 'gradeid' is set
            if (gradeid == null)
                throw new ApiException(400, "Missing required parameter 'gradeid' when calling LibrariesAPIApi->EditGrade");
            // verify the required parameter 'stockid' is set
            if (stockid == null)
                throw new ApiException(400, "Missing required parameter 'stockid' when calling LibrariesAPIApi->EditGrade");

            var localVarPath = "/libraries/stocks/{stockid}/grades/{gradeid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gradeid != null) localVarPathParams.Add("gradeid", this.Configuration.ApiClient.ParameterToString(gradeid)); // path parameter
            if (stockid != null) localVarPathParams.Add("stockid", this.Configuration.ApiClient.ParameterToString(stockid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditGrade", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Edit mode 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modeid">ID of mode to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity EditMode1 (string modeid, Mode body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = EditMode1WithHttpInfo(modeid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit mode 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modeid">ID of mode to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > EditMode1WithHttpInfo (string modeid, Mode body = null)
        {
            // verify the required parameter 'modeid' is set
            if (modeid == null)
                throw new ApiException(400, "Missing required parameter 'modeid' when calling LibrariesAPIApi->EditMode1");

            var localVarPath = "/libraries/modes/{modeid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modeid != null) localVarPathParams.Add("modeid", this.Configuration.ApiClient.ParameterToString(modeid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditMode1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Edit mode 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modeid">ID of mode to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> EditMode1Async (string modeid, Mode body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await EditMode1AsyncWithHttpInfo(modeid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit mode 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modeid">ID of mode to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> EditMode1AsyncWithHttpInfo (string modeid, Mode body = null)
        {
            // verify the required parameter 'modeid' is set
            if (modeid == null)
                throw new ApiException(400, "Missing required parameter 'modeid' when calling LibrariesAPIApi->EditMode1");

            var localVarPath = "/libraries/modes/{modeid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modeid != null) localVarPathParams.Add("modeid", this.Configuration.ApiClient.ParameterToString(modeid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditMode1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Edit plate 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="plateid">ID of plate to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity EditPlate1 (string plateid, PlateEntity body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = EditPlate1WithHttpInfo(plateid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit plate 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="plateid">ID of plate to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > EditPlate1WithHttpInfo (string plateid, PlateEntity body = null)
        {
            // verify the required parameter 'plateid' is set
            if (plateid == null)
                throw new ApiException(400, "Missing required parameter 'plateid' when calling LibrariesAPIApi->EditPlate1");

            var localVarPath = "/libraries/plates/{plateid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (plateid != null) localVarPathParams.Add("plateid", this.Configuration.ApiClient.ParameterToString(plateid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditPlate1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Edit plate 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="plateid">ID of plate to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> EditPlate1Async (string plateid, PlateEntity body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await EditPlate1AsyncWithHttpInfo(plateid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit plate 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="plateid">ID of plate to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> EditPlate1AsyncWithHttpInfo (string plateid, PlateEntity body = null)
        {
            // verify the required parameter 'plateid' is set
            if (plateid == null)
                throw new ApiException(400, "Missing required parameter 'plateid' when calling LibrariesAPIApi->EditPlate1");

            var localVarPath = "/libraries/plates/{plateid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (plateid != null) localVarPathParams.Add("plateid", this.Configuration.ApiClient.ParameterToString(plateid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditPlate1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Edit press 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pressid">ID of press to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity EditPress1 (string pressid, PressEntity body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = EditPress1WithHttpInfo(pressid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit press 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pressid">ID of press to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > EditPress1WithHttpInfo (string pressid, PressEntity body = null)
        {
            // verify the required parameter 'pressid' is set
            if (pressid == null)
                throw new ApiException(400, "Missing required parameter 'pressid' when calling LibrariesAPIApi->EditPress1");

            var localVarPath = "/libraries/presses/{pressid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pressid != null) localVarPathParams.Add("pressid", this.Configuration.ApiClient.ParameterToString(pressid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditPress1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Edit press 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pressid">ID of press to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> EditPress1Async (string pressid, PressEntity body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await EditPress1AsyncWithHttpInfo(pressid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit press 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pressid">ID of press to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> EditPress1AsyncWithHttpInfo (string pressid, PressEntity body = null)
        {
            // verify the required parameter 'pressid' is set
            if (pressid == null)
                throw new ApiException(400, "Missing required parameter 'pressid' when calling LibrariesAPIApi->EditPress1");

            var localVarPath = "/libraries/presses/{pressid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pressid != null) localVarPathParams.Add("pressid", this.Configuration.ApiClient.ParameterToString(pressid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditPress1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Edit process 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processid">ID of process to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity EditProcess1 (string processid, Process body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = EditProcess1WithHttpInfo(processid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit process 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processid">ID of process to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > EditProcess1WithHttpInfo (string processid, Process body = null)
        {
            // verify the required parameter 'processid' is set
            if (processid == null)
                throw new ApiException(400, "Missing required parameter 'processid' when calling LibrariesAPIApi->EditProcess1");

            var localVarPath = "/libraries/processes/{processid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processid != null) localVarPathParams.Add("processid", this.Configuration.ApiClient.ParameterToString(processid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditProcess1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Edit process 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processid">ID of process to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> EditProcess1Async (string processid, Process body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await EditProcess1AsyncWithHttpInfo(processid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit process 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processid">ID of process to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> EditProcess1AsyncWithHttpInfo (string processid, Process body = null)
        {
            // verify the required parameter 'processid' is set
            if (processid == null)
                throw new ApiException(400, "Missing required parameter 'processid' when calling LibrariesAPIApi->EditProcess1");

            var localVarPath = "/libraries/processes/{processid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processid != null) localVarPathParams.Add("processid", this.Configuration.ApiClient.ParameterToString(processid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditProcess1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Edit process type 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processtypeid">ID of process type to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity EditProcessType1 (string processtypeid, ProcessType body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = EditProcessType1WithHttpInfo(processtypeid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit process type 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processtypeid">ID of process type to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > EditProcessType1WithHttpInfo (string processtypeid, ProcessType body = null)
        {
            // verify the required parameter 'processtypeid' is set
            if (processtypeid == null)
                throw new ApiException(400, "Missing required parameter 'processtypeid' when calling LibrariesAPIApi->EditProcessType1");

            var localVarPath = "/libraries/processtypes/{processtypeid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processtypeid != null) localVarPathParams.Add("processtypeid", this.Configuration.ApiClient.ParameterToString(processtypeid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditProcessType1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Edit process type 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processtypeid">ID of process type to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> EditProcessType1Async (string processtypeid, ProcessType body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await EditProcessType1AsyncWithHttpInfo(processtypeid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit process type 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processtypeid">ID of process type to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> EditProcessType1AsyncWithHttpInfo (string processtypeid, ProcessType body = null)
        {
            // verify the required parameter 'processtypeid' is set
            if (processtypeid == null)
                throw new ApiException(400, "Missing required parameter 'processtypeid' when calling LibrariesAPIApi->EditProcessType1");

            var localVarPath = "/libraries/processtypes/{processtypeid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processtypeid != null) localVarPathParams.Add("processtypeid", this.Configuration.ApiClient.ParameterToString(processtypeid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditProcessType1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Edit roll 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rollid">ID of roll to edit</param>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity EditRoll (string rollid, string gradeid, string stockid, RollEntity body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = EditRollWithHttpInfo(rollid, gradeid, stockid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit roll 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rollid">ID of roll to edit</param>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > EditRollWithHttpInfo (string rollid, string gradeid, string stockid, RollEntity body = null)
        {
            // verify the required parameter 'rollid' is set
            if (rollid == null)
                throw new ApiException(400, "Missing required parameter 'rollid' when calling LibrariesAPIApi->EditRoll");
            // verify the required parameter 'gradeid' is set
            if (gradeid == null)
                throw new ApiException(400, "Missing required parameter 'gradeid' when calling LibrariesAPIApi->EditRoll");
            // verify the required parameter 'stockid' is set
            if (stockid == null)
                throw new ApiException(400, "Missing required parameter 'stockid' when calling LibrariesAPIApi->EditRoll");

            var localVarPath = "/libraries/stocks/{stockid}/grades/{gradeid}/rolls/{rollid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rollid != null) localVarPathParams.Add("rollid", this.Configuration.ApiClient.ParameterToString(rollid)); // path parameter
            if (gradeid != null) localVarPathParams.Add("gradeid", this.Configuration.ApiClient.ParameterToString(gradeid)); // path parameter
            if (stockid != null) localVarPathParams.Add("stockid", this.Configuration.ApiClient.ParameterToString(stockid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditRoll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Edit roll 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rollid">ID of roll to edit</param>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> EditRollAsync (string rollid, string gradeid, string stockid, RollEntity body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await EditRollAsyncWithHttpInfo(rollid, gradeid, stockid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit roll 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rollid">ID of roll to edit</param>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> EditRollAsyncWithHttpInfo (string rollid, string gradeid, string stockid, RollEntity body = null)
        {
            // verify the required parameter 'rollid' is set
            if (rollid == null)
                throw new ApiException(400, "Missing required parameter 'rollid' when calling LibrariesAPIApi->EditRoll");
            // verify the required parameter 'gradeid' is set
            if (gradeid == null)
                throw new ApiException(400, "Missing required parameter 'gradeid' when calling LibrariesAPIApi->EditRoll");
            // verify the required parameter 'stockid' is set
            if (stockid == null)
                throw new ApiException(400, "Missing required parameter 'stockid' when calling LibrariesAPIApi->EditRoll");

            var localVarPath = "/libraries/stocks/{stockid}/grades/{gradeid}/rolls/{rollid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rollid != null) localVarPathParams.Add("rollid", this.Configuration.ApiClient.ParameterToString(rollid)); // path parameter
            if (gradeid != null) localVarPathParams.Add("gradeid", this.Configuration.ApiClient.ParameterToString(gradeid)); // path parameter
            if (stockid != null) localVarPathParams.Add("stockid", this.Configuration.ApiClient.ParameterToString(stockid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditRoll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Edit sheet 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sheetid">ID of sheet to edit</param>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity EditSheet (string sheetid, string gradeid, string stockid, SheetEntity body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = EditSheetWithHttpInfo(sheetid, gradeid, stockid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit sheet 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sheetid">ID of sheet to edit</param>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > EditSheetWithHttpInfo (string sheetid, string gradeid, string stockid, SheetEntity body = null)
        {
            // verify the required parameter 'sheetid' is set
            if (sheetid == null)
                throw new ApiException(400, "Missing required parameter 'sheetid' when calling LibrariesAPIApi->EditSheet");
            // verify the required parameter 'gradeid' is set
            if (gradeid == null)
                throw new ApiException(400, "Missing required parameter 'gradeid' when calling LibrariesAPIApi->EditSheet");
            // verify the required parameter 'stockid' is set
            if (stockid == null)
                throw new ApiException(400, "Missing required parameter 'stockid' when calling LibrariesAPIApi->EditSheet");

            var localVarPath = "/libraries/stocks/{stockid}/grades/{gradeid}/sheets/{sheetid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sheetid != null) localVarPathParams.Add("sheetid", this.Configuration.ApiClient.ParameterToString(sheetid)); // path parameter
            if (gradeid != null) localVarPathParams.Add("gradeid", this.Configuration.ApiClient.ParameterToString(gradeid)); // path parameter
            if (stockid != null) localVarPathParams.Add("stockid", this.Configuration.ApiClient.ParameterToString(stockid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditSheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Edit sheet 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sheetid">ID of sheet to edit</param>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> EditSheetAsync (string sheetid, string gradeid, string stockid, SheetEntity body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await EditSheetAsyncWithHttpInfo(sheetid, gradeid, stockid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit sheet 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sheetid">ID of sheet to edit</param>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> EditSheetAsyncWithHttpInfo (string sheetid, string gradeid, string stockid, SheetEntity body = null)
        {
            // verify the required parameter 'sheetid' is set
            if (sheetid == null)
                throw new ApiException(400, "Missing required parameter 'sheetid' when calling LibrariesAPIApi->EditSheet");
            // verify the required parameter 'gradeid' is set
            if (gradeid == null)
                throw new ApiException(400, "Missing required parameter 'gradeid' when calling LibrariesAPIApi->EditSheet");
            // verify the required parameter 'stockid' is set
            if (stockid == null)
                throw new ApiException(400, "Missing required parameter 'stockid' when calling LibrariesAPIApi->EditSheet");

            var localVarPath = "/libraries/stocks/{stockid}/grades/{gradeid}/sheets/{sheetid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sheetid != null) localVarPathParams.Add("sheetid", this.Configuration.ApiClient.ParameterToString(sheetid)); // path parameter
            if (gradeid != null) localVarPathParams.Add("gradeid", this.Configuration.ApiClient.ParameterToString(gradeid)); // path parameter
            if (stockid != null) localVarPathParams.Add("stockid", this.Configuration.ApiClient.ParameterToString(stockid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditSheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Edit stock 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity EditStock1 (string stockid, StockEntity body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = EditStock1WithHttpInfo(stockid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit stock 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > EditStock1WithHttpInfo (string stockid, StockEntity body = null)
        {
            // verify the required parameter 'stockid' is set
            if (stockid == null)
                throw new ApiException(400, "Missing required parameter 'stockid' when calling LibrariesAPIApi->EditStock1");

            var localVarPath = "/libraries/stocks/{stockid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stockid != null) localVarPathParams.Add("stockid", this.Configuration.ApiClient.ParameterToString(stockid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditStock1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Edit stock 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> EditStock1Async (string stockid, StockEntity body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await EditStock1AsyncWithHttpInfo(stockid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit stock 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> EditStock1AsyncWithHttpInfo (string stockid, StockEntity body = null)
        {
            // verify the required parameter 'stockid' is set
            if (stockid == null)
                throw new ApiException(400, "Missing required parameter 'stockid' when calling LibrariesAPIApi->EditStock1");

            var localVarPath = "/libraries/stocks/{stockid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stockid != null) localVarPathParams.Add("stockid", this.Configuration.ApiClient.ParameterToString(stockid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditStock1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Edit stock 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity EditStock2 (string stockid, Stock body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = EditStock2WithHttpInfo(stockid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit stock 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > EditStock2WithHttpInfo (string stockid, Stock body = null)
        {
            // verify the required parameter 'stockid' is set
            if (stockid == null)
                throw new ApiException(400, "Missing required parameter 'stockid' when calling LibrariesAPIApi->EditStock2");

            var localVarPath = "/libraries/v2/stocks/{stockid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stockid != null) localVarPathParams.Add("stockid", this.Configuration.ApiClient.ParameterToString(stockid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditStock2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Edit stock 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> EditStock2Async (string stockid, Stock body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await EditStock2AsyncWithHttpInfo(stockid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit stock 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> EditStock2AsyncWithHttpInfo (string stockid, Stock body = null)
        {
            // verify the required parameter 'stockid' is set
            if (stockid == null)
                throw new ApiException(400, "Missing required parameter 'stockid' when calling LibrariesAPIApi->EditStock2");

            var localVarPath = "/libraries/v2/stocks/{stockid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stockid != null) localVarPathParams.Add("stockid", this.Configuration.ApiClient.ParameterToString(stockid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditStock2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Edit stock type 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocktypeid">ID of stock type to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity EditStockType1 (string stocktypeid, StockType body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = EditStockType1WithHttpInfo(stocktypeid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit stock type 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocktypeid">ID of stock type to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > EditStockType1WithHttpInfo (string stocktypeid, StockType body = null)
        {
            // verify the required parameter 'stocktypeid' is set
            if (stocktypeid == null)
                throw new ApiException(400, "Missing required parameter 'stocktypeid' when calling LibrariesAPIApi->EditStockType1");

            var localVarPath = "/libraries/stocktypes/{stocktypeid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stocktypeid != null) localVarPathParams.Add("stocktypeid", this.Configuration.ApiClient.ParameterToString(stocktypeid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditStockType1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Edit stock type 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocktypeid">ID of stock type to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> EditStockType1Async (string stocktypeid, StockType body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await EditStockType1AsyncWithHttpInfo(stocktypeid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit stock type 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocktypeid">ID of stock type to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> EditStockType1AsyncWithHttpInfo (string stocktypeid, StockType body = null)
        {
            // verify the required parameter 'stocktypeid' is set
            if (stocktypeid == null)
                throw new ApiException(400, "Missing required parameter 'stocktypeid' when calling LibrariesAPIApi->EditStockType1");

            var localVarPath = "/libraries/stocktypes/{stocktypeid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stocktypeid != null) localVarPathParams.Add("stocktypeid", this.Configuration.ApiClient.ParameterToString(stocktypeid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditStockType1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Edit thing 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingid">ID of thing to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity EditThing1 (string thingid, Thing body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = EditThing1WithHttpInfo(thingid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit thing 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingid">ID of thing to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > EditThing1WithHttpInfo (string thingid, Thing body = null)
        {
            // verify the required parameter 'thingid' is set
            if (thingid == null)
                throw new ApiException(400, "Missing required parameter 'thingid' when calling LibrariesAPIApi->EditThing1");

            var localVarPath = "/libraries/things/{thingid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thingid != null) localVarPathParams.Add("thingid", this.Configuration.ApiClient.ParameterToString(thingid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditThing1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Edit thing 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingid">ID of thing to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> EditThing1Async (string thingid, Thing body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await EditThing1AsyncWithHttpInfo(thingid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit thing 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingid">ID of thing to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> EditThing1AsyncWithHttpInfo (string thingid, Thing body = null)
        {
            // verify the required parameter 'thingid' is set
            if (thingid == null)
                throw new ApiException(400, "Missing required parameter 'thingid' when calling LibrariesAPIApi->EditThing1");

            var localVarPath = "/libraries/things/{thingid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thingid != null) localVarPathParams.Add("thingid", this.Configuration.ApiClient.ParameterToString(thingid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditThing1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Get die design by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="diedesignid">ID of die design to get</param>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <returns>DieDesignEntity</returns>
        public DieDesignEntity GetDieDesign1 (string diedesignid, bool? thumb = null)
        {
             ApiResponse<DieDesignEntity> localVarResponse = GetDieDesign1WithHttpInfo(diedesignid, thumb);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get die design by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="diedesignid">ID of die design to get</param>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <returns>ApiResponse of DieDesignEntity</returns>
        public ApiResponse< DieDesignEntity > GetDieDesign1WithHttpInfo (string diedesignid, bool? thumb = null)
        {
            // verify the required parameter 'diedesignid' is set
            if (diedesignid == null)
                throw new ApiException(400, "Missing required parameter 'diedesignid' when calling LibrariesAPIApi->GetDieDesign1");

            var localVarPath = "/libraries/diedesigns/{diedesignid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (diedesignid != null) localVarPathParams.Add("diedesignid", this.Configuration.ApiClient.ParameterToString(diedesignid)); // path parameter
            if (thumb != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb", thumb)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDieDesign1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DieDesignEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DieDesignEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DieDesignEntity)));
        }

        /// <summary>
        /// Get die design by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="diedesignid">ID of die design to get</param>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <returns>Task of DieDesignEntity</returns>
        public async System.Threading.Tasks.Task<DieDesignEntity> GetDieDesign1Async (string diedesignid, bool? thumb = null)
        {
             ApiResponse<DieDesignEntity> localVarResponse = await GetDieDesign1AsyncWithHttpInfo(diedesignid, thumb);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get die design by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="diedesignid">ID of die design to get</param>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <returns>Task of ApiResponse (DieDesignEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DieDesignEntity>> GetDieDesign1AsyncWithHttpInfo (string diedesignid, bool? thumb = null)
        {
            // verify the required parameter 'diedesignid' is set
            if (diedesignid == null)
                throw new ApiException(400, "Missing required parameter 'diedesignid' when calling LibrariesAPIApi->GetDieDesign1");

            var localVarPath = "/libraries/diedesigns/{diedesignid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (diedesignid != null) localVarPathParams.Add("diedesignid", this.Configuration.ApiClient.ParameterToString(diedesignid)); // path parameter
            if (thumb != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb", thumb)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDieDesign1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DieDesignEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DieDesignEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DieDesignEntity)));
        }

        /// <summary>
        /// Get list of all die designs 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <returns>List&lt;DieDesignEntity&gt;</returns>
        public List<DieDesignEntity> GetDieDesigns1 (bool? thumb = null)
        {
             ApiResponse<List<DieDesignEntity>> localVarResponse = GetDieDesigns1WithHttpInfo(thumb);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of all die designs 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;DieDesignEntity&gt;</returns>
        public ApiResponse< List<DieDesignEntity> > GetDieDesigns1WithHttpInfo (bool? thumb = null)
        {

            var localVarPath = "/libraries/diedesigns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thumb != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb", thumb)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDieDesigns1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DieDesignEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DieDesignEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DieDesignEntity>)));
        }

        /// <summary>
        /// Get list of all die designs 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <returns>Task of List&lt;DieDesignEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<DieDesignEntity>> GetDieDesigns1Async (bool? thumb = null)
        {
             ApiResponse<List<DieDesignEntity>> localVarResponse = await GetDieDesigns1AsyncWithHttpInfo(thumb);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of all die designs 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <returns>Task of ApiResponse (List&lt;DieDesignEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DieDesignEntity>>> GetDieDesigns1AsyncWithHttpInfo (bool? thumb = null)
        {

            var localVarPath = "/libraries/diedesigns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thumb != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb", thumb)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDieDesigns1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DieDesignEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DieDesignEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DieDesignEntity>)));
        }

        /// <summary>
        /// Get list of all folding patterns 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;FoldingPatternEntity&gt;</returns>
        public List<FoldingPatternEntity> GetFoldingPatterns ()
        {
             ApiResponse<List<FoldingPatternEntity>> localVarResponse = GetFoldingPatternsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of all folding patterns 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;FoldingPatternEntity&gt;</returns>
        public ApiResponse< List<FoldingPatternEntity> > GetFoldingPatternsWithHttpInfo ()
        {

            var localVarPath = "/libraries/folding";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFoldingPatterns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FoldingPatternEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<FoldingPatternEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FoldingPatternEntity>)));
        }

        /// <summary>
        /// Get list of all folding patterns 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;FoldingPatternEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<FoldingPatternEntity>> GetFoldingPatternsAsync ()
        {
             ApiResponse<List<FoldingPatternEntity>> localVarResponse = await GetFoldingPatternsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of all folding patterns 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;FoldingPatternEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FoldingPatternEntity>>> GetFoldingPatternsAsyncWithHttpInfo ()
        {

            var localVarPath = "/libraries/folding";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFoldingPatterns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FoldingPatternEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<FoldingPatternEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FoldingPatternEntity>)));
        }

        /// <summary>
        /// Get grade by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade to get</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>GradeEntity</returns>
        public GradeEntity GetGrade1 (string gradeid, string stockid)
        {
             ApiResponse<GradeEntity> localVarResponse = GetGrade1WithHttpInfo(gradeid, stockid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get grade by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade to get</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>ApiResponse of GradeEntity</returns>
        public ApiResponse< GradeEntity > GetGrade1WithHttpInfo (string gradeid, string stockid)
        {
            // verify the required parameter 'gradeid' is set
            if (gradeid == null)
                throw new ApiException(400, "Missing required parameter 'gradeid' when calling LibrariesAPIApi->GetGrade1");
            // verify the required parameter 'stockid' is set
            if (stockid == null)
                throw new ApiException(400, "Missing required parameter 'stockid' when calling LibrariesAPIApi->GetGrade1");

            var localVarPath = "/libraries/stocks/{stockid}/grades/{gradeid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gradeid != null) localVarPathParams.Add("gradeid", this.Configuration.ApiClient.ParameterToString(gradeid)); // path parameter
            if (stockid != null) localVarPathParams.Add("stockid", this.Configuration.ApiClient.ParameterToString(stockid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGrade1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GradeEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GradeEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GradeEntity)));
        }

        /// <summary>
        /// Get grade by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade to get</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>Task of GradeEntity</returns>
        public async System.Threading.Tasks.Task<GradeEntity> GetGrade1Async (string gradeid, string stockid)
        {
             ApiResponse<GradeEntity> localVarResponse = await GetGrade1AsyncWithHttpInfo(gradeid, stockid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get grade by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade to get</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>Task of ApiResponse (GradeEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GradeEntity>> GetGrade1AsyncWithHttpInfo (string gradeid, string stockid)
        {
            // verify the required parameter 'gradeid' is set
            if (gradeid == null)
                throw new ApiException(400, "Missing required parameter 'gradeid' when calling LibrariesAPIApi->GetGrade1");
            // verify the required parameter 'stockid' is set
            if (stockid == null)
                throw new ApiException(400, "Missing required parameter 'stockid' when calling LibrariesAPIApi->GetGrade1");

            var localVarPath = "/libraries/stocks/{stockid}/grades/{gradeid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gradeid != null) localVarPathParams.Add("gradeid", this.Configuration.ApiClient.ParameterToString(gradeid)); // path parameter
            if (stockid != null) localVarPathParams.Add("stockid", this.Configuration.ApiClient.ParameterToString(stockid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGrade1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GradeEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GradeEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GradeEntity)));
        }

        /// <summary>
        /// Get list of all grades in the stock 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock</param>
        /// <returns>List&lt;GradeEntity&gt;</returns>
        public List<GradeEntity> GetGrades (string stockid)
        {
             ApiResponse<List<GradeEntity>> localVarResponse = GetGradesWithHttpInfo(stockid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of all grades in the stock 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock</param>
        /// <returns>ApiResponse of List&lt;GradeEntity&gt;</returns>
        public ApiResponse< List<GradeEntity> > GetGradesWithHttpInfo (string stockid)
        {
            // verify the required parameter 'stockid' is set
            if (stockid == null)
                throw new ApiException(400, "Missing required parameter 'stockid' when calling LibrariesAPIApi->GetGrades");

            var localVarPath = "/libraries/stocks/{stockid}/grades";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stockid != null) localVarPathParams.Add("stockid", this.Configuration.ApiClient.ParameterToString(stockid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGrades", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GradeEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<GradeEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GradeEntity>)));
        }

        /// <summary>
        /// Get list of all grades in the stock 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock</param>
        /// <returns>Task of List&lt;GradeEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<GradeEntity>> GetGradesAsync (string stockid)
        {
             ApiResponse<List<GradeEntity>> localVarResponse = await GetGradesAsyncWithHttpInfo(stockid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of all grades in the stock 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock</param>
        /// <returns>Task of ApiResponse (List&lt;GradeEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GradeEntity>>> GetGradesAsyncWithHttpInfo (string stockid)
        {
            // verify the required parameter 'stockid' is set
            if (stockid == null)
                throw new ApiException(400, "Missing required parameter 'stockid' when calling LibrariesAPIApi->GetGrades");

            var localVarPath = "/libraries/stocks/{stockid}/grades";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stockid != null) localVarPathParams.Add("stockid", this.Configuration.ApiClient.ParameterToString(stockid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGrades", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GradeEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<GradeEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GradeEntity>)));
        }

        /// <summary>
        /// Get list of all mark sets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;MarkSetEntity&gt;</returns>
        public List<MarkSetEntity> GetMarkSets ()
        {
             ApiResponse<List<MarkSetEntity>> localVarResponse = GetMarkSetsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of all mark sets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;MarkSetEntity&gt;</returns>
        public ApiResponse< List<MarkSetEntity> > GetMarkSetsWithHttpInfo ()
        {

            var localVarPath = "/libraries/marksets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMarkSets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MarkSetEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MarkSetEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MarkSetEntity>)));
        }

        /// <summary>
        /// Get list of all mark sets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;MarkSetEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<MarkSetEntity>> GetMarkSetsAsync ()
        {
             ApiResponse<List<MarkSetEntity>> localVarResponse = await GetMarkSetsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of all mark sets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;MarkSetEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MarkSetEntity>>> GetMarkSetsAsyncWithHttpInfo ()
        {

            var localVarPath = "/libraries/marksets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMarkSets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MarkSetEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MarkSetEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MarkSetEntity>)));
        }

        /// <summary>
        /// Get list of all marks 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;MarkEntity&gt;</returns>
        public List<MarkEntity> GetMarks ()
        {
             ApiResponse<List<MarkEntity>> localVarResponse = GetMarksWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of all marks 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;MarkEntity&gt;</returns>
        public ApiResponse< List<MarkEntity> > GetMarksWithHttpInfo ()
        {

            var localVarPath = "/libraries/marks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMarks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MarkEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MarkEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MarkEntity>)));
        }

        /// <summary>
        /// Get list of all marks 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;MarkEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<MarkEntity>> GetMarksAsync ()
        {
             ApiResponse<List<MarkEntity>> localVarResponse = await GetMarksAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of all marks 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;MarkEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MarkEntity>>> GetMarksAsyncWithHttpInfo ()
        {

            var localVarPath = "/libraries/marks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMarks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MarkEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MarkEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MarkEntity>)));
        }

        /// <summary>
        /// Get mode by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modeid">ID of mode to get</param>
        /// <returns>Mode</returns>
        public Mode GetMode1 (string modeid)
        {
             ApiResponse<Mode> localVarResponse = GetMode1WithHttpInfo(modeid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get mode by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modeid">ID of mode to get</param>
        /// <returns>ApiResponse of Mode</returns>
        public ApiResponse< Mode > GetMode1WithHttpInfo (string modeid)
        {
            // verify the required parameter 'modeid' is set
            if (modeid == null)
                throw new ApiException(400, "Missing required parameter 'modeid' when calling LibrariesAPIApi->GetMode1");

            var localVarPath = "/libraries/modes/{modeid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modeid != null) localVarPathParams.Add("modeid", this.Configuration.ApiClient.ParameterToString(modeid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMode1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Mode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Mode) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Mode)));
        }

        /// <summary>
        /// Get mode by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modeid">ID of mode to get</param>
        /// <returns>Task of Mode</returns>
        public async System.Threading.Tasks.Task<Mode> GetMode1Async (string modeid)
        {
             ApiResponse<Mode> localVarResponse = await GetMode1AsyncWithHttpInfo(modeid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get mode by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modeid">ID of mode to get</param>
        /// <returns>Task of ApiResponse (Mode)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Mode>> GetMode1AsyncWithHttpInfo (string modeid)
        {
            // verify the required parameter 'modeid' is set
            if (modeid == null)
                throw new ApiException(400, "Missing required parameter 'modeid' when calling LibrariesAPIApi->GetMode1");

            var localVarPath = "/libraries/modes/{modeid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modeid != null) localVarPathParams.Add("modeid", this.Configuration.ApiClient.ParameterToString(modeid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMode1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Mode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Mode) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Mode)));
        }

        /// <summary>
        /// Get list of all modes 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Mode&gt;</returns>
        public List<Mode> GetModes1 ()
        {
             ApiResponse<List<Mode>> localVarResponse = GetModes1WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of all modes 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Mode&gt;</returns>
        public ApiResponse< List<Mode> > GetModes1WithHttpInfo ()
        {

            var localVarPath = "/libraries/modes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModes1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Mode>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Mode>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Mode>)));
        }

        /// <summary>
        /// Get list of all modes 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Mode&gt;</returns>
        public async System.Threading.Tasks.Task<List<Mode>> GetModes1Async ()
        {
             ApiResponse<List<Mode>> localVarResponse = await GetModes1AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of all modes 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Mode&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Mode>>> GetModes1AsyncWithHttpInfo ()
        {

            var localVarPath = "/libraries/modes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModes1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Mode>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Mode>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Mode>)));
        }

        /// <summary>
        /// Get plate by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="plateid">ID of plate to get</param>
        /// <returns>PlateEntity</returns>
        public PlateEntity GetPlate1 (string plateid)
        {
             ApiResponse<PlateEntity> localVarResponse = GetPlate1WithHttpInfo(plateid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get plate by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="plateid">ID of plate to get</param>
        /// <returns>ApiResponse of PlateEntity</returns>
        public ApiResponse< PlateEntity > GetPlate1WithHttpInfo (string plateid)
        {
            // verify the required parameter 'plateid' is set
            if (plateid == null)
                throw new ApiException(400, "Missing required parameter 'plateid' when calling LibrariesAPIApi->GetPlate1");

            var localVarPath = "/libraries/plates/{plateid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (plateid != null) localVarPathParams.Add("plateid", this.Configuration.ApiClient.ParameterToString(plateid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlate1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PlateEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PlateEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlateEntity)));
        }

        /// <summary>
        /// Get plate by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="plateid">ID of plate to get</param>
        /// <returns>Task of PlateEntity</returns>
        public async System.Threading.Tasks.Task<PlateEntity> GetPlate1Async (string plateid)
        {
             ApiResponse<PlateEntity> localVarResponse = await GetPlate1AsyncWithHttpInfo(plateid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get plate by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="plateid">ID of plate to get</param>
        /// <returns>Task of ApiResponse (PlateEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PlateEntity>> GetPlate1AsyncWithHttpInfo (string plateid)
        {
            // verify the required parameter 'plateid' is set
            if (plateid == null)
                throw new ApiException(400, "Missing required parameter 'plateid' when calling LibrariesAPIApi->GetPlate1");

            var localVarPath = "/libraries/plates/{plateid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (plateid != null) localVarPathParams.Add("plateid", this.Configuration.ApiClient.ParameterToString(plateid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlate1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PlateEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PlateEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlateEntity)));
        }

        /// <summary>
        /// Get list of all plates 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PlateEntity&gt;</returns>
        public List<PlateEntity> GetPlates1 ()
        {
             ApiResponse<List<PlateEntity>> localVarResponse = GetPlates1WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of all plates 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PlateEntity&gt;</returns>
        public ApiResponse< List<PlateEntity> > GetPlates1WithHttpInfo ()
        {

            var localVarPath = "/libraries/plates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlates1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PlateEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PlateEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PlateEntity>)));
        }

        /// <summary>
        /// Get list of all plates 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PlateEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<PlateEntity>> GetPlates1Async ()
        {
             ApiResponse<List<PlateEntity>> localVarResponse = await GetPlates1AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of all plates 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PlateEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PlateEntity>>> GetPlates1AsyncWithHttpInfo ()
        {

            var localVarPath = "/libraries/plates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlates1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PlateEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PlateEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PlateEntity>)));
        }

        /// <summary>
        /// Get press by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pressid">ID of press to get</param>
        /// <returns>PressEntity</returns>
        public PressEntity GetPress1 (string pressid)
        {
             ApiResponse<PressEntity> localVarResponse = GetPress1WithHttpInfo(pressid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get press by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pressid">ID of press to get</param>
        /// <returns>ApiResponse of PressEntity</returns>
        public ApiResponse< PressEntity > GetPress1WithHttpInfo (string pressid)
        {
            // verify the required parameter 'pressid' is set
            if (pressid == null)
                throw new ApiException(400, "Missing required parameter 'pressid' when calling LibrariesAPIApi->GetPress1");

            var localVarPath = "/libraries/presses/{pressid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pressid != null) localVarPathParams.Add("pressid", this.Configuration.ApiClient.ParameterToString(pressid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPress1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PressEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PressEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PressEntity)));
        }

        /// <summary>
        /// Get press by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pressid">ID of press to get</param>
        /// <returns>Task of PressEntity</returns>
        public async System.Threading.Tasks.Task<PressEntity> GetPress1Async (string pressid)
        {
             ApiResponse<PressEntity> localVarResponse = await GetPress1AsyncWithHttpInfo(pressid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get press by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pressid">ID of press to get</param>
        /// <returns>Task of ApiResponse (PressEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PressEntity>> GetPress1AsyncWithHttpInfo (string pressid)
        {
            // verify the required parameter 'pressid' is set
            if (pressid == null)
                throw new ApiException(400, "Missing required parameter 'pressid' when calling LibrariesAPIApi->GetPress1");

            var localVarPath = "/libraries/presses/{pressid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pressid != null) localVarPathParams.Add("pressid", this.Configuration.ApiClient.ParameterToString(pressid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPress1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PressEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PressEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PressEntity)));
        }

        /// <summary>
        /// Get list of all presses 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PressEntity&gt;</returns>
        public List<PressEntity> GetPresses1 ()
        {
             ApiResponse<List<PressEntity>> localVarResponse = GetPresses1WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of all presses 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PressEntity&gt;</returns>
        public ApiResponse< List<PressEntity> > GetPresses1WithHttpInfo ()
        {

            var localVarPath = "/libraries/presses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPresses1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PressEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PressEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PressEntity>)));
        }

        /// <summary>
        /// Get list of all presses 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PressEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<PressEntity>> GetPresses1Async ()
        {
             ApiResponse<List<PressEntity>> localVarResponse = await GetPresses1AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of all presses 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PressEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PressEntity>>> GetPresses1AsyncWithHttpInfo ()
        {

            var localVarPath = "/libraries/presses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPresses1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PressEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PressEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PressEntity>)));
        }

        /// <summary>
        /// Get process by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processid">ID of process to get</param>
        /// <returns>Process</returns>
        public Process GetProcess1 (string processid)
        {
             ApiResponse<Process> localVarResponse = GetProcess1WithHttpInfo(processid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get process by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processid">ID of process to get</param>
        /// <returns>ApiResponse of Process</returns>
        public ApiResponse< Process > GetProcess1WithHttpInfo (string processid)
        {
            // verify the required parameter 'processid' is set
            if (processid == null)
                throw new ApiException(400, "Missing required parameter 'processid' when calling LibrariesAPIApi->GetProcess1");

            var localVarPath = "/libraries/processes/{processid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processid != null) localVarPathParams.Add("processid", this.Configuration.ApiClient.ParameterToString(processid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcess1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Process>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Process) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Process)));
        }

        /// <summary>
        /// Get process by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processid">ID of process to get</param>
        /// <returns>Task of Process</returns>
        public async System.Threading.Tasks.Task<Process> GetProcess1Async (string processid)
        {
             ApiResponse<Process> localVarResponse = await GetProcess1AsyncWithHttpInfo(processid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get process by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processid">ID of process to get</param>
        /// <returns>Task of ApiResponse (Process)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Process>> GetProcess1AsyncWithHttpInfo (string processid)
        {
            // verify the required parameter 'processid' is set
            if (processid == null)
                throw new ApiException(400, "Missing required parameter 'processid' when calling LibrariesAPIApi->GetProcess1");

            var localVarPath = "/libraries/processes/{processid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processid != null) localVarPathParams.Add("processid", this.Configuration.ApiClient.ParameterToString(processid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcess1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Process>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Process) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Process)));
        }

        /// <summary>
        /// Get process type by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processtypeid">ID of process type to get</param>
        /// <returns>ProcessType</returns>
        public ProcessType GetProcessType1 (string processtypeid)
        {
             ApiResponse<ProcessType> localVarResponse = GetProcessType1WithHttpInfo(processtypeid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get process type by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processtypeid">ID of process type to get</param>
        /// <returns>ApiResponse of ProcessType</returns>
        public ApiResponse< ProcessType > GetProcessType1WithHttpInfo (string processtypeid)
        {
            // verify the required parameter 'processtypeid' is set
            if (processtypeid == null)
                throw new ApiException(400, "Missing required parameter 'processtypeid' when calling LibrariesAPIApi->GetProcessType1");

            var localVarPath = "/libraries/processtypes/{processtypeid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processtypeid != null) localVarPathParams.Add("processtypeid", this.Configuration.ApiClient.ParameterToString(processtypeid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessType1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessType) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessType)));
        }

        /// <summary>
        /// Get process type by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processtypeid">ID of process type to get</param>
        /// <returns>Task of ProcessType</returns>
        public async System.Threading.Tasks.Task<ProcessType> GetProcessType1Async (string processtypeid)
        {
             ApiResponse<ProcessType> localVarResponse = await GetProcessType1AsyncWithHttpInfo(processtypeid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get process type by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processtypeid">ID of process type to get</param>
        /// <returns>Task of ApiResponse (ProcessType)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessType>> GetProcessType1AsyncWithHttpInfo (string processtypeid)
        {
            // verify the required parameter 'processtypeid' is set
            if (processtypeid == null)
                throw new ApiException(400, "Missing required parameter 'processtypeid' when calling LibrariesAPIApi->GetProcessType1");

            var localVarPath = "/libraries/processtypes/{processtypeid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (processtypeid != null) localVarPathParams.Add("processtypeid", this.Configuration.ApiClient.ParameterToString(processtypeid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessType1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProcessType) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessType)));
        }

        /// <summary>
        /// Get list of all process types 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ProcessType&gt;</returns>
        public List<ProcessType> GetProcessTypes1 ()
        {
             ApiResponse<List<ProcessType>> localVarResponse = GetProcessTypes1WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of all process types 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ProcessType&gt;</returns>
        public ApiResponse< List<ProcessType> > GetProcessTypes1WithHttpInfo ()
        {

            var localVarPath = "/libraries/processtypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessTypes1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProcessType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProcessType>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProcessType>)));
        }

        /// <summary>
        /// Get list of all process types 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ProcessType&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProcessType>> GetProcessTypes1Async ()
        {
             ApiResponse<List<ProcessType>> localVarResponse = await GetProcessTypes1AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of all process types 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ProcessType&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProcessType>>> GetProcessTypes1AsyncWithHttpInfo ()
        {

            var localVarPath = "/libraries/processtypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessTypes1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProcessType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ProcessType>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProcessType>)));
        }

        /// <summary>
        /// Get list of all processes 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Process&gt;</returns>
        public List<Process> GetProcesses1 ()
        {
             ApiResponse<List<Process>> localVarResponse = GetProcesses1WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of all processes 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Process&gt;</returns>
        public ApiResponse< List<Process> > GetProcesses1WithHttpInfo ()
        {

            var localVarPath = "/libraries/processes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcesses1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Process>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Process>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Process>)));
        }

        /// <summary>
        /// Get list of all processes 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Process&gt;</returns>
        public async System.Threading.Tasks.Task<List<Process>> GetProcesses1Async ()
        {
             ApiResponse<List<Process>> localVarResponse = await GetProcesses1AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of all processes 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Process&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Process>>> GetProcesses1AsyncWithHttpInfo ()
        {

            var localVarPath = "/libraries/processes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcesses1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Process>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Process>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Process>)));
        }

        /// <summary>
        /// Get roll by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rollid">ID of roll to get</param>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>RollEntity</returns>
        public RollEntity GetRoll1 (string rollid, string gradeid, string stockid)
        {
             ApiResponse<RollEntity> localVarResponse = GetRoll1WithHttpInfo(rollid, gradeid, stockid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get roll by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rollid">ID of roll to get</param>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>ApiResponse of RollEntity</returns>
        public ApiResponse< RollEntity > GetRoll1WithHttpInfo (string rollid, string gradeid, string stockid)
        {
            // verify the required parameter 'rollid' is set
            if (rollid == null)
                throw new ApiException(400, "Missing required parameter 'rollid' when calling LibrariesAPIApi->GetRoll1");
            // verify the required parameter 'gradeid' is set
            if (gradeid == null)
                throw new ApiException(400, "Missing required parameter 'gradeid' when calling LibrariesAPIApi->GetRoll1");
            // verify the required parameter 'stockid' is set
            if (stockid == null)
                throw new ApiException(400, "Missing required parameter 'stockid' when calling LibrariesAPIApi->GetRoll1");

            var localVarPath = "/libraries/stocks/{stockid}/grades/{gradeid}/rolls/{rollid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rollid != null) localVarPathParams.Add("rollid", this.Configuration.ApiClient.ParameterToString(rollid)); // path parameter
            if (gradeid != null) localVarPathParams.Add("gradeid", this.Configuration.ApiClient.ParameterToString(gradeid)); // path parameter
            if (stockid != null) localVarPathParams.Add("stockid", this.Configuration.ApiClient.ParameterToString(stockid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRoll1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RollEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RollEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RollEntity)));
        }

        /// <summary>
        /// Get roll by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rollid">ID of roll to get</param>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>Task of RollEntity</returns>
        public async System.Threading.Tasks.Task<RollEntity> GetRoll1Async (string rollid, string gradeid, string stockid)
        {
             ApiResponse<RollEntity> localVarResponse = await GetRoll1AsyncWithHttpInfo(rollid, gradeid, stockid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get roll by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rollid">ID of roll to get</param>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>Task of ApiResponse (RollEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RollEntity>> GetRoll1AsyncWithHttpInfo (string rollid, string gradeid, string stockid)
        {
            // verify the required parameter 'rollid' is set
            if (rollid == null)
                throw new ApiException(400, "Missing required parameter 'rollid' when calling LibrariesAPIApi->GetRoll1");
            // verify the required parameter 'gradeid' is set
            if (gradeid == null)
                throw new ApiException(400, "Missing required parameter 'gradeid' when calling LibrariesAPIApi->GetRoll1");
            // verify the required parameter 'stockid' is set
            if (stockid == null)
                throw new ApiException(400, "Missing required parameter 'stockid' when calling LibrariesAPIApi->GetRoll1");

            var localVarPath = "/libraries/stocks/{stockid}/grades/{gradeid}/rolls/{rollid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rollid != null) localVarPathParams.Add("rollid", this.Configuration.ApiClient.ParameterToString(rollid)); // path parameter
            if (gradeid != null) localVarPathParams.Add("gradeid", this.Configuration.ApiClient.ParameterToString(gradeid)); // path parameter
            if (stockid != null) localVarPathParams.Add("stockid", this.Configuration.ApiClient.ParameterToString(stockid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRoll1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RollEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RollEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RollEntity)));
        }

        /// <summary>
        /// Get list of all rolls in the grade 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>List&lt;RollEntity&gt;</returns>
        public List<RollEntity> GetRolls (string gradeid, string stockid)
        {
             ApiResponse<List<RollEntity>> localVarResponse = GetRollsWithHttpInfo(gradeid, stockid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of all rolls in the grade 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>ApiResponse of List&lt;RollEntity&gt;</returns>
        public ApiResponse< List<RollEntity> > GetRollsWithHttpInfo (string gradeid, string stockid)
        {
            // verify the required parameter 'gradeid' is set
            if (gradeid == null)
                throw new ApiException(400, "Missing required parameter 'gradeid' when calling LibrariesAPIApi->GetRolls");
            // verify the required parameter 'stockid' is set
            if (stockid == null)
                throw new ApiException(400, "Missing required parameter 'stockid' when calling LibrariesAPIApi->GetRolls");

            var localVarPath = "/libraries/stocks/{stockid}/grades/{gradeid}/rolls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gradeid != null) localVarPathParams.Add("gradeid", this.Configuration.ApiClient.ParameterToString(gradeid)); // path parameter
            if (stockid != null) localVarPathParams.Add("stockid", this.Configuration.ApiClient.ParameterToString(stockid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRolls", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RollEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<RollEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RollEntity>)));
        }

        /// <summary>
        /// Get list of all rolls in the grade 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>Task of List&lt;RollEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<RollEntity>> GetRollsAsync (string gradeid, string stockid)
        {
             ApiResponse<List<RollEntity>> localVarResponse = await GetRollsAsyncWithHttpInfo(gradeid, stockid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of all rolls in the grade 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>Task of ApiResponse (List&lt;RollEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RollEntity>>> GetRollsAsyncWithHttpInfo (string gradeid, string stockid)
        {
            // verify the required parameter 'gradeid' is set
            if (gradeid == null)
                throw new ApiException(400, "Missing required parameter 'gradeid' when calling LibrariesAPIApi->GetRolls");
            // verify the required parameter 'stockid' is set
            if (stockid == null)
                throw new ApiException(400, "Missing required parameter 'stockid' when calling LibrariesAPIApi->GetRolls");

            var localVarPath = "/libraries/stocks/{stockid}/grades/{gradeid}/rolls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gradeid != null) localVarPathParams.Add("gradeid", this.Configuration.ApiClient.ParameterToString(gradeid)); // path parameter
            if (stockid != null) localVarPathParams.Add("stockid", this.Configuration.ApiClient.ParameterToString(stockid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRolls", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RollEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<RollEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RollEntity>)));
        }

        /// <summary>
        /// Get sheet by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sheetid">ID of sheet to get</param>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>SheetEntity</returns>
        public SheetEntity GetSheet1 (string sheetid, string gradeid, string stockid)
        {
             ApiResponse<SheetEntity> localVarResponse = GetSheet1WithHttpInfo(sheetid, gradeid, stockid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get sheet by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sheetid">ID of sheet to get</param>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>ApiResponse of SheetEntity</returns>
        public ApiResponse< SheetEntity > GetSheet1WithHttpInfo (string sheetid, string gradeid, string stockid)
        {
            // verify the required parameter 'sheetid' is set
            if (sheetid == null)
                throw new ApiException(400, "Missing required parameter 'sheetid' when calling LibrariesAPIApi->GetSheet1");
            // verify the required parameter 'gradeid' is set
            if (gradeid == null)
                throw new ApiException(400, "Missing required parameter 'gradeid' when calling LibrariesAPIApi->GetSheet1");
            // verify the required parameter 'stockid' is set
            if (stockid == null)
                throw new ApiException(400, "Missing required parameter 'stockid' when calling LibrariesAPIApi->GetSheet1");

            var localVarPath = "/libraries/stocks/{stockid}/grades/{gradeid}/sheets/{sheetid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sheetid != null) localVarPathParams.Add("sheetid", this.Configuration.ApiClient.ParameterToString(sheetid)); // path parameter
            if (gradeid != null) localVarPathParams.Add("gradeid", this.Configuration.ApiClient.ParameterToString(gradeid)); // path parameter
            if (stockid != null) localVarPathParams.Add("stockid", this.Configuration.ApiClient.ParameterToString(stockid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSheet1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SheetEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SheetEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SheetEntity)));
        }

        /// <summary>
        /// Get sheet by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sheetid">ID of sheet to get</param>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>Task of SheetEntity</returns>
        public async System.Threading.Tasks.Task<SheetEntity> GetSheet1Async (string sheetid, string gradeid, string stockid)
        {
             ApiResponse<SheetEntity> localVarResponse = await GetSheet1AsyncWithHttpInfo(sheetid, gradeid, stockid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get sheet by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sheetid">ID of sheet to get</param>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>Task of ApiResponse (SheetEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SheetEntity>> GetSheet1AsyncWithHttpInfo (string sheetid, string gradeid, string stockid)
        {
            // verify the required parameter 'sheetid' is set
            if (sheetid == null)
                throw new ApiException(400, "Missing required parameter 'sheetid' when calling LibrariesAPIApi->GetSheet1");
            // verify the required parameter 'gradeid' is set
            if (gradeid == null)
                throw new ApiException(400, "Missing required parameter 'gradeid' when calling LibrariesAPIApi->GetSheet1");
            // verify the required parameter 'stockid' is set
            if (stockid == null)
                throw new ApiException(400, "Missing required parameter 'stockid' when calling LibrariesAPIApi->GetSheet1");

            var localVarPath = "/libraries/stocks/{stockid}/grades/{gradeid}/sheets/{sheetid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sheetid != null) localVarPathParams.Add("sheetid", this.Configuration.ApiClient.ParameterToString(sheetid)); // path parameter
            if (gradeid != null) localVarPathParams.Add("gradeid", this.Configuration.ApiClient.ParameterToString(gradeid)); // path parameter
            if (stockid != null) localVarPathParams.Add("stockid", this.Configuration.ApiClient.ParameterToString(stockid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSheet1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SheetEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SheetEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SheetEntity)));
        }

        /// <summary>
        /// Get list of all sheets in the grade 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>List&lt;SheetEntity&gt;</returns>
        public List<SheetEntity> GetSheets (string gradeid, string stockid)
        {
             ApiResponse<List<SheetEntity>> localVarResponse = GetSheetsWithHttpInfo(gradeid, stockid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of all sheets in the grade 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>ApiResponse of List&lt;SheetEntity&gt;</returns>
        public ApiResponse< List<SheetEntity> > GetSheetsWithHttpInfo (string gradeid, string stockid)
        {
            // verify the required parameter 'gradeid' is set
            if (gradeid == null)
                throw new ApiException(400, "Missing required parameter 'gradeid' when calling LibrariesAPIApi->GetSheets");
            // verify the required parameter 'stockid' is set
            if (stockid == null)
                throw new ApiException(400, "Missing required parameter 'stockid' when calling LibrariesAPIApi->GetSheets");

            var localVarPath = "/libraries/stocks/{stockid}/grades/{gradeid}/sheets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gradeid != null) localVarPathParams.Add("gradeid", this.Configuration.ApiClient.ParameterToString(gradeid)); // path parameter
            if (stockid != null) localVarPathParams.Add("stockid", this.Configuration.ApiClient.ParameterToString(stockid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSheets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SheetEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SheetEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SheetEntity>)));
        }

        /// <summary>
        /// Get list of all sheets in the grade 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>Task of List&lt;SheetEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<SheetEntity>> GetSheetsAsync (string gradeid, string stockid)
        {
             ApiResponse<List<SheetEntity>> localVarResponse = await GetSheetsAsyncWithHttpInfo(gradeid, stockid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of all sheets in the grade 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gradeid">ID of grade</param>
        /// <param name="stockid">ID of stock</param>
        /// <returns>Task of ApiResponse (List&lt;SheetEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SheetEntity>>> GetSheetsAsyncWithHttpInfo (string gradeid, string stockid)
        {
            // verify the required parameter 'gradeid' is set
            if (gradeid == null)
                throw new ApiException(400, "Missing required parameter 'gradeid' when calling LibrariesAPIApi->GetSheets");
            // verify the required parameter 'stockid' is set
            if (stockid == null)
                throw new ApiException(400, "Missing required parameter 'stockid' when calling LibrariesAPIApi->GetSheets");

            var localVarPath = "/libraries/stocks/{stockid}/grades/{gradeid}/sheets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gradeid != null) localVarPathParams.Add("gradeid", this.Configuration.ApiClient.ParameterToString(gradeid)); // path parameter
            if (stockid != null) localVarPathParams.Add("stockid", this.Configuration.ApiClient.ParameterToString(stockid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSheets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SheetEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SheetEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SheetEntity>)));
        }

        /// <summary>
        /// Get stock by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock to get</param>
        /// <returns>StockEntity</returns>
        public StockEntity GetStock1 (string stockid)
        {
             ApiResponse<StockEntity> localVarResponse = GetStock1WithHttpInfo(stockid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get stock by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock to get</param>
        /// <returns>ApiResponse of StockEntity</returns>
        public ApiResponse< StockEntity > GetStock1WithHttpInfo (string stockid)
        {
            // verify the required parameter 'stockid' is set
            if (stockid == null)
                throw new ApiException(400, "Missing required parameter 'stockid' when calling LibrariesAPIApi->GetStock1");

            var localVarPath = "/libraries/stocks/{stockid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stockid != null) localVarPathParams.Add("stockid", this.Configuration.ApiClient.ParameterToString(stockid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStock1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StockEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (StockEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StockEntity)));
        }

        /// <summary>
        /// Get stock by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock to get</param>
        /// <returns>Task of StockEntity</returns>
        public async System.Threading.Tasks.Task<StockEntity> GetStock1Async (string stockid)
        {
             ApiResponse<StockEntity> localVarResponse = await GetStock1AsyncWithHttpInfo(stockid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get stock by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock to get</param>
        /// <returns>Task of ApiResponse (StockEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StockEntity>> GetStock1AsyncWithHttpInfo (string stockid)
        {
            // verify the required parameter 'stockid' is set
            if (stockid == null)
                throw new ApiException(400, "Missing required parameter 'stockid' when calling LibrariesAPIApi->GetStock1");

            var localVarPath = "/libraries/stocks/{stockid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stockid != null) localVarPathParams.Add("stockid", this.Configuration.ApiClient.ParameterToString(stockid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStock1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StockEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (StockEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StockEntity)));
        }

        /// <summary>
        /// Get stock by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock to get</param>
        /// <returns>Stock</returns>
        public Stock GetStock2 (string stockid)
        {
             ApiResponse<Stock> localVarResponse = GetStock2WithHttpInfo(stockid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get stock by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock to get</param>
        /// <returns>ApiResponse of Stock</returns>
        public ApiResponse< Stock > GetStock2WithHttpInfo (string stockid)
        {
            // verify the required parameter 'stockid' is set
            if (stockid == null)
                throw new ApiException(400, "Missing required parameter 'stockid' when calling LibrariesAPIApi->GetStock2");

            var localVarPath = "/libraries/v2/stocks/{stockid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stockid != null) localVarPathParams.Add("stockid", this.Configuration.ApiClient.ParameterToString(stockid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStock2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Stock>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Stock) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Stock)));
        }

        /// <summary>
        /// Get stock by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock to get</param>
        /// <returns>Task of Stock</returns>
        public async System.Threading.Tasks.Task<Stock> GetStock2Async (string stockid)
        {
             ApiResponse<Stock> localVarResponse = await GetStock2AsyncWithHttpInfo(stockid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get stock by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockid">ID of stock to get</param>
        /// <returns>Task of ApiResponse (Stock)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Stock>> GetStock2AsyncWithHttpInfo (string stockid)
        {
            // verify the required parameter 'stockid' is set
            if (stockid == null)
                throw new ApiException(400, "Missing required parameter 'stockid' when calling LibrariesAPIApi->GetStock2");

            var localVarPath = "/libraries/v2/stocks/{stockid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stockid != null) localVarPathParams.Add("stockid", this.Configuration.ApiClient.ParameterToString(stockid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStock2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Stock>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Stock) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Stock)));
        }

        /// <summary>
        /// Get stock type by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocktypeid">ID of stock type to get</param>
        /// <returns>StockType</returns>
        public StockType GetStockType1 (string stocktypeid)
        {
             ApiResponse<StockType> localVarResponse = GetStockType1WithHttpInfo(stocktypeid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get stock type by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocktypeid">ID of stock type to get</param>
        /// <returns>ApiResponse of StockType</returns>
        public ApiResponse< StockType > GetStockType1WithHttpInfo (string stocktypeid)
        {
            // verify the required parameter 'stocktypeid' is set
            if (stocktypeid == null)
                throw new ApiException(400, "Missing required parameter 'stocktypeid' when calling LibrariesAPIApi->GetStockType1");

            var localVarPath = "/libraries/stocktypes/{stocktypeid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stocktypeid != null) localVarPathParams.Add("stocktypeid", this.Configuration.ApiClient.ParameterToString(stocktypeid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStockType1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StockType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (StockType) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StockType)));
        }

        /// <summary>
        /// Get stock type by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocktypeid">ID of stock type to get</param>
        /// <returns>Task of StockType</returns>
        public async System.Threading.Tasks.Task<StockType> GetStockType1Async (string stocktypeid)
        {
             ApiResponse<StockType> localVarResponse = await GetStockType1AsyncWithHttpInfo(stocktypeid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get stock type by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stocktypeid">ID of stock type to get</param>
        /// <returns>Task of ApiResponse (StockType)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StockType>> GetStockType1AsyncWithHttpInfo (string stocktypeid)
        {
            // verify the required parameter 'stocktypeid' is set
            if (stocktypeid == null)
                throw new ApiException(400, "Missing required parameter 'stocktypeid' when calling LibrariesAPIApi->GetStockType1");

            var localVarPath = "/libraries/stocktypes/{stocktypeid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stocktypeid != null) localVarPathParams.Add("stocktypeid", this.Configuration.ApiClient.ParameterToString(stocktypeid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStockType1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StockType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (StockType) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StockType)));
        }

        /// <summary>
        /// Get list of all stock types 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;StockType&gt;</returns>
        public List<StockType> GetStockTypes1 ()
        {
             ApiResponse<List<StockType>> localVarResponse = GetStockTypes1WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of all stock types 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;StockType&gt;</returns>
        public ApiResponse< List<StockType> > GetStockTypes1WithHttpInfo ()
        {

            var localVarPath = "/libraries/stocktypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStockTypes1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<StockType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<StockType>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<StockType>)));
        }

        /// <summary>
        /// Get list of all stock types 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;StockType&gt;</returns>
        public async System.Threading.Tasks.Task<List<StockType>> GetStockTypes1Async ()
        {
             ApiResponse<List<StockType>> localVarResponse = await GetStockTypes1AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of all stock types 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;StockType&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<StockType>>> GetStockTypes1AsyncWithHttpInfo ()
        {

            var localVarPath = "/libraries/stocktypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStockTypes1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<StockType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<StockType>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<StockType>)));
        }

        /// <summary>
        /// Get list of all stocks 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;StockEntity&gt;</returns>
        public List<StockEntity> GetStocks1 ()
        {
             ApiResponse<List<StockEntity>> localVarResponse = GetStocks1WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of all stocks 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;StockEntity&gt;</returns>
        public ApiResponse< List<StockEntity> > GetStocks1WithHttpInfo ()
        {

            var localVarPath = "/libraries/stocks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStocks1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<StockEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<StockEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<StockEntity>)));
        }

        /// <summary>
        /// Get list of all stocks 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;StockEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<StockEntity>> GetStocks1Async ()
        {
             ApiResponse<List<StockEntity>> localVarResponse = await GetStocks1AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of all stocks 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;StockEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<StockEntity>>> GetStocks1AsyncWithHttpInfo ()
        {

            var localVarPath = "/libraries/stocks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStocks1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<StockEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<StockEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<StockEntity>)));
        }

        /// <summary>
        /// Get list of all stocks 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Stock&gt;</returns>
        public List<Stock> GetStocks2 ()
        {
             ApiResponse<List<Stock>> localVarResponse = GetStocks2WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of all stocks 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Stock&gt;</returns>
        public ApiResponse< List<Stock> > GetStocks2WithHttpInfo ()
        {

            var localVarPath = "/libraries/v2/stocks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStocks2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Stock>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Stock>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Stock>)));
        }

        /// <summary>
        /// Get list of all stocks 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Stock&gt;</returns>
        public async System.Threading.Tasks.Task<List<Stock>> GetStocks2Async ()
        {
             ApiResponse<List<Stock>> localVarResponse = await GetStocks2AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of all stocks 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Stock&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Stock>>> GetStocks2AsyncWithHttpInfo ()
        {

            var localVarPath = "/libraries/v2/stocks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStocks2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Stock>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Stock>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Stock>)));
        }

        /// <summary>
        /// Get template by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateid">ID of template to get</param>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <returns>TemplateEntity</returns>
        public TemplateEntity GetTemplate1 (string templateid, bool? thumb = null)
        {
             ApiResponse<TemplateEntity> localVarResponse = GetTemplate1WithHttpInfo(templateid, thumb);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get template by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateid">ID of template to get</param>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <returns>ApiResponse of TemplateEntity</returns>
        public ApiResponse< TemplateEntity > GetTemplate1WithHttpInfo (string templateid, bool? thumb = null)
        {
            // verify the required parameter 'templateid' is set
            if (templateid == null)
                throw new ApiException(400, "Missing required parameter 'templateid' when calling LibrariesAPIApi->GetTemplate1");

            var localVarPath = "/libraries/templates/{templateid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateid != null) localVarPathParams.Add("templateid", this.Configuration.ApiClient.ParameterToString(templateid)); // path parameter
            if (thumb != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb", thumb)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTemplate1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TemplateEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateEntity)));
        }

        /// <summary>
        /// Get template by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateid">ID of template to get</param>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <returns>Task of TemplateEntity</returns>
        public async System.Threading.Tasks.Task<TemplateEntity> GetTemplate1Async (string templateid, bool? thumb = null)
        {
             ApiResponse<TemplateEntity> localVarResponse = await GetTemplate1AsyncWithHttpInfo(templateid, thumb);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get template by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateid">ID of template to get</param>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <returns>Task of ApiResponse (TemplateEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplateEntity>> GetTemplate1AsyncWithHttpInfo (string templateid, bool? thumb = null)
        {
            // verify the required parameter 'templateid' is set
            if (templateid == null)
                throw new ApiException(400, "Missing required parameter 'templateid' when calling LibrariesAPIApi->GetTemplate1");

            var localVarPath = "/libraries/templates/{templateid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateid != null) localVarPathParams.Add("templateid", this.Configuration.ApiClient.ParameterToString(templateid)); // path parameter
            if (thumb != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb", thumb)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTemplate1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TemplateEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateEntity)));
        }

        /// <summary>
        /// Get list of all templates 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <returns>List&lt;TemplateEntity&gt;</returns>
        public List<TemplateEntity> GetTemplates1 (bool? thumb = null)
        {
             ApiResponse<List<TemplateEntity>> localVarResponse = GetTemplates1WithHttpInfo(thumb);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of all templates 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;TemplateEntity&gt;</returns>
        public ApiResponse< List<TemplateEntity> > GetTemplates1WithHttpInfo (bool? thumb = null)
        {

            var localVarPath = "/libraries/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thumb != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb", thumb)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTemplates1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TemplateEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TemplateEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TemplateEntity>)));
        }

        /// <summary>
        /// Get list of all templates 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <returns>Task of List&lt;TemplateEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<TemplateEntity>> GetTemplates1Async (bool? thumb = null)
        {
             ApiResponse<List<TemplateEntity>> localVarResponse = await GetTemplates1AsyncWithHttpInfo(thumb);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of all templates 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <returns>Task of ApiResponse (List&lt;TemplateEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TemplateEntity>>> GetTemplates1AsyncWithHttpInfo (bool? thumb = null)
        {

            var localVarPath = "/libraries/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thumb != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb", thumb)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTemplates1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TemplateEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TemplateEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TemplateEntity>)));
        }

        /// <summary>
        /// Get thing by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingid">ID of thing to get</param>
        /// <returns>Thing</returns>
        public Thing GetThing1 (string thingid)
        {
             ApiResponse<Thing> localVarResponse = GetThing1WithHttpInfo(thingid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get thing by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingid">ID of thing to get</param>
        /// <returns>ApiResponse of Thing</returns>
        public ApiResponse< Thing > GetThing1WithHttpInfo (string thingid)
        {
            // verify the required parameter 'thingid' is set
            if (thingid == null)
                throw new ApiException(400, "Missing required parameter 'thingid' when calling LibrariesAPIApi->GetThing1");

            var localVarPath = "/libraries/things/{thingid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thingid != null) localVarPathParams.Add("thingid", this.Configuration.ApiClient.ParameterToString(thingid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetThing1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Thing>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Thing) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Thing)));
        }

        /// <summary>
        /// Get thing by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingid">ID of thing to get</param>
        /// <returns>Task of Thing</returns>
        public async System.Threading.Tasks.Task<Thing> GetThing1Async (string thingid)
        {
             ApiResponse<Thing> localVarResponse = await GetThing1AsyncWithHttpInfo(thingid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get thing by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thingid">ID of thing to get</param>
        /// <returns>Task of ApiResponse (Thing)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Thing>> GetThing1AsyncWithHttpInfo (string thingid)
        {
            // verify the required parameter 'thingid' is set
            if (thingid == null)
                throw new ApiException(400, "Missing required parameter 'thingid' when calling LibrariesAPIApi->GetThing1");

            var localVarPath = "/libraries/things/{thingid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (thingid != null) localVarPathParams.Add("thingid", this.Configuration.ApiClient.ParameterToString(thingid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetThing1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Thing>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Thing) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Thing)));
        }

        /// <summary>
        /// Get list of all things 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Thing&gt;</returns>
        public List<Thing> GetThings1 ()
        {
             ApiResponse<List<Thing>> localVarResponse = GetThings1WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of all things 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Thing&gt;</returns>
        public ApiResponse< List<Thing> > GetThings1WithHttpInfo ()
        {

            var localVarPath = "/libraries/things";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetThings1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Thing>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Thing>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Thing>)));
        }

        /// <summary>
        /// Get list of all things 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Thing&gt;</returns>
        public async System.Threading.Tasks.Task<List<Thing>> GetThings1Async ()
        {
             ApiResponse<List<Thing>> localVarResponse = await GetThings1AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of all things 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Thing&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Thing>>> GetThings1AsyncWithHttpInfo ()
        {

            var localVarPath = "/libraries/things";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetThings1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Thing>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Thing>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Thing>)));
        }

        /// <summary>
        /// Import new die design 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity ImportDieDesign1 (ImportDieDesignEntity body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = ImportDieDesign1WithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import new die design 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > ImportDieDesign1WithHttpInfo (ImportDieDesignEntity body = null)
        {

            var localVarPath = "/libraries/diedesigns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportDieDesign1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Import new die design 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> ImportDieDesign1Async (ImportDieDesignEntity body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await ImportDieDesign1AsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Import new die design 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ImportDieDesign1AsyncWithHttpInfo (ImportDieDesignEntity body = null)
        {

            var localVarPath = "/libraries/diedesigns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportDieDesign1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Import new template 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity ImportTemplate1 (ImportTemplateEntity body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = ImportTemplate1WithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import new template 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > ImportTemplate1WithHttpInfo (ImportTemplateEntity body = null)
        {

            var localVarPath = "/libraries/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportTemplate1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Import new template 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> ImportTemplate1Async (ImportTemplateEntity body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await ImportTemplate1AsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Import new template 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ImportTemplate1AsyncWithHttpInfo (ImportTemplateEntity body = null)
        {

            var localVarPath = "/libraries/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportTemplate1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

    }
}
