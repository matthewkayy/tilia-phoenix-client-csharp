/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TiliaLabs.Phoenix.Client;
using TiliaLabs.Phoenix.Model;

namespace TiliaLabs.Phoenix.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IPresetsAPIApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add new Imposition AI profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity AddImpositionAiProfiles1 (ImpositionAiProfileEntity body = null);

        /// <summary>
        /// Add new Imposition AI profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> AddImpositionAiProfiles1WithHttpInfo (ImpositionAiProfileEntity body = null);
        /// <summary>
        /// Delete Imposition AI profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">ID of Imposition AI profile to delete</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity DeleteImpositionAiProfiles1 (string profileId);

        /// <summary>
        /// Delete Imposition AI profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">ID of Imposition AI profile to delete</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> DeleteImpositionAiProfiles1WithHttpInfo (string profileId);
        /// <summary>
        /// Edit Imposition AI profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">ID of Imposition AI profile to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity EditImpositionAiProfiles1 (string profileId, ImpositionAiProfileEntity body = null);

        /// <summary>
        /// Edit Imposition AI profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">ID of Imposition AI profile to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> EditImpositionAiProfiles1WithHttpInfo (string profileId, ImpositionAiProfileEntity body = null);
        /// <summary>
        /// List all CFF2 Die Layout Export Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PresetEntity&gt;</returns>
        List<PresetEntity> GetCff2DieExportPresets ();

        /// <summary>
        /// List all CFF2 Die Layout Export Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PresetEntity&gt;</returns>
        ApiResponse<List<PresetEntity>> GetCff2DieExportPresetsWithHttpInfo ();
        /// <summary>
        /// List all CFF2 Die Layout Import Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PresetEntity&gt;</returns>
        List<PresetEntity> GetCff2DieLayoutImportPresets1 ();

        /// <summary>
        /// List all CFF2 Die Layout Import Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PresetEntity&gt;</returns>
        ApiResponse<List<PresetEntity>> GetCff2DieLayoutImportPresets1WithHttpInfo ();
        /// <summary>
        /// List all Cover Sheet Export Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PresetEntity&gt;</returns>
        List<PresetEntity> GetCoverSheetExportPresets ();

        /// <summary>
        /// List all Cover Sheet Export Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PresetEntity&gt;</returns>
        ApiResponse<List<PresetEntity>> GetCoverSheetExportPresetsWithHttpInfo ();
        /// <summary>
        /// List all JDF Export Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PresetEntity&gt;</returns>
        List<PresetEntity> GetCuttingJdfExportPresets ();

        /// <summary>
        /// List all JDF Export Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PresetEntity&gt;</returns>
        ApiResponse<List<PresetEntity>> GetCuttingJdfExportPresetsWithHttpInfo ();
        /// <summary>
        /// List all DDES2 Die Layout Import Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PresetEntity&gt;</returns>
        List<PresetEntity> GetDdes2DieLayoutImportPresets1 ();

        /// <summary>
        /// List all DDES2 Die Layout Import Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PresetEntity&gt;</returns>
        ApiResponse<List<PresetEntity>> GetDdes2DieLayoutImportPresets1WithHttpInfo ();
        /// <summary>
        /// List all DDES3 Die Layout Import Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PresetEntity&gt;</returns>
        List<PresetEntity> GetDdes3DieLayoutImportPresets1 ();

        /// <summary>
        /// List all DDES3 Die Layout Import Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PresetEntity&gt;</returns>
        ApiResponse<List<PresetEntity>> GetDdes3DieLayoutImportPresets1WithHttpInfo ();
        /// <summary>
        /// List all DXF Die Layout Import Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PresetEntity&gt;</returns>
        List<PresetEntity> GetDxfDieLayoutImportPresets1 ();

        /// <summary>
        /// List all DXF Die Layout Import Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PresetEntity&gt;</returns>
        ApiResponse<List<PresetEntity>> GetDxfDieLayoutImportPresets1WithHttpInfo ();
        /// <summary>
        /// List all Ganging Profiles (Deprecated)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PresetEntity&gt;</returns>
        List<PresetEntity> GetGangingProfiles ();

        /// <summary>
        /// List all Ganging Profiles (Deprecated)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PresetEntity&gt;</returns>
        ApiResponse<List<PresetEntity>> GetGangingProfilesWithHttpInfo ();
        /// <summary>
        /// List all HP JDF Export Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PresetEntity&gt;</returns>
        List<PresetEntity> GetHpJdfExportPresets ();

        /// <summary>
        /// List all HP JDF Export Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PresetEntity&gt;</returns>
        ApiResponse<List<PresetEntity>> GetHpJdfExportPresetsWithHttpInfo ();
        /// <summary>
        /// List all JDF Export Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PresetEntity&gt;</returns>
        List<PresetEntity> GetImposedJdfExportPresets ();

        /// <summary>
        /// List all JDF Export Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PresetEntity&gt;</returns>
        ApiResponse<List<PresetEntity>> GetImposedJdfExportPresetsWithHttpInfo ();
        /// <summary>
        /// List all PDF Export Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PresetEntity&gt;</returns>
        List<PresetEntity> GetImposedPdfExportPresets ();

        /// <summary>
        /// List all PDF Export Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PresetEntity&gt;</returns>
        ApiResponse<List<PresetEntity>> GetImposedPdfExportPresetsWithHttpInfo ();
        /// <summary>
        /// Get Imposition AI profile by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">ID of Imposition AI profile to get</param>
        /// <returns>ImpositionAiProfileEntity</returns>
        ImpositionAiProfileEntity GetImpositionAiProfiles (string profileId);

        /// <summary>
        /// Get Imposition AI profile by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">ID of Imposition AI profile to get</param>
        /// <returns>ApiResponse of ImpositionAiProfileEntity</returns>
        ApiResponse<ImpositionAiProfileEntity> GetImpositionAiProfilesWithHttpInfo (string profileId);
        /// <summary>
        /// Get list of all Imposition AI profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ImpositionAiProfileEntity&gt;</returns>
        List<ImpositionAiProfileEntity> GetImpositionAiProfiles1 ();

        /// <summary>
        /// Get list of all Imposition AI profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ImpositionAiProfileEntity&gt;</returns>
        ApiResponse<List<ImpositionAiProfileEntity>> GetImpositionAiProfiles1WithHttpInfo ();
        /// <summary>
        /// List all Imposition AI Profiles (Deprecated)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PresetEntity&gt;</returns>
        List<PresetEntity> GetImpositionAiProfiles3 ();

        /// <summary>
        /// List all Imposition AI Profiles (Deprecated)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PresetEntity&gt;</returns>
        ApiResponse<List<PresetEntity>> GetImpositionAiProfiles3WithHttpInfo ();
        /// <summary>
        /// List all JSON Project Report Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PresetEntity&gt;</returns>
        List<PresetEntity> GetJsonReportPresets ();

        /// <summary>
        /// List all JSON Project Report Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PresetEntity&gt;</returns>
        ApiResponse<List<PresetEntity>> GetJsonReportPresetsWithHttpInfo ();
        /// <summary>
        /// List all PDF Die Layout Export Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PresetEntity&gt;</returns>
        List<PresetEntity> GetPdfDieExportPresets ();

        /// <summary>
        /// List all PDF Die Layout Export Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PresetEntity&gt;</returns>
        ApiResponse<List<PresetEntity>> GetPdfDieExportPresetsWithHttpInfo ();
        /// <summary>
        /// List all PDF Die Layout Import Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PresetEntity&gt;</returns>
        List<PresetEntity> GetPdfDieLayoutImportPresets1 ();

        /// <summary>
        /// List all PDF Die Layout Import Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PresetEntity&gt;</returns>
        ApiResponse<List<PresetEntity>> GetPdfDieLayoutImportPresets1WithHttpInfo ();
        /// <summary>
        /// List all PDF Project Report Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PresetEntity&gt;</returns>
        List<PresetEntity> GetPdfReportPresets ();

        /// <summary>
        /// List all PDF Project Report Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PresetEntity&gt;</returns>
        ApiResponse<List<PresetEntity>> GetPdfReportPresetsWithHttpInfo ();
        /// <summary>
        /// List all PDF Vector Export Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PresetEntity&gt;</returns>
        List<PresetEntity> GetPdfVectorExportPresets ();

        /// <summary>
        /// List all PDF Vector Export Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PresetEntity&gt;</returns>
        ApiResponse<List<PresetEntity>> GetPdfVectorExportPresetsWithHttpInfo ();
        /// <summary>
        /// List all Product CSV Import Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PresetEntity&gt;</returns>
        List<PresetEntity> GetProductCsvImportPresets ();

        /// <summary>
        /// List all Product CSV Import Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PresetEntity&gt;</returns>
        ApiResponse<List<PresetEntity>> GetProductCsvImportPresetsWithHttpInfo ();
        /// <summary>
        /// List all XML Project Report Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PresetEntity&gt;</returns>
        List<PresetEntity> GetXmlReportPresets ();

        /// <summary>
        /// List all XML Project Report Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PresetEntity&gt;</returns>
        ApiResponse<List<PresetEntity>> GetXmlReportPresetsWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add new Imposition AI profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> AddImpositionAiProfiles1Async (ImpositionAiProfileEntity body = null);

        /// <summary>
        /// Add new Imposition AI profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> AddImpositionAiProfiles1AsyncWithHttpInfo (ImpositionAiProfileEntity body = null);
        /// <summary>
        /// Delete Imposition AI profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">ID of Imposition AI profile to delete</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> DeleteImpositionAiProfiles1Async (string profileId);

        /// <summary>
        /// Delete Imposition AI profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">ID of Imposition AI profile to delete</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> DeleteImpositionAiProfiles1AsyncWithHttpInfo (string profileId);
        /// <summary>
        /// Edit Imposition AI profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">ID of Imposition AI profile to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> EditImpositionAiProfiles1Async (string profileId, ImpositionAiProfileEntity body = null);

        /// <summary>
        /// Edit Imposition AI profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">ID of Imposition AI profile to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> EditImpositionAiProfiles1AsyncWithHttpInfo (string profileId, ImpositionAiProfileEntity body = null);
        /// <summary>
        /// List all CFF2 Die Layout Export Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PresetEntity&gt;</returns>
        System.Threading.Tasks.Task<List<PresetEntity>> GetCff2DieExportPresetsAsync ();

        /// <summary>
        /// List all CFF2 Die Layout Export Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PresetEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PresetEntity>>> GetCff2DieExportPresetsAsyncWithHttpInfo ();
        /// <summary>
        /// List all CFF2 Die Layout Import Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PresetEntity&gt;</returns>
        System.Threading.Tasks.Task<List<PresetEntity>> GetCff2DieLayoutImportPresets1Async ();

        /// <summary>
        /// List all CFF2 Die Layout Import Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PresetEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PresetEntity>>> GetCff2DieLayoutImportPresets1AsyncWithHttpInfo ();
        /// <summary>
        /// List all Cover Sheet Export Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PresetEntity&gt;</returns>
        System.Threading.Tasks.Task<List<PresetEntity>> GetCoverSheetExportPresetsAsync ();

        /// <summary>
        /// List all Cover Sheet Export Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PresetEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PresetEntity>>> GetCoverSheetExportPresetsAsyncWithHttpInfo ();
        /// <summary>
        /// List all JDF Export Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PresetEntity&gt;</returns>
        System.Threading.Tasks.Task<List<PresetEntity>> GetCuttingJdfExportPresetsAsync ();

        /// <summary>
        /// List all JDF Export Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PresetEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PresetEntity>>> GetCuttingJdfExportPresetsAsyncWithHttpInfo ();
        /// <summary>
        /// List all DDES2 Die Layout Import Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PresetEntity&gt;</returns>
        System.Threading.Tasks.Task<List<PresetEntity>> GetDdes2DieLayoutImportPresets1Async ();

        /// <summary>
        /// List all DDES2 Die Layout Import Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PresetEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PresetEntity>>> GetDdes2DieLayoutImportPresets1AsyncWithHttpInfo ();
        /// <summary>
        /// List all DDES3 Die Layout Import Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PresetEntity&gt;</returns>
        System.Threading.Tasks.Task<List<PresetEntity>> GetDdes3DieLayoutImportPresets1Async ();

        /// <summary>
        /// List all DDES3 Die Layout Import Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PresetEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PresetEntity>>> GetDdes3DieLayoutImportPresets1AsyncWithHttpInfo ();
        /// <summary>
        /// List all DXF Die Layout Import Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PresetEntity&gt;</returns>
        System.Threading.Tasks.Task<List<PresetEntity>> GetDxfDieLayoutImportPresets1Async ();

        /// <summary>
        /// List all DXF Die Layout Import Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PresetEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PresetEntity>>> GetDxfDieLayoutImportPresets1AsyncWithHttpInfo ();
        /// <summary>
        /// List all Ganging Profiles (Deprecated)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PresetEntity&gt;</returns>
        System.Threading.Tasks.Task<List<PresetEntity>> GetGangingProfilesAsync ();

        /// <summary>
        /// List all Ganging Profiles (Deprecated)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PresetEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PresetEntity>>> GetGangingProfilesAsyncWithHttpInfo ();
        /// <summary>
        /// List all HP JDF Export Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PresetEntity&gt;</returns>
        System.Threading.Tasks.Task<List<PresetEntity>> GetHpJdfExportPresetsAsync ();

        /// <summary>
        /// List all HP JDF Export Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PresetEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PresetEntity>>> GetHpJdfExportPresetsAsyncWithHttpInfo ();
        /// <summary>
        /// List all JDF Export Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PresetEntity&gt;</returns>
        System.Threading.Tasks.Task<List<PresetEntity>> GetImposedJdfExportPresetsAsync ();

        /// <summary>
        /// List all JDF Export Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PresetEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PresetEntity>>> GetImposedJdfExportPresetsAsyncWithHttpInfo ();
        /// <summary>
        /// List all PDF Export Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PresetEntity&gt;</returns>
        System.Threading.Tasks.Task<List<PresetEntity>> GetImposedPdfExportPresetsAsync ();

        /// <summary>
        /// List all PDF Export Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PresetEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PresetEntity>>> GetImposedPdfExportPresetsAsyncWithHttpInfo ();
        /// <summary>
        /// Get Imposition AI profile by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">ID of Imposition AI profile to get</param>
        /// <returns>Task of ImpositionAiProfileEntity</returns>
        System.Threading.Tasks.Task<ImpositionAiProfileEntity> GetImpositionAiProfilesAsync (string profileId);

        /// <summary>
        /// Get Imposition AI profile by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">ID of Imposition AI profile to get</param>
        /// <returns>Task of ApiResponse (ImpositionAiProfileEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImpositionAiProfileEntity>> GetImpositionAiProfilesAsyncWithHttpInfo (string profileId);
        /// <summary>
        /// Get list of all Imposition AI profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ImpositionAiProfileEntity&gt;</returns>
        System.Threading.Tasks.Task<List<ImpositionAiProfileEntity>> GetImpositionAiProfiles1Async ();

        /// <summary>
        /// Get list of all Imposition AI profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ImpositionAiProfileEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ImpositionAiProfileEntity>>> GetImpositionAiProfiles1AsyncWithHttpInfo ();
        /// <summary>
        /// List all Imposition AI Profiles (Deprecated)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PresetEntity&gt;</returns>
        System.Threading.Tasks.Task<List<PresetEntity>> GetImpositionAiProfiles3Async ();

        /// <summary>
        /// List all Imposition AI Profiles (Deprecated)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PresetEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PresetEntity>>> GetImpositionAiProfiles3AsyncWithHttpInfo ();
        /// <summary>
        /// List all JSON Project Report Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PresetEntity&gt;</returns>
        System.Threading.Tasks.Task<List<PresetEntity>> GetJsonReportPresetsAsync ();

        /// <summary>
        /// List all JSON Project Report Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PresetEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PresetEntity>>> GetJsonReportPresetsAsyncWithHttpInfo ();
        /// <summary>
        /// List all PDF Die Layout Export Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PresetEntity&gt;</returns>
        System.Threading.Tasks.Task<List<PresetEntity>> GetPdfDieExportPresetsAsync ();

        /// <summary>
        /// List all PDF Die Layout Export Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PresetEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PresetEntity>>> GetPdfDieExportPresetsAsyncWithHttpInfo ();
        /// <summary>
        /// List all PDF Die Layout Import Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PresetEntity&gt;</returns>
        System.Threading.Tasks.Task<List<PresetEntity>> GetPdfDieLayoutImportPresets1Async ();

        /// <summary>
        /// List all PDF Die Layout Import Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PresetEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PresetEntity>>> GetPdfDieLayoutImportPresets1AsyncWithHttpInfo ();
        /// <summary>
        /// List all PDF Project Report Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PresetEntity&gt;</returns>
        System.Threading.Tasks.Task<List<PresetEntity>> GetPdfReportPresetsAsync ();

        /// <summary>
        /// List all PDF Project Report Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PresetEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PresetEntity>>> GetPdfReportPresetsAsyncWithHttpInfo ();
        /// <summary>
        /// List all PDF Vector Export Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PresetEntity&gt;</returns>
        System.Threading.Tasks.Task<List<PresetEntity>> GetPdfVectorExportPresetsAsync ();

        /// <summary>
        /// List all PDF Vector Export Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PresetEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PresetEntity>>> GetPdfVectorExportPresetsAsyncWithHttpInfo ();
        /// <summary>
        /// List all Product CSV Import Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PresetEntity&gt;</returns>
        System.Threading.Tasks.Task<List<PresetEntity>> GetProductCsvImportPresetsAsync ();

        /// <summary>
        /// List all Product CSV Import Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PresetEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PresetEntity>>> GetProductCsvImportPresetsAsyncWithHttpInfo ();
        /// <summary>
        /// List all XML Project Report Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PresetEntity&gt;</returns>
        System.Threading.Tasks.Task<List<PresetEntity>> GetXmlReportPresetsAsync ();

        /// <summary>
        /// List all XML Project Report Presets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PresetEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PresetEntity>>> GetXmlReportPresetsAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class PresetsAPIApi : IPresetsAPIApi
    {
        private TiliaLabs.Phoenix.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PresetsAPIApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PresetsAPIApi(String basePath)
        {
            this.Configuration = new TiliaLabs.Phoenix.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TiliaLabs.Phoenix.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PresetsAPIApi"/> class
        /// </summary>
        /// <returns></returns>
        public PresetsAPIApi()
        {
            this.Configuration = TiliaLabs.Phoenix.Client.Configuration.Default;

            ExceptionFactory = TiliaLabs.Phoenix.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PresetsAPIApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PresetsAPIApi(TiliaLabs.Phoenix.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TiliaLabs.Phoenix.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TiliaLabs.Phoenix.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TiliaLabs.Phoenix.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TiliaLabs.Phoenix.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add new Imposition AI profile 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity AddImpositionAiProfiles1 (ImpositionAiProfileEntity body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = AddImpositionAiProfiles1WithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add new Imposition AI profile 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > AddImpositionAiProfiles1WithHttpInfo (ImpositionAiProfileEntity body = null)
        {

            var localVarPath = "/presets/imposition-ai";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddImpositionAiProfiles1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Add new Imposition AI profile 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> AddImpositionAiProfiles1Async (ImpositionAiProfileEntity body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await AddImpositionAiProfiles1AsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add new Imposition AI profile 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> AddImpositionAiProfiles1AsyncWithHttpInfo (ImpositionAiProfileEntity body = null)
        {

            var localVarPath = "/presets/imposition-ai";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddImpositionAiProfiles1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Delete Imposition AI profile 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">ID of Imposition AI profile to delete</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity DeleteImpositionAiProfiles1 (string profileId)
        {
             ApiResponse<ResponseEntity> localVarResponse = DeleteImpositionAiProfiles1WithHttpInfo(profileId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Imposition AI profile 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">ID of Imposition AI profile to delete</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > DeleteImpositionAiProfiles1WithHttpInfo (string profileId)
        {
            // verify the required parameter 'profileId' is set
            if (profileId == null)
                throw new ApiException(400, "Missing required parameter 'profileId' when calling PresetsAPIApi->DeleteImpositionAiProfiles1");

            var localVarPath = "/presets/imposition-ai/{profile-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (profileId != null) localVarPathParams.Add("profile-id", this.Configuration.ApiClient.ParameterToString(profileId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteImpositionAiProfiles1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Delete Imposition AI profile 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">ID of Imposition AI profile to delete</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> DeleteImpositionAiProfiles1Async (string profileId)
        {
             ApiResponse<ResponseEntity> localVarResponse = await DeleteImpositionAiProfiles1AsyncWithHttpInfo(profileId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Imposition AI profile 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">ID of Imposition AI profile to delete</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> DeleteImpositionAiProfiles1AsyncWithHttpInfo (string profileId)
        {
            // verify the required parameter 'profileId' is set
            if (profileId == null)
                throw new ApiException(400, "Missing required parameter 'profileId' when calling PresetsAPIApi->DeleteImpositionAiProfiles1");

            var localVarPath = "/presets/imposition-ai/{profile-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (profileId != null) localVarPathParams.Add("profile-id", this.Configuration.ApiClient.ParameterToString(profileId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteImpositionAiProfiles1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Edit Imposition AI profile 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">ID of Imposition AI profile to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity EditImpositionAiProfiles1 (string profileId, ImpositionAiProfileEntity body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = EditImpositionAiProfiles1WithHttpInfo(profileId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit Imposition AI profile 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">ID of Imposition AI profile to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > EditImpositionAiProfiles1WithHttpInfo (string profileId, ImpositionAiProfileEntity body = null)
        {
            // verify the required parameter 'profileId' is set
            if (profileId == null)
                throw new ApiException(400, "Missing required parameter 'profileId' when calling PresetsAPIApi->EditImpositionAiProfiles1");

            var localVarPath = "/presets/imposition-ai/{profile-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (profileId != null) localVarPathParams.Add("profile-id", this.Configuration.ApiClient.ParameterToString(profileId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditImpositionAiProfiles1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Edit Imposition AI profile 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">ID of Imposition AI profile to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> EditImpositionAiProfiles1Async (string profileId, ImpositionAiProfileEntity body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await EditImpositionAiProfiles1AsyncWithHttpInfo(profileId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit Imposition AI profile 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">ID of Imposition AI profile to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> EditImpositionAiProfiles1AsyncWithHttpInfo (string profileId, ImpositionAiProfileEntity body = null)
        {
            // verify the required parameter 'profileId' is set
            if (profileId == null)
                throw new ApiException(400, "Missing required parameter 'profileId' when calling PresetsAPIApi->EditImpositionAiProfiles1");

            var localVarPath = "/presets/imposition-ai/{profile-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (profileId != null) localVarPathParams.Add("profile-id", this.Configuration.ApiClient.ParameterToString(profileId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditImpositionAiProfiles1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// List all CFF2 Die Layout Export Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PresetEntity&gt;</returns>
        public List<PresetEntity> GetCff2DieExportPresets ()
        {
             ApiResponse<List<PresetEntity>> localVarResponse = GetCff2DieExportPresetsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all CFF2 Die Layout Export Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PresetEntity&gt;</returns>
        public ApiResponse< List<PresetEntity> > GetCff2DieExportPresetsWithHttpInfo ()
        {

            var localVarPath = "/presets/export/die/cff2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCff2DieExportPresets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PresetEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PresetEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PresetEntity>)));
        }

        /// <summary>
        /// List all CFF2 Die Layout Export Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PresetEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<PresetEntity>> GetCff2DieExportPresetsAsync ()
        {
             ApiResponse<List<PresetEntity>> localVarResponse = await GetCff2DieExportPresetsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all CFF2 Die Layout Export Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PresetEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PresetEntity>>> GetCff2DieExportPresetsAsyncWithHttpInfo ()
        {

            var localVarPath = "/presets/export/die/cff2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCff2DieExportPresets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PresetEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PresetEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PresetEntity>)));
        }

        /// <summary>
        /// List all CFF2 Die Layout Import Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PresetEntity&gt;</returns>
        public List<PresetEntity> GetCff2DieLayoutImportPresets1 ()
        {
             ApiResponse<List<PresetEntity>> localVarResponse = GetCff2DieLayoutImportPresets1WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all CFF2 Die Layout Import Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PresetEntity&gt;</returns>
        public ApiResponse< List<PresetEntity> > GetCff2DieLayoutImportPresets1WithHttpInfo ()
        {

            var localVarPath = "/presets/import/die/cff2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCff2DieLayoutImportPresets1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PresetEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PresetEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PresetEntity>)));
        }

        /// <summary>
        /// List all CFF2 Die Layout Import Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PresetEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<PresetEntity>> GetCff2DieLayoutImportPresets1Async ()
        {
             ApiResponse<List<PresetEntity>> localVarResponse = await GetCff2DieLayoutImportPresets1AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all CFF2 Die Layout Import Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PresetEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PresetEntity>>> GetCff2DieLayoutImportPresets1AsyncWithHttpInfo ()
        {

            var localVarPath = "/presets/import/die/cff2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCff2DieLayoutImportPresets1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PresetEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PresetEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PresetEntity>)));
        }

        /// <summary>
        /// List all Cover Sheet Export Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PresetEntity&gt;</returns>
        public List<PresetEntity> GetCoverSheetExportPresets ()
        {
             ApiResponse<List<PresetEntity>> localVarResponse = GetCoverSheetExportPresetsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all Cover Sheet Export Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PresetEntity&gt;</returns>
        public ApiResponse< List<PresetEntity> > GetCoverSheetExportPresetsWithHttpInfo ()
        {

            var localVarPath = "/presets/export/cover-sheet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCoverSheetExportPresets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PresetEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PresetEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PresetEntity>)));
        }

        /// <summary>
        /// List all Cover Sheet Export Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PresetEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<PresetEntity>> GetCoverSheetExportPresetsAsync ()
        {
             ApiResponse<List<PresetEntity>> localVarResponse = await GetCoverSheetExportPresetsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all Cover Sheet Export Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PresetEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PresetEntity>>> GetCoverSheetExportPresetsAsyncWithHttpInfo ()
        {

            var localVarPath = "/presets/export/cover-sheet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCoverSheetExportPresets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PresetEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PresetEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PresetEntity>)));
        }

        /// <summary>
        /// List all JDF Export Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PresetEntity&gt;</returns>
        public List<PresetEntity> GetCuttingJdfExportPresets ()
        {
             ApiResponse<List<PresetEntity>> localVarResponse = GetCuttingJdfExportPresetsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all JDF Export Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PresetEntity&gt;</returns>
        public ApiResponse< List<PresetEntity> > GetCuttingJdfExportPresetsWithHttpInfo ()
        {

            var localVarPath = "/presets/export/jdf-cutting";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCuttingJdfExportPresets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PresetEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PresetEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PresetEntity>)));
        }

        /// <summary>
        /// List all JDF Export Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PresetEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<PresetEntity>> GetCuttingJdfExportPresetsAsync ()
        {
             ApiResponse<List<PresetEntity>> localVarResponse = await GetCuttingJdfExportPresetsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all JDF Export Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PresetEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PresetEntity>>> GetCuttingJdfExportPresetsAsyncWithHttpInfo ()
        {

            var localVarPath = "/presets/export/jdf-cutting";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCuttingJdfExportPresets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PresetEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PresetEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PresetEntity>)));
        }

        /// <summary>
        /// List all DDES2 Die Layout Import Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PresetEntity&gt;</returns>
        public List<PresetEntity> GetDdes2DieLayoutImportPresets1 ()
        {
             ApiResponse<List<PresetEntity>> localVarResponse = GetDdes2DieLayoutImportPresets1WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all DDES2 Die Layout Import Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PresetEntity&gt;</returns>
        public ApiResponse< List<PresetEntity> > GetDdes2DieLayoutImportPresets1WithHttpInfo ()
        {

            var localVarPath = "/presets/import/die/ddes2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDdes2DieLayoutImportPresets1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PresetEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PresetEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PresetEntity>)));
        }

        /// <summary>
        /// List all DDES2 Die Layout Import Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PresetEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<PresetEntity>> GetDdes2DieLayoutImportPresets1Async ()
        {
             ApiResponse<List<PresetEntity>> localVarResponse = await GetDdes2DieLayoutImportPresets1AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all DDES2 Die Layout Import Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PresetEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PresetEntity>>> GetDdes2DieLayoutImportPresets1AsyncWithHttpInfo ()
        {

            var localVarPath = "/presets/import/die/ddes2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDdes2DieLayoutImportPresets1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PresetEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PresetEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PresetEntity>)));
        }

        /// <summary>
        /// List all DDES3 Die Layout Import Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PresetEntity&gt;</returns>
        public List<PresetEntity> GetDdes3DieLayoutImportPresets1 ()
        {
             ApiResponse<List<PresetEntity>> localVarResponse = GetDdes3DieLayoutImportPresets1WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all DDES3 Die Layout Import Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PresetEntity&gt;</returns>
        public ApiResponse< List<PresetEntity> > GetDdes3DieLayoutImportPresets1WithHttpInfo ()
        {

            var localVarPath = "/presets/import/die/ddes3";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDdes3DieLayoutImportPresets1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PresetEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PresetEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PresetEntity>)));
        }

        /// <summary>
        /// List all DDES3 Die Layout Import Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PresetEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<PresetEntity>> GetDdes3DieLayoutImportPresets1Async ()
        {
             ApiResponse<List<PresetEntity>> localVarResponse = await GetDdes3DieLayoutImportPresets1AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all DDES3 Die Layout Import Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PresetEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PresetEntity>>> GetDdes3DieLayoutImportPresets1AsyncWithHttpInfo ()
        {

            var localVarPath = "/presets/import/die/ddes3";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDdes3DieLayoutImportPresets1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PresetEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PresetEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PresetEntity>)));
        }

        /// <summary>
        /// List all DXF Die Layout Import Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PresetEntity&gt;</returns>
        public List<PresetEntity> GetDxfDieLayoutImportPresets1 ()
        {
             ApiResponse<List<PresetEntity>> localVarResponse = GetDxfDieLayoutImportPresets1WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all DXF Die Layout Import Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PresetEntity&gt;</returns>
        public ApiResponse< List<PresetEntity> > GetDxfDieLayoutImportPresets1WithHttpInfo ()
        {

            var localVarPath = "/presets/import/die/dxf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDxfDieLayoutImportPresets1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PresetEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PresetEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PresetEntity>)));
        }

        /// <summary>
        /// List all DXF Die Layout Import Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PresetEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<PresetEntity>> GetDxfDieLayoutImportPresets1Async ()
        {
             ApiResponse<List<PresetEntity>> localVarResponse = await GetDxfDieLayoutImportPresets1AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all DXF Die Layout Import Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PresetEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PresetEntity>>> GetDxfDieLayoutImportPresets1AsyncWithHttpInfo ()
        {

            var localVarPath = "/presets/import/die/dxf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDxfDieLayoutImportPresets1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PresetEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PresetEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PresetEntity>)));
        }

        /// <summary>
        /// List all Ganging Profiles (Deprecated) 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PresetEntity&gt;</returns>
        public List<PresetEntity> GetGangingProfiles ()
        {
             ApiResponse<List<PresetEntity>> localVarResponse = GetGangingProfilesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all Ganging Profiles (Deprecated) 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PresetEntity&gt;</returns>
        public ApiResponse< List<PresetEntity> > GetGangingProfilesWithHttpInfo ()
        {

            var localVarPath = "/presets/ganging/profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGangingProfiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PresetEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PresetEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PresetEntity>)));
        }

        /// <summary>
        /// List all Ganging Profiles (Deprecated) 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PresetEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<PresetEntity>> GetGangingProfilesAsync ()
        {
             ApiResponse<List<PresetEntity>> localVarResponse = await GetGangingProfilesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all Ganging Profiles (Deprecated) 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PresetEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PresetEntity>>> GetGangingProfilesAsyncWithHttpInfo ()
        {

            var localVarPath = "/presets/ganging/profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGangingProfiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PresetEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PresetEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PresetEntity>)));
        }

        /// <summary>
        /// List all HP JDF Export Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PresetEntity&gt;</returns>
        public List<PresetEntity> GetHpJdfExportPresets ()
        {
             ApiResponse<List<PresetEntity>> localVarResponse = GetHpJdfExportPresetsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all HP JDF Export Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PresetEntity&gt;</returns>
        public ApiResponse< List<PresetEntity> > GetHpJdfExportPresetsWithHttpInfo ()
        {

            var localVarPath = "/presets/export/hp-jdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHpJdfExportPresets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PresetEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PresetEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PresetEntity>)));
        }

        /// <summary>
        /// List all HP JDF Export Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PresetEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<PresetEntity>> GetHpJdfExportPresetsAsync ()
        {
             ApiResponse<List<PresetEntity>> localVarResponse = await GetHpJdfExportPresetsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all HP JDF Export Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PresetEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PresetEntity>>> GetHpJdfExportPresetsAsyncWithHttpInfo ()
        {

            var localVarPath = "/presets/export/hp-jdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHpJdfExportPresets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PresetEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PresetEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PresetEntity>)));
        }

        /// <summary>
        /// List all JDF Export Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PresetEntity&gt;</returns>
        public List<PresetEntity> GetImposedJdfExportPresets ()
        {
             ApiResponse<List<PresetEntity>> localVarResponse = GetImposedJdfExportPresetsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all JDF Export Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PresetEntity&gt;</returns>
        public ApiResponse< List<PresetEntity> > GetImposedJdfExportPresetsWithHttpInfo ()
        {

            var localVarPath = "/presets/export/jdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetImposedJdfExportPresets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PresetEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PresetEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PresetEntity>)));
        }

        /// <summary>
        /// List all JDF Export Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PresetEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<PresetEntity>> GetImposedJdfExportPresetsAsync ()
        {
             ApiResponse<List<PresetEntity>> localVarResponse = await GetImposedJdfExportPresetsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all JDF Export Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PresetEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PresetEntity>>> GetImposedJdfExportPresetsAsyncWithHttpInfo ()
        {

            var localVarPath = "/presets/export/jdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetImposedJdfExportPresets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PresetEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PresetEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PresetEntity>)));
        }

        /// <summary>
        /// List all PDF Export Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PresetEntity&gt;</returns>
        public List<PresetEntity> GetImposedPdfExportPresets ()
        {
             ApiResponse<List<PresetEntity>> localVarResponse = GetImposedPdfExportPresetsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all PDF Export Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PresetEntity&gt;</returns>
        public ApiResponse< List<PresetEntity> > GetImposedPdfExportPresetsWithHttpInfo ()
        {

            var localVarPath = "/presets/export/pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetImposedPdfExportPresets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PresetEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PresetEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PresetEntity>)));
        }

        /// <summary>
        /// List all PDF Export Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PresetEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<PresetEntity>> GetImposedPdfExportPresetsAsync ()
        {
             ApiResponse<List<PresetEntity>> localVarResponse = await GetImposedPdfExportPresetsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all PDF Export Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PresetEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PresetEntity>>> GetImposedPdfExportPresetsAsyncWithHttpInfo ()
        {

            var localVarPath = "/presets/export/pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetImposedPdfExportPresets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PresetEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PresetEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PresetEntity>)));
        }

        /// <summary>
        /// Get Imposition AI profile by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">ID of Imposition AI profile to get</param>
        /// <returns>ImpositionAiProfileEntity</returns>
        public ImpositionAiProfileEntity GetImpositionAiProfiles (string profileId)
        {
             ApiResponse<ImpositionAiProfileEntity> localVarResponse = GetImpositionAiProfilesWithHttpInfo(profileId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Imposition AI profile by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">ID of Imposition AI profile to get</param>
        /// <returns>ApiResponse of ImpositionAiProfileEntity</returns>
        public ApiResponse< ImpositionAiProfileEntity > GetImpositionAiProfilesWithHttpInfo (string profileId)
        {
            // verify the required parameter 'profileId' is set
            if (profileId == null)
                throw new ApiException(400, "Missing required parameter 'profileId' when calling PresetsAPIApi->GetImpositionAiProfiles");

            var localVarPath = "/presets/imposition-ai/{profile-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (profileId != null) localVarPathParams.Add("profile-id", this.Configuration.ApiClient.ParameterToString(profileId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetImpositionAiProfiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImpositionAiProfileEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ImpositionAiProfileEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImpositionAiProfileEntity)));
        }

        /// <summary>
        /// Get Imposition AI profile by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">ID of Imposition AI profile to get</param>
        /// <returns>Task of ImpositionAiProfileEntity</returns>
        public async System.Threading.Tasks.Task<ImpositionAiProfileEntity> GetImpositionAiProfilesAsync (string profileId)
        {
             ApiResponse<ImpositionAiProfileEntity> localVarResponse = await GetImpositionAiProfilesAsyncWithHttpInfo(profileId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Imposition AI profile by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">ID of Imposition AI profile to get</param>
        /// <returns>Task of ApiResponse (ImpositionAiProfileEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ImpositionAiProfileEntity>> GetImpositionAiProfilesAsyncWithHttpInfo (string profileId)
        {
            // verify the required parameter 'profileId' is set
            if (profileId == null)
                throw new ApiException(400, "Missing required parameter 'profileId' when calling PresetsAPIApi->GetImpositionAiProfiles");

            var localVarPath = "/presets/imposition-ai/{profile-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (profileId != null) localVarPathParams.Add("profile-id", this.Configuration.ApiClient.ParameterToString(profileId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetImpositionAiProfiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImpositionAiProfileEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ImpositionAiProfileEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImpositionAiProfileEntity)));
        }

        /// <summary>
        /// Get list of all Imposition AI profile 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ImpositionAiProfileEntity&gt;</returns>
        public List<ImpositionAiProfileEntity> GetImpositionAiProfiles1 ()
        {
             ApiResponse<List<ImpositionAiProfileEntity>> localVarResponse = GetImpositionAiProfiles1WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of all Imposition AI profile 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ImpositionAiProfileEntity&gt;</returns>
        public ApiResponse< List<ImpositionAiProfileEntity> > GetImpositionAiProfiles1WithHttpInfo ()
        {

            var localVarPath = "/presets/imposition-ai";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetImpositionAiProfiles1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ImpositionAiProfileEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ImpositionAiProfileEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ImpositionAiProfileEntity>)));
        }

        /// <summary>
        /// Get list of all Imposition AI profile 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ImpositionAiProfileEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<ImpositionAiProfileEntity>> GetImpositionAiProfiles1Async ()
        {
             ApiResponse<List<ImpositionAiProfileEntity>> localVarResponse = await GetImpositionAiProfiles1AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of all Imposition AI profile 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ImpositionAiProfileEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ImpositionAiProfileEntity>>> GetImpositionAiProfiles1AsyncWithHttpInfo ()
        {

            var localVarPath = "/presets/imposition-ai";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetImpositionAiProfiles1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ImpositionAiProfileEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ImpositionAiProfileEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ImpositionAiProfileEntity>)));
        }

        /// <summary>
        /// List all Imposition AI Profiles (Deprecated) 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PresetEntity&gt;</returns>
        public List<PresetEntity> GetImpositionAiProfiles3 ()
        {
             ApiResponse<List<PresetEntity>> localVarResponse = GetImpositionAiProfiles3WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all Imposition AI Profiles (Deprecated) 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PresetEntity&gt;</returns>
        public ApiResponse< List<PresetEntity> > GetImpositionAiProfiles3WithHttpInfo ()
        {

            var localVarPath = "/presets/imposition-ai/profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetImpositionAiProfiles3", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PresetEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PresetEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PresetEntity>)));
        }

        /// <summary>
        /// List all Imposition AI Profiles (Deprecated) 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PresetEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<PresetEntity>> GetImpositionAiProfiles3Async ()
        {
             ApiResponse<List<PresetEntity>> localVarResponse = await GetImpositionAiProfiles3AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all Imposition AI Profiles (Deprecated) 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PresetEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PresetEntity>>> GetImpositionAiProfiles3AsyncWithHttpInfo ()
        {

            var localVarPath = "/presets/imposition-ai/profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetImpositionAiProfiles3", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PresetEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PresetEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PresetEntity>)));
        }

        /// <summary>
        /// List all JSON Project Report Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PresetEntity&gt;</returns>
        public List<PresetEntity> GetJsonReportPresets ()
        {
             ApiResponse<List<PresetEntity>> localVarResponse = GetJsonReportPresetsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all JSON Project Report Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PresetEntity&gt;</returns>
        public ApiResponse< List<PresetEntity> > GetJsonReportPresetsWithHttpInfo ()
        {

            var localVarPath = "/presets/export/report/json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJsonReportPresets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PresetEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PresetEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PresetEntity>)));
        }

        /// <summary>
        /// List all JSON Project Report Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PresetEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<PresetEntity>> GetJsonReportPresetsAsync ()
        {
             ApiResponse<List<PresetEntity>> localVarResponse = await GetJsonReportPresetsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all JSON Project Report Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PresetEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PresetEntity>>> GetJsonReportPresetsAsyncWithHttpInfo ()
        {

            var localVarPath = "/presets/export/report/json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJsonReportPresets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PresetEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PresetEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PresetEntity>)));
        }

        /// <summary>
        /// List all PDF Die Layout Export Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PresetEntity&gt;</returns>
        public List<PresetEntity> GetPdfDieExportPresets ()
        {
             ApiResponse<List<PresetEntity>> localVarResponse = GetPdfDieExportPresetsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all PDF Die Layout Export Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PresetEntity&gt;</returns>
        public ApiResponse< List<PresetEntity> > GetPdfDieExportPresetsWithHttpInfo ()
        {

            var localVarPath = "/presets/export/die/pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfDieExportPresets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PresetEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PresetEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PresetEntity>)));
        }

        /// <summary>
        /// List all PDF Die Layout Export Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PresetEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<PresetEntity>> GetPdfDieExportPresetsAsync ()
        {
             ApiResponse<List<PresetEntity>> localVarResponse = await GetPdfDieExportPresetsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all PDF Die Layout Export Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PresetEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PresetEntity>>> GetPdfDieExportPresetsAsyncWithHttpInfo ()
        {

            var localVarPath = "/presets/export/die/pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfDieExportPresets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PresetEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PresetEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PresetEntity>)));
        }

        /// <summary>
        /// List all PDF Die Layout Import Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PresetEntity&gt;</returns>
        public List<PresetEntity> GetPdfDieLayoutImportPresets1 ()
        {
             ApiResponse<List<PresetEntity>> localVarResponse = GetPdfDieLayoutImportPresets1WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all PDF Die Layout Import Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PresetEntity&gt;</returns>
        public ApiResponse< List<PresetEntity> > GetPdfDieLayoutImportPresets1WithHttpInfo ()
        {

            var localVarPath = "/presets/import/die/pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfDieLayoutImportPresets1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PresetEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PresetEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PresetEntity>)));
        }

        /// <summary>
        /// List all PDF Die Layout Import Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PresetEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<PresetEntity>> GetPdfDieLayoutImportPresets1Async ()
        {
             ApiResponse<List<PresetEntity>> localVarResponse = await GetPdfDieLayoutImportPresets1AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all PDF Die Layout Import Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PresetEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PresetEntity>>> GetPdfDieLayoutImportPresets1AsyncWithHttpInfo ()
        {

            var localVarPath = "/presets/import/die/pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfDieLayoutImportPresets1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PresetEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PresetEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PresetEntity>)));
        }

        /// <summary>
        /// List all PDF Project Report Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PresetEntity&gt;</returns>
        public List<PresetEntity> GetPdfReportPresets ()
        {
             ApiResponse<List<PresetEntity>> localVarResponse = GetPdfReportPresetsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all PDF Project Report Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PresetEntity&gt;</returns>
        public ApiResponse< List<PresetEntity> > GetPdfReportPresetsWithHttpInfo ()
        {

            var localVarPath = "/presets/export/report/pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfReportPresets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PresetEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PresetEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PresetEntity>)));
        }

        /// <summary>
        /// List all PDF Project Report Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PresetEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<PresetEntity>> GetPdfReportPresetsAsync ()
        {
             ApiResponse<List<PresetEntity>> localVarResponse = await GetPdfReportPresetsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all PDF Project Report Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PresetEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PresetEntity>>> GetPdfReportPresetsAsyncWithHttpInfo ()
        {

            var localVarPath = "/presets/export/report/pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfReportPresets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PresetEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PresetEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PresetEntity>)));
        }

        /// <summary>
        /// List all PDF Vector Export Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PresetEntity&gt;</returns>
        public List<PresetEntity> GetPdfVectorExportPresets ()
        {
             ApiResponse<List<PresetEntity>> localVarResponse = GetPdfVectorExportPresetsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all PDF Vector Export Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PresetEntity&gt;</returns>
        public ApiResponse< List<PresetEntity> > GetPdfVectorExportPresetsWithHttpInfo ()
        {

            var localVarPath = "/presets/export/pdf-vector";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfVectorExportPresets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PresetEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PresetEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PresetEntity>)));
        }

        /// <summary>
        /// List all PDF Vector Export Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PresetEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<PresetEntity>> GetPdfVectorExportPresetsAsync ()
        {
             ApiResponse<List<PresetEntity>> localVarResponse = await GetPdfVectorExportPresetsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all PDF Vector Export Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PresetEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PresetEntity>>> GetPdfVectorExportPresetsAsyncWithHttpInfo ()
        {

            var localVarPath = "/presets/export/pdf-vector";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfVectorExportPresets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PresetEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PresetEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PresetEntity>)));
        }

        /// <summary>
        /// List all Product CSV Import Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PresetEntity&gt;</returns>
        public List<PresetEntity> GetProductCsvImportPresets ()
        {
             ApiResponse<List<PresetEntity>> localVarResponse = GetProductCsvImportPresetsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all Product CSV Import Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PresetEntity&gt;</returns>
        public ApiResponse< List<PresetEntity> > GetProductCsvImportPresetsWithHttpInfo ()
        {

            var localVarPath = "/presets/import/product/csv";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProductCsvImportPresets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PresetEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PresetEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PresetEntity>)));
        }

        /// <summary>
        /// List all Product CSV Import Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PresetEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<PresetEntity>> GetProductCsvImportPresetsAsync ()
        {
             ApiResponse<List<PresetEntity>> localVarResponse = await GetProductCsvImportPresetsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all Product CSV Import Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PresetEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PresetEntity>>> GetProductCsvImportPresetsAsyncWithHttpInfo ()
        {

            var localVarPath = "/presets/import/product/csv";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProductCsvImportPresets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PresetEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PresetEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PresetEntity>)));
        }

        /// <summary>
        /// List all XML Project Report Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PresetEntity&gt;</returns>
        public List<PresetEntity> GetXmlReportPresets ()
        {
             ApiResponse<List<PresetEntity>> localVarResponse = GetXmlReportPresetsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all XML Project Report Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PresetEntity&gt;</returns>
        public ApiResponse< List<PresetEntity> > GetXmlReportPresetsWithHttpInfo ()
        {

            var localVarPath = "/presets/export/report/xml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetXmlReportPresets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PresetEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PresetEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PresetEntity>)));
        }

        /// <summary>
        /// List all XML Project Report Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PresetEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<PresetEntity>> GetXmlReportPresetsAsync ()
        {
             ApiResponse<List<PresetEntity>> localVarResponse = await GetXmlReportPresetsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all XML Project Report Presets 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PresetEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PresetEntity>>> GetXmlReportPresetsAsyncWithHttpInfo ()
        {

            var localVarPath = "/presets/export/report/xml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetXmlReportPresets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PresetEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PresetEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PresetEntity>)));
        }

    }
}
