/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TiliaLabs.Phoenix.Client;
using TiliaLabs.Phoenix.Model;

namespace TiliaLabs.Phoenix.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IProjectsAPIApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Apply result from most recent Impose run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="resultid">Id of result to apply</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity ApplyImposeResult1 (int? layoutindex, int? resultid, string projectid);

        /// <summary>
        /// Apply result from most recent Impose run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="resultid">Id of result to apply</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> ApplyImposeResult1WithHttpInfo (int? layoutindex, int? resultid, string projectid);
        /// <summary>
        /// Apply result from most recent Optimize run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="resultid">Id of result to apply</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity ApplyOptimizeResult1 (int? layoutindex, int? resultid, string projectid);

        /// <summary>
        /// Apply result from most recent Optimize run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="resultid">Id of result to apply</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> ApplyOptimizeResult1WithHttpInfo (int? layoutindex, int? resultid, string projectid);
        /// <summary>
        /// Apply result from most recent plan run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resultid">Id of result to apply</param>
        /// <param name="start">First layout to apply from plan starting from 1</param>
        /// <param name="end">Last layout to apply from plan</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity ApplyPartialPlan1 (int? resultid, int? start, int? end, string projectid);

        /// <summary>
        /// Apply result from most recent plan run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resultid">Id of result to apply</param>
        /// <param name="start">First layout to apply from plan starting from 1</param>
        /// <param name="end">Last layout to apply from plan</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> ApplyPartialPlan1WithHttpInfo (int? resultid, int? start, int? end, string projectid);
        /// <summary>
        /// Apply result from most recent plan run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resultid">Id of result to apply</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity ApplyPlanResult1 (int? resultid, string projectid);

        /// <summary>
        /// Apply result from most recent plan run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resultid">Id of result to apply</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> ApplyPlanResult1WithHttpInfo (int? resultid, string projectid);
        /// <summary>
        /// Apply result from most recent Populate run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="resultid">Id of result to apply</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity ApplyPopulateResult1 (int? layoutindex, int? resultid, string projectid);

        /// <summary>
        /// Apply result from most recent Populate run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="resultid">Id of result to apply</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> ApplyPopulateResult1WithHttpInfo (int? layoutindex, int? resultid, string projectid);
        /// <summary>
        /// Apply a smart product mark to this product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productname"></param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity ApplyProductMark (string productname, string projectid, ApplyMarkResource body = null);

        /// <summary>
        /// Apply a smart product mark to this product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productname"></param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> ApplyProductMarkWithHttpInfo (string productname, string projectid, ApplyMarkResource body = null);
        /// <summary>
        /// Create a new project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity CreateJob (CreateJobResource body = null);

        /// <summary>
        /// Create a new project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> CreateJobWithHttpInfo (CreateJobResource body = null);
        /// <summary>
        /// Create a new layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <returns>PhoenixLayoutEntity</returns>
        PhoenixLayoutEntity CreateLayout1 (string projectid);

        /// <summary>
        /// Create a new layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ApiResponse of PhoenixLayoutEntity</returns>
        ApiResponse<PhoenixLayoutEntity> CreateLayout1WithHttpInfo (string projectid);
        /// <summary>
        /// Create new product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity CreateProduct1 (string projectid, AddProductEntity body = null);

        /// <summary>
        /// Create new product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> CreateProduct1WithHttpInfo (string projectid, AddProductEntity body = null);
        /// <summary>
        /// Close the project with ID of {projectid}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity DeleteJob1 (string projectid);

        /// <summary>
        /// Close the project with ID of {projectid}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> DeleteJob1WithHttpInfo (string projectid);
        /// <summary>
        /// Delete layout from the project by index
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity DeleteLayout1 (int? layoutindex, string projectid);

        /// <summary>
        /// Delete layout from the project by index
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> DeleteLayout1WithHttpInfo (int? layoutindex, string projectid);
        /// <summary>
        /// Delete output project files from this project with specific file ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileid">ID of uploaded project file to get</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity DeleteOutputFile1 (string fileid, string projectid);

        /// <summary>
        /// Delete output project files from this project with specific file ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileid">ID of uploaded project file to get</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> DeleteOutputFile1WithHttpInfo (string fileid, string projectid);
        /// <summary>
        /// Delete product with name {productname} from the project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productname"></param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity DeleteProduct1 (string productname, string projectid);

        /// <summary>
        /// Delete product with name {productname} from the project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productname"></param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> DeleteProduct1WithHttpInfo (string productname, string projectid);
        /// <summary>
        /// Delete uploaded project file from this project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileid">ID of uploaded project file to get</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity DeleteUploadedFile1 (string fileid, string projectid);

        /// <summary>
        /// Delete uploaded project file from this project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileid">ID of uploaded project file to get</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> DeleteUploadedFile1WithHttpInfo (string fileid, string projectid);
        /// <summary>
        /// Download specific output file content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileid">ID of output project file to get</param>
        /// <param name="filepath">Relative path of specific file contents to download</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>List&lt;byte[]&gt;</returns>
        List<byte[]> DownloadOutputFile1 (string fileid, string filepath, string projectid);

        /// <summary>
        /// Download specific output file content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileid">ID of output project file to get</param>
        /// <param name="filepath">Relative path of specific file contents to download</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ApiResponse of List&lt;byte[]&gt;</returns>
        ApiResponse<List<byte[]>> DownloadOutputFile1WithHttpInfo (string fileid, string filepath, string projectid);
        /// <summary>
        /// Download specific uploaded file content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileid">ID of uploaded project file to get</param>
        /// <param name="filepath">Relative path of specific file contents to download</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>List&lt;byte[]&gt;</returns>
        List<byte[]> DownloadUploadedFile1 (string fileid, string filepath, string projectid);

        /// <summary>
        /// Download specific uploaded file content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileid">ID of uploaded project file to get</param>
        /// <param name="filepath">Relative path of specific file contents to download</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ApiResponse of List&lt;byte[]&gt;</returns>
        ApiResponse<List<byte[]>> DownloadUploadedFile1WithHttpInfo (string fileid, string filepath, string projectid);
        /// <summary>
        /// Edit layout properties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity EditLayout1 (int? layoutindex, string projectid, EditLayoutResource body = null);

        /// <summary>
        /// Edit layout properties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> EditLayout1WithHttpInfo (int? layoutindex, string projectid, EditLayoutResource body = null);
        /// <summary>
        /// Export CFF2 Die Layout of current project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity ExportCff2DieLayout (string projectid, ExportCff2LayoutResource body = null);

        /// <summary>
        /// Export CFF2 Die Layout of current project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> ExportCff2DieLayoutWithHttpInfo (string projectid, ExportCff2LayoutResource body = null);
        /// <summary>
        /// Export layout cover sheet(s) of the given project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity ExportCoverSheet (string projectid, ExportCoverSheetResource body = null);

        /// <summary>
        /// Export layout cover sheet(s) of the given project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> ExportCoverSheetWithHttpInfo (string projectid, ExportCoverSheetResource body = null);
        /// <summary>
        /// Export JDF Cutting Data of the given project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity ExportCuttingJdf (string projectid, ExportCuttingJdfResource body = null);

        /// <summary>
        /// Export JDF Cutting Data of the given project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> ExportCuttingJdfWithHttpInfo (string projectid, ExportCuttingJdfResource body = null);
        /// <summary>
        /// Export DXF Die Layout of current project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity ExportDxfDieLayout (string projectid, ExportDxfLayoutResource body = null);

        /// <summary>
        /// Export DXF Die Layout of current project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> ExportDxfDieLayoutWithHttpInfo (string projectid, ExportDxfLayoutResource body = null);
        /// <summary>
        /// Export HP JDF of the given project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity ExportHpJdf (string projectid, ExportHpJdfResource body = null);

        /// <summary>
        /// Export HP JDF of the given project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> ExportHpJdfWithHttpInfo (string projectid, ExportHpJdfResource body = null);
        /// <summary>
        /// Export Layout JDF of the given project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity ExportImposedJdf (string projectid, ExportJdfResource body = null);

        /// <summary>
        /// Export Layout JDF of the given project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> ExportImposedJdfWithHttpInfo (string projectid, ExportJdfResource body = null);
        /// <summary>
        /// Export Layout PDF of current project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity ExportImposedPdf (string projectid, ExportPdfResource body = null);

        /// <summary>
        /// Export Layout PDF of current project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> ExportImposedPdfWithHttpInfo (string projectid, ExportPdfResource body = null);
        /// <summary>
        /// Export JSON Project Report of the given project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity ExportJsonReport1 (string projectid, ExportJsonReportResource body = null);

        /// <summary>
        /// Export JSON Project Report of the given project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> ExportJsonReport1WithHttpInfo (string projectid, ExportJsonReportResource body = null);
        /// <summary>
        /// Export PDF Die Layout of current project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity ExportPdfDieLayout (string projectid, ExportPdfLayoutResource body = null);

        /// <summary>
        /// Export PDF Die Layout of current project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> ExportPdfDieLayoutWithHttpInfo (string projectid, ExportPdfLayoutResource body = null);
        /// <summary>
        /// Export PDF Project Report of the given project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity ExportPdfReport (string projectid, ExportPdfReportResource body = null);

        /// <summary>
        /// Export PDF Project Report of the given project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> ExportPdfReportWithHttpInfo (string projectid, ExportPdfReportResource body = null);
        /// <summary>
        /// Export Tiling report of the given product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productname"></param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity ExportProductTilingReport (string productname, string projectid, ExportTilingReportResource body = null);

        /// <summary>
        /// Export Tiling report of the given product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productname"></param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> ExportProductTilingReportWithHttpInfo (string productname, string projectid, ExportTilingReportResource body = null);
        /// <summary>
        /// Export Tiling report of the given project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity ExportTilingReport (string projectid, ExportTilingReportResource body = null);

        /// <summary>
        /// Export Tiling report of the given project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> ExportTilingReportWithHttpInfo (string projectid, ExportTilingReportResource body = null);
        /// <summary>
        /// Export Vector Separation of the given project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity ExportVectorPdf (string projectid, ExportVectorSeparationResource body = null);

        /// <summary>
        /// Export Vector Separation of the given project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> ExportVectorPdfWithHttpInfo (string projectid, ExportVectorSeparationResource body = null);
        /// <summary>
        /// Export XML Project Report of the given project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity ExportXmlReport1 (string projectid, ExportXmlReportResource body = null);

        /// <summary>
        /// Export XML Project Report of the given project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> ExportXmlReport1WithHttpInfo (string projectid, ExportXmlReportResource body = null);
        /// <summary>
        /// Export Zund Cut Center Layout of current project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity ExportZcc (string projectid, ExportZccLayoutResource body = null);

        /// <summary>
        /// Export Zund Cut Center Layout of current project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> ExportZccWithHttpInfo (string projectid, ExportZccLayoutResource body = null);
        /// <summary>
        /// A single Impose result by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="resultid">ID of result to retrieve</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>LayoutResultEntity</returns>
        LayoutResultEntity GetImposeResult1 (int? layoutindex, int? resultid, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);

        /// <summary>
        /// A single Impose result by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="resultid">ID of result to retrieve</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>ApiResponse of LayoutResultEntity</returns>
        ApiResponse<LayoutResultEntity> GetImposeResult1WithHttpInfo (int? layoutindex, int? resultid, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);
        /// <summary>
        /// A list of most recent Impose results
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Include thumbnail images or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>List&lt;LayoutResultEntity&gt;</returns>
        List<LayoutResultEntity> GetImposeResults1 (int? layoutindex, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);

        /// <summary>
        /// A list of most recent Impose results
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Include thumbnail images or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>ApiResponse of List&lt;LayoutResultEntity&gt;</returns>
        ApiResponse<List<LayoutResultEntity>> GetImposeResults1WithHttpInfo (int? layoutindex, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);
        /// <summary>
        /// Get project at current {projectid}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="productVersion">Product model version (optional, default to V1)</param>
        /// <returns>PhoenixProject</returns>
        PhoenixProject GetJob1 (string projectid, string productVersion = null);

        /// <summary>
        /// Get project at current {projectid}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="productVersion">Product model version (optional, default to V1)</param>
        /// <returns>ApiResponse of PhoenixProject</returns>
        ApiResponse<PhoenixProject> GetJob1WithHttpInfo (string projectid, string productVersion = null);
        /// <summary>
        /// Get a list of all projects
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PhoenixProject&gt;</returns>
        List<PhoenixProject> GetJobs ();

        /// <summary>
        /// Get a list of all projects
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PhoenixProject&gt;</returns>
        ApiResponse<List<PhoenixProject>> GetJobsWithHttpInfo ();
        /// <summary>
        /// Get project layout by index
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="frontThumb">Whether to include thumbnail image of the front surface of this layout (optional, default to false)</param>
        /// <param name="backThumb">Whether to include thumbnail image of the back surface of this layout (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image(s) (optional, default to Colors)</param>
        /// <returns>PhoenixLayoutEntity</returns>
        PhoenixLayoutEntity GetLayout1 (int? layoutindex, string projectid, bool? frontThumb = null, bool? backThumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);

        /// <summary>
        /// Get project layout by index
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="frontThumb">Whether to include thumbnail image of the front surface of this layout (optional, default to false)</param>
        /// <param name="backThumb">Whether to include thumbnail image of the back surface of this layout (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image(s) (optional, default to Colors)</param>
        /// <returns>ApiResponse of PhoenixLayoutEntity</returns>
        ApiResponse<PhoenixLayoutEntity> GetLayout1WithHttpInfo (int? layoutindex, string projectid, bool? frontThumb = null, bool? backThumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);
        /// <summary>
        /// Get back side of layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Whether to include thumbnail image of surface (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>SurfaceEntity</returns>
        SurfaceEntity GetLayoutBack1 (int? layoutindex, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);

        /// <summary>
        /// Get back side of layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Whether to include thumbnail image of surface (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>ApiResponse of SurfaceEntity</returns>
        ApiResponse<SurfaceEntity> GetLayoutBack1WithHttpInfo (int? layoutindex, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);
        /// <summary>
        /// Get front side of layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Whether to include thumbnail image of surface (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>SurfaceEntity</returns>
        SurfaceEntity GetLayoutFront1 (int? layoutindex, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);

        /// <summary>
        /// Get front side of layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Whether to include thumbnail image of surface (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>ApiResponse of SurfaceEntity</returns>
        ApiResponse<SurfaceEntity> GetLayoutFront1WithHttpInfo (int? layoutindex, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);
        /// <summary>
        /// Get layout plate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>PlateEntity</returns>
        PlateEntity GetLayoutPlate1 (int? layoutindex, string projectid);

        /// <summary>
        /// Get layout plate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ApiResponse of PlateEntity</returns>
        ApiResponse<PlateEntity> GetLayoutPlate1WithHttpInfo (int? layoutindex, string projectid);
        /// <summary>
        /// Get layout press
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>PressEntity</returns>
        PressEntity GetLayoutPress1 (int? layoutindex, string projectid);

        /// <summary>
        /// Get layout press
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ApiResponse of PressEntity</returns>
        ApiResponse<PressEntity> GetLayoutPress1WithHttpInfo (int? layoutindex, string projectid);
        /// <summary>
        /// Get layout sheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>SheetEntity</returns>
        SheetEntity GetLayoutSheet1 (int? layoutindex, string projectid);

        /// <summary>
        /// Get layout sheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ApiResponse of SheetEntity</returns>
        ApiResponse<SheetEntity> GetLayoutSheet1WithHttpInfo (int? layoutindex, string projectid);
        /// <summary>
        /// Get list of all layouts in the project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="frontThumb">Whether to include thumbnail images of the front surfaces of the layouts (optional, default to false)</param>
        /// <param name="backThumb">Whether to include thumbnail images of the back surfaces of the layouts (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail images (optional, default to Colors)</param>
        /// <returns>List&lt;PhoenixLayoutEntity&gt;</returns>
        List<PhoenixLayoutEntity> GetLayouts1 (string projectid, bool? frontThumb = null, bool? backThumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);

        /// <summary>
        /// Get list of all layouts in the project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="frontThumb">Whether to include thumbnail images of the front surfaces of the layouts (optional, default to false)</param>
        /// <param name="backThumb">Whether to include thumbnail images of the back surfaces of the layouts (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail images (optional, default to Colors)</param>
        /// <returns>ApiResponse of List&lt;PhoenixLayoutEntity&gt;</returns>
        ApiResponse<List<PhoenixLayoutEntity>> GetLayouts1WithHttpInfo (string projectid, bool? frontThumb = null, bool? backThumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);
        /// <summary>
        /// A single Optimize result by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="resultid">ID of result to retrieve</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>LayoutResultEntity</returns>
        LayoutResultEntity GetOptimizeResult1 (int? layoutindex, int? resultid, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);

        /// <summary>
        /// A single Optimize result by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="resultid">ID of result to retrieve</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>ApiResponse of LayoutResultEntity</returns>
        ApiResponse<LayoutResultEntity> GetOptimizeResult1WithHttpInfo (int? layoutindex, int? resultid, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);
        /// <summary>
        /// A list of most recent Optimize results
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Include thumbnail images or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>List&lt;LayoutResultEntity&gt;</returns>
        List<LayoutResultEntity> GetOptimizeResults1 (int? layoutindex, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);

        /// <summary>
        /// A list of most recent Optimize results
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Include thumbnail images or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>ApiResponse of List&lt;LayoutResultEntity&gt;</returns>
        ApiResponse<List<LayoutResultEntity>> GetOptimizeResults1WithHttpInfo (int? layoutindex, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);
        /// <summary>
        /// Get output project file by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileid">ID of output project file to get</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>JobFilesEntity</returns>
        JobFilesEntity GetOutputFile1 (string fileid, string projectid);

        /// <summary>
        /// Get output project file by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileid">ID of output project file to get</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ApiResponse of JobFilesEntity</returns>
        ApiResponse<JobFilesEntity> GetOutputFile1WithHttpInfo (string fileid, string projectid);
        /// <summary>
        /// Get all output files currently saved to this project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <returns>List&lt;JobFilesEntity&gt;</returns>
        List<JobFilesEntity> GetOutputFiles1 (string projectid);

        /// <summary>
        /// Get all output files currently saved to this project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ApiResponse of List&lt;JobFilesEntity&gt;</returns>
        ApiResponse<List<JobFilesEntity>> GetOutputFiles1WithHttpInfo (string projectid);
        /// <summary>
        /// A single plan result by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resultid">ID of result to retrieve</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="layouts">Include individual layout results (optional, default to false)</param>
        /// <param name="thumb">Include thumbnail images in layout results or not (optional, default to false)</param>
        /// <param name="planThumb">Include composite thumbnail image of layouts in plan result or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in layout result thumbnail images (optional, default to Colors)</param>
        /// <returns>PlanResultEntity</returns>
        PlanResultEntity GetPlanResult1 (int? resultid, string projectid, bool? layouts = null, bool? thumb = null, bool? planThumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);

        /// <summary>
        /// A single plan result by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resultid">ID of result to retrieve</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="layouts">Include individual layout results (optional, default to false)</param>
        /// <param name="thumb">Include thumbnail images in layout results or not (optional, default to false)</param>
        /// <param name="planThumb">Include composite thumbnail image of layouts in plan result or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in layout result thumbnail images (optional, default to Colors)</param>
        /// <returns>ApiResponse of PlanResultEntity</returns>
        ApiResponse<PlanResultEntity> GetPlanResult1WithHttpInfo (int? resultid, string projectid, bool? layouts = null, bool? thumb = null, bool? planThumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);
        /// <summary>
        /// A list of most recent Plan results
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="limit">Optional limit to number of results returned.  0 or not-specified signifies return all results. (optional, default to 0)</param>
        /// <param name="start">Optional 1-based start index of results after sorting (optional, default to 0)</param>
        /// <param name="sorting">Optional sorting to control order of results.  By default results are sorted by lowest cost first. (optional, default to Cost)</param>
        /// <param name="layouts">Include individual layout results (optional, default to false)</param>
        /// <param name="thumb">Include individual thumbnail images in layout results or not (optional, default to false)</param>
        /// <param name="planThumb">Include composite thumbnail image of layouts in plan result or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in layout result thumbnail images.  Note: Artwork rendering can be compute intensive and result in slow response times, especially when there are many results being returned. (optional, default to Colors)</param>
        /// <returns>List&lt;PlanResultEntity&gt;</returns>
        List<PlanResultEntity> GetPlanResults1 (string projectid, int? limit = null, int? start = null, string sorting = null, bool? layouts = null, bool? thumb = null, bool? planThumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);

        /// <summary>
        /// A list of most recent Plan results
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="limit">Optional limit to number of results returned.  0 or not-specified signifies return all results. (optional, default to 0)</param>
        /// <param name="start">Optional 1-based start index of results after sorting (optional, default to 0)</param>
        /// <param name="sorting">Optional sorting to control order of results.  By default results are sorted by lowest cost first. (optional, default to Cost)</param>
        /// <param name="layouts">Include individual layout results (optional, default to false)</param>
        /// <param name="thumb">Include individual thumbnail images in layout results or not (optional, default to false)</param>
        /// <param name="planThumb">Include composite thumbnail image of layouts in plan result or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in layout result thumbnail images.  Note: Artwork rendering can be compute intensive and result in slow response times, especially when there are many results being returned. (optional, default to Colors)</param>
        /// <returns>ApiResponse of List&lt;PlanResultEntity&gt;</returns>
        ApiResponse<List<PlanResultEntity>> GetPlanResults1WithHttpInfo (string projectid, int? limit = null, int? start = null, string sorting = null, bool? layouts = null, bool? thumb = null, bool? planThumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);
        /// <summary>
        /// A single Populate result by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="resultid">ID of result to retrieve</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>LayoutResultEntity</returns>
        LayoutResultEntity GetPopulateResult1 (int? layoutindex, int? resultid, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);

        /// <summary>
        /// A single Populate result by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="resultid">ID of result to retrieve</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>ApiResponse of LayoutResultEntity</returns>
        ApiResponse<LayoutResultEntity> GetPopulateResult1WithHttpInfo (int? layoutindex, int? resultid, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);
        /// <summary>
        /// A list of most recent Populate results
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Include thumbnail images or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>List&lt;LayoutResultEntity&gt;</returns>
        List<LayoutResultEntity> GetPopulateResults1 (int? layoutindex, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);

        /// <summary>
        /// A list of most recent Populate results
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Include thumbnail images or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>ApiResponse of List&lt;LayoutResultEntity&gt;</returns>
        ApiResponse<List<LayoutResultEntity>> GetPopulateResults1WithHttpInfo (int? layoutindex, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);
        /// <summary>
        /// Get product with name of {productname}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productname"></param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Whether to include thumbnail image of product (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>PhoenixProductEntity</returns>
        PhoenixProductEntity GetProduct1 (string productname, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);

        /// <summary>
        /// Get product with name of {productname}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productname"></param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Whether to include thumbnail image of product (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>ApiResponse of PhoenixProductEntity</returns>
        ApiResponse<PhoenixProductEntity> GetProduct1WithHttpInfo (string productname, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);
        /// <summary>
        /// Get all products of the current project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Whether to include thumbnail image of products (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail images (optional, default to Colors)</param>
        /// <returns>List&lt;PhoenixProductEntity&gt;</returns>
        List<PhoenixProductEntity> GetProducts1 (string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);

        /// <summary>
        /// Get all products of the current project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Whether to include thumbnail image of products (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail images (optional, default to Colors)</param>
        /// <returns>ApiResponse of List&lt;PhoenixProductEntity&gt;</returns>
        ApiResponse<List<PhoenixProductEntity>> GetProducts1WithHttpInfo (string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);
        /// <summary>
        /// Get uploaded project file by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileid">ID of uploaded project file to get</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>JobFilesEntity</returns>
        JobFilesEntity GetUploadedFile1 (string fileid, string projectid);

        /// <summary>
        /// Get uploaded project file by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileid">ID of uploaded project file to get</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ApiResponse of JobFilesEntity</returns>
        ApiResponse<JobFilesEntity> GetUploadedFile1WithHttpInfo (string fileid, string projectid);
        /// <summary>
        /// Get all files currently uploaded to this project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <returns>List&lt;JobFilesEntity&gt;</returns>
        List<JobFilesEntity> GetUploadedFiles1 (string projectid);

        /// <summary>
        /// Get all files currently uploaded to this project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ApiResponse of List&lt;JobFilesEntity&gt;</returns>
        ApiResponse<List<JobFilesEntity>> GetUploadedFiles1WithHttpInfo (string projectid);
        /// <summary>
        /// Import die template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity ImportDieTemplate1 (string projectid, ImportDieTemplateResource body = null);

        /// <summary>
        /// Import die template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> ImportDieTemplate1WithHttpInfo (string projectid, ImportDieTemplateResource body = null);
        /// <summary>
        /// Import products from CSV file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity ImportProductCsv (string projectid, ImportProductCsvResource body = null);

        /// <summary>
        /// Import products from CSV file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> ImportProductCsvWithHttpInfo (string projectid, ImportProductCsvResource body = null);
        /// <summary>
        /// Run Impose tool to generate layouts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity Impose1 (int? layoutindex, string projectid, ImposeResource body = null);

        /// <summary>
        /// Run Impose tool to generate layouts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> Impose1WithHttpInfo (int? layoutindex, string projectid, ImposeResource body = null);
        /// <summary>
        /// Open existing project file
        /// </summary>
        /// <remarks>
        /// The file needs to be updated via form data.  The filename content disposition header excluding filename extension is used to define the project ID if present, otherwise the existing project ID in the project is used.
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity OpenJob (FormDataContentDisposition file = null);

        /// <summary>
        /// Open existing project file
        /// </summary>
        /// <remarks>
        /// The file needs to be updated via form data.  The filename content disposition header excluding filename extension is used to define the project ID if present, otherwise the existing project ID in the project is used.
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> OpenJobWithHttpInfo (FormDataContentDisposition file = null);
        /// <summary>
        /// Run Optimize tool to generate layouts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity Optimize1 (int? layoutindex, string projectid, OptimizeResource body = null);

        /// <summary>
        /// Run Optimize tool to generate layouts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> Optimize1WithHttpInfo (int? layoutindex, string projectid, OptimizeResource body = null);
        /// <summary>
        /// Place die template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity PlaceDieTemplate (int? layoutindex, string projectid, PlaceDieTemplateResource body = null);

        /// <summary>
        /// Place die template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> PlaceDieTemplateWithHttpInfo (int? layoutindex, string projectid, PlaceDieTemplateResource body = null);
        /// <summary>
        /// Run Plan tool to generate project plans
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity Plan1 (string projectid, PlanResource body = null);

        /// <summary>
        /// Run Plan tool to generate project plans
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> Plan1WithHttpInfo (string projectid, PlanResource body = null);
        /// <summary>
        /// Start running Plan tool asynchronously to generate project plans
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity PlanStart1 (string projectid, PlanResource body = null);

        /// <summary>
        /// Start running Plan tool asynchronously to generate project plans
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> PlanStart1WithHttpInfo (string projectid, PlanResource body = null);
        /// <summary>
        /// Get current plan tool running status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <returns>PlanStatusEntity</returns>
        PlanStatusEntity PlanStatus1 (string projectid);

        /// <summary>
        /// Get current plan tool running status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ApiResponse of PlanStatusEntity</returns>
        ApiResponse<PlanStatusEntity> PlanStatus1WithHttpInfo (string projectid);
        /// <summary>
        /// Stop plan tool if it is currently running
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity PlanStop1 (string projectid);

        /// <summary>
        /// Stop plan tool if it is currently running
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> PlanStop1WithHttpInfo (string projectid);
        /// <summary>
        /// Run Populate tool to generate layouts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity Populate1 (int? layoutindex, string projectid, PopulateResource body = null);

        /// <summary>
        /// Run Populate tool to generate layouts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> Populate1WithHttpInfo (int? layoutindex, string projectid, PopulateResource body = null);
        /// <summary>
        /// Resize layout sheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity ResizeLayoutSheet1 (int? layoutindex, string projectid, ResizeSheetResource body = null);

        /// <summary>
        /// Resize layout sheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> ResizeLayoutSheet1WithHttpInfo (int? layoutindex, string projectid, ResizeSheetResource body = null);
        /// <summary>
        /// Run a script on the current project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity Run (string projectid, RunScriptResource body = null);

        /// <summary>
        /// Run a script on the current project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> RunWithHttpInfo (string projectid, RunScriptResource body = null);
        /// <summary>
        /// Save project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void SaveJob1 (string projectid, SaveJobResource body = null);

        /// <summary>
        /// Save project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SaveJob1WithHttpInfo (string projectid, SaveJobResource body = null);
        /// <summary>
        /// Save project template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity SaveJobTemplate (string projectid, SaveJobTemplateResource body = null);

        /// <summary>
        /// Save project template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> SaveJobTemplateWithHttpInfo (string projectid, SaveJobTemplateResource body = null);
        /// <summary>
        /// Set layout plate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity SetLayoutPlate1 (int? layoutindex, string projectid, SetPlateResource body = null);

        /// <summary>
        /// Set layout plate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> SetLayoutPlate1WithHttpInfo (int? layoutindex, string projectid, SetPlateResource body = null);
        /// <summary>
        /// Set layout press
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity SetLayoutPress1 (int? layoutindex, string projectid, SetPressResource body = null);

        /// <summary>
        /// Set layout press
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> SetLayoutPress1WithHttpInfo (int? layoutindex, string projectid, SetPressResource body = null);
        /// <summary>
        /// Set layout sheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity SetLayoutSheet1 (int? layoutindex, string projectid, SetSheetResource body = null);

        /// <summary>
        /// Set layout sheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> SetLayoutSheet1WithHttpInfo (int? layoutindex, string projectid, SetSheetResource body = null);
        /// <summary>
        /// Snap artwork to products or die numbers in project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity Snap (string projectid, AutosnapResource body = null);

        /// <summary>
        /// Snap artwork to products or die numbers in project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> SnapWithHttpInfo (string projectid, AutosnapResource body = null);
        /// <summary>
        /// Snap artwork to a given side of the product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productname"></param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity SnapProduct (string productname, string projectid, AutosnapArtworkEntity body = null);

        /// <summary>
        /// Snap artwork to a given side of the product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productname"></param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> SnapProductWithHttpInfo (string productname, string projectid, AutosnapArtworkEntity body = null);
        /// <summary>
        /// Generate step and repeat group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity StepRepeat (int? layoutindex, string projectid, StepRepeatResource body = null);

        /// <summary>
        /// Generate step and repeat group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> StepRepeatWithHttpInfo (int? layoutindex, string projectid, StepRepeatResource body = null);
        /// <summary>
        /// Upload new file to project
        /// </summary>
        /// <remarks>
        /// The URI returned in the response entity can be used to download the file content directly or referred to when adding products.
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="file"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        ResponseEntity UploadFile1 (string projectid, FormDataContentDisposition file = null);

        /// <summary>
        /// Upload new file to project
        /// </summary>
        /// <remarks>
        /// The URI returned in the response entity can be used to download the file content directly or referred to when adding products.
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="file"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        ApiResponse<ResponseEntity> UploadFile1WithHttpInfo (string projectid, FormDataContentDisposition file = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Apply result from most recent Impose run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="resultid">Id of result to apply</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> ApplyImposeResult1Async (int? layoutindex, int? resultid, string projectid);

        /// <summary>
        /// Apply result from most recent Impose run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="resultid">Id of result to apply</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ApplyImposeResult1AsyncWithHttpInfo (int? layoutindex, int? resultid, string projectid);
        /// <summary>
        /// Apply result from most recent Optimize run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="resultid">Id of result to apply</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> ApplyOptimizeResult1Async (int? layoutindex, int? resultid, string projectid);

        /// <summary>
        /// Apply result from most recent Optimize run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="resultid">Id of result to apply</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ApplyOptimizeResult1AsyncWithHttpInfo (int? layoutindex, int? resultid, string projectid);
        /// <summary>
        /// Apply result from most recent plan run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resultid">Id of result to apply</param>
        /// <param name="start">First layout to apply from plan starting from 1</param>
        /// <param name="end">Last layout to apply from plan</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> ApplyPartialPlan1Async (int? resultid, int? start, int? end, string projectid);

        /// <summary>
        /// Apply result from most recent plan run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resultid">Id of result to apply</param>
        /// <param name="start">First layout to apply from plan starting from 1</param>
        /// <param name="end">Last layout to apply from plan</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ApplyPartialPlan1AsyncWithHttpInfo (int? resultid, int? start, int? end, string projectid);
        /// <summary>
        /// Apply result from most recent plan run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resultid">Id of result to apply</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> ApplyPlanResult1Async (int? resultid, string projectid);

        /// <summary>
        /// Apply result from most recent plan run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resultid">Id of result to apply</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ApplyPlanResult1AsyncWithHttpInfo (int? resultid, string projectid);
        /// <summary>
        /// Apply result from most recent Populate run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="resultid">Id of result to apply</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> ApplyPopulateResult1Async (int? layoutindex, int? resultid, string projectid);

        /// <summary>
        /// Apply result from most recent Populate run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="resultid">Id of result to apply</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ApplyPopulateResult1AsyncWithHttpInfo (int? layoutindex, int? resultid, string projectid);
        /// <summary>
        /// Apply a smart product mark to this product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productname"></param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> ApplyProductMarkAsync (string productname, string projectid, ApplyMarkResource body = null);

        /// <summary>
        /// Apply a smart product mark to this product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productname"></param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ApplyProductMarkAsyncWithHttpInfo (string productname, string projectid, ApplyMarkResource body = null);
        /// <summary>
        /// Create a new project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> CreateJobAsync (CreateJobResource body = null);

        /// <summary>
        /// Create a new project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> CreateJobAsyncWithHttpInfo (CreateJobResource body = null);
        /// <summary>
        /// Create a new layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of PhoenixLayoutEntity</returns>
        System.Threading.Tasks.Task<PhoenixLayoutEntity> CreateLayout1Async (string projectid);

        /// <summary>
        /// Create a new layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ApiResponse (PhoenixLayoutEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<PhoenixLayoutEntity>> CreateLayout1AsyncWithHttpInfo (string projectid);
        /// <summary>
        /// Create new product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> CreateProduct1Async (string projectid, AddProductEntity body = null);

        /// <summary>
        /// Create new product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> CreateProduct1AsyncWithHttpInfo (string projectid, AddProductEntity body = null);
        /// <summary>
        /// Close the project with ID of {projectid}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> DeleteJob1Async (string projectid);

        /// <summary>
        /// Close the project with ID of {projectid}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> DeleteJob1AsyncWithHttpInfo (string projectid);
        /// <summary>
        /// Delete layout from the project by index
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> DeleteLayout1Async (int? layoutindex, string projectid);

        /// <summary>
        /// Delete layout from the project by index
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> DeleteLayout1AsyncWithHttpInfo (int? layoutindex, string projectid);
        /// <summary>
        /// Delete output project files from this project with specific file ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileid">ID of uploaded project file to get</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> DeleteOutputFile1Async (string fileid, string projectid);

        /// <summary>
        /// Delete output project files from this project with specific file ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileid">ID of uploaded project file to get</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> DeleteOutputFile1AsyncWithHttpInfo (string fileid, string projectid);
        /// <summary>
        /// Delete product with name {productname} from the project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productname"></param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> DeleteProduct1Async (string productname, string projectid);

        /// <summary>
        /// Delete product with name {productname} from the project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productname"></param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> DeleteProduct1AsyncWithHttpInfo (string productname, string projectid);
        /// <summary>
        /// Delete uploaded project file from this project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileid">ID of uploaded project file to get</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> DeleteUploadedFile1Async (string fileid, string projectid);

        /// <summary>
        /// Delete uploaded project file from this project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileid">ID of uploaded project file to get</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> DeleteUploadedFile1AsyncWithHttpInfo (string fileid, string projectid);
        /// <summary>
        /// Download specific output file content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileid">ID of output project file to get</param>
        /// <param name="filepath">Relative path of specific file contents to download</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of List&lt;byte[]&gt;</returns>
        System.Threading.Tasks.Task<List<byte[]>> DownloadOutputFile1Async (string fileid, string filepath, string projectid);

        /// <summary>
        /// Download specific output file content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileid">ID of output project file to get</param>
        /// <param name="filepath">Relative path of specific file contents to download</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ApiResponse (List&lt;byte[]&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<byte[]>>> DownloadOutputFile1AsyncWithHttpInfo (string fileid, string filepath, string projectid);
        /// <summary>
        /// Download specific uploaded file content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileid">ID of uploaded project file to get</param>
        /// <param name="filepath">Relative path of specific file contents to download</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of List&lt;byte[]&gt;</returns>
        System.Threading.Tasks.Task<List<byte[]>> DownloadUploadedFile1Async (string fileid, string filepath, string projectid);

        /// <summary>
        /// Download specific uploaded file content
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileid">ID of uploaded project file to get</param>
        /// <param name="filepath">Relative path of specific file contents to download</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ApiResponse (List&lt;byte[]&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<byte[]>>> DownloadUploadedFile1AsyncWithHttpInfo (string fileid, string filepath, string projectid);
        /// <summary>
        /// Edit layout properties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> EditLayout1Async (int? layoutindex, string projectid, EditLayoutResource body = null);

        /// <summary>
        /// Edit layout properties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> EditLayout1AsyncWithHttpInfo (int? layoutindex, string projectid, EditLayoutResource body = null);
        /// <summary>
        /// Export CFF2 Die Layout of current project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> ExportCff2DieLayoutAsync (string projectid, ExportCff2LayoutResource body = null);

        /// <summary>
        /// Export CFF2 Die Layout of current project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ExportCff2DieLayoutAsyncWithHttpInfo (string projectid, ExportCff2LayoutResource body = null);
        /// <summary>
        /// Export layout cover sheet(s) of the given project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> ExportCoverSheetAsync (string projectid, ExportCoverSheetResource body = null);

        /// <summary>
        /// Export layout cover sheet(s) of the given project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ExportCoverSheetAsyncWithHttpInfo (string projectid, ExportCoverSheetResource body = null);
        /// <summary>
        /// Export JDF Cutting Data of the given project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> ExportCuttingJdfAsync (string projectid, ExportCuttingJdfResource body = null);

        /// <summary>
        /// Export JDF Cutting Data of the given project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ExportCuttingJdfAsyncWithHttpInfo (string projectid, ExportCuttingJdfResource body = null);
        /// <summary>
        /// Export DXF Die Layout of current project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> ExportDxfDieLayoutAsync (string projectid, ExportDxfLayoutResource body = null);

        /// <summary>
        /// Export DXF Die Layout of current project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ExportDxfDieLayoutAsyncWithHttpInfo (string projectid, ExportDxfLayoutResource body = null);
        /// <summary>
        /// Export HP JDF of the given project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> ExportHpJdfAsync (string projectid, ExportHpJdfResource body = null);

        /// <summary>
        /// Export HP JDF of the given project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ExportHpJdfAsyncWithHttpInfo (string projectid, ExportHpJdfResource body = null);
        /// <summary>
        /// Export Layout JDF of the given project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> ExportImposedJdfAsync (string projectid, ExportJdfResource body = null);

        /// <summary>
        /// Export Layout JDF of the given project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ExportImposedJdfAsyncWithHttpInfo (string projectid, ExportJdfResource body = null);
        /// <summary>
        /// Export Layout PDF of current project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> ExportImposedPdfAsync (string projectid, ExportPdfResource body = null);

        /// <summary>
        /// Export Layout PDF of current project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ExportImposedPdfAsyncWithHttpInfo (string projectid, ExportPdfResource body = null);
        /// <summary>
        /// Export JSON Project Report of the given project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> ExportJsonReport1Async (string projectid, ExportJsonReportResource body = null);

        /// <summary>
        /// Export JSON Project Report of the given project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ExportJsonReport1AsyncWithHttpInfo (string projectid, ExportJsonReportResource body = null);
        /// <summary>
        /// Export PDF Die Layout of current project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> ExportPdfDieLayoutAsync (string projectid, ExportPdfLayoutResource body = null);

        /// <summary>
        /// Export PDF Die Layout of current project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ExportPdfDieLayoutAsyncWithHttpInfo (string projectid, ExportPdfLayoutResource body = null);
        /// <summary>
        /// Export PDF Project Report of the given project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> ExportPdfReportAsync (string projectid, ExportPdfReportResource body = null);

        /// <summary>
        /// Export PDF Project Report of the given project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ExportPdfReportAsyncWithHttpInfo (string projectid, ExportPdfReportResource body = null);
        /// <summary>
        /// Export Tiling report of the given product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productname"></param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> ExportProductTilingReportAsync (string productname, string projectid, ExportTilingReportResource body = null);

        /// <summary>
        /// Export Tiling report of the given product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productname"></param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ExportProductTilingReportAsyncWithHttpInfo (string productname, string projectid, ExportTilingReportResource body = null);
        /// <summary>
        /// Export Tiling report of the given project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> ExportTilingReportAsync (string projectid, ExportTilingReportResource body = null);

        /// <summary>
        /// Export Tiling report of the given project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ExportTilingReportAsyncWithHttpInfo (string projectid, ExportTilingReportResource body = null);
        /// <summary>
        /// Export Vector Separation of the given project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> ExportVectorPdfAsync (string projectid, ExportVectorSeparationResource body = null);

        /// <summary>
        /// Export Vector Separation of the given project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ExportVectorPdfAsyncWithHttpInfo (string projectid, ExportVectorSeparationResource body = null);
        /// <summary>
        /// Export XML Project Report of the given project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> ExportXmlReport1Async (string projectid, ExportXmlReportResource body = null);

        /// <summary>
        /// Export XML Project Report of the given project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ExportXmlReport1AsyncWithHttpInfo (string projectid, ExportXmlReportResource body = null);
        /// <summary>
        /// Export Zund Cut Center Layout of current project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> ExportZccAsync (string projectid, ExportZccLayoutResource body = null);

        /// <summary>
        /// Export Zund Cut Center Layout of current project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ExportZccAsyncWithHttpInfo (string projectid, ExportZccLayoutResource body = null);
        /// <summary>
        /// A single Impose result by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="resultid">ID of result to retrieve</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>Task of LayoutResultEntity</returns>
        System.Threading.Tasks.Task<LayoutResultEntity> GetImposeResult1Async (int? layoutindex, int? resultid, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);

        /// <summary>
        /// A single Impose result by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="resultid">ID of result to retrieve</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>Task of ApiResponse (LayoutResultEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<LayoutResultEntity>> GetImposeResult1AsyncWithHttpInfo (int? layoutindex, int? resultid, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);
        /// <summary>
        /// A list of most recent Impose results
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Include thumbnail images or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>Task of List&lt;LayoutResultEntity&gt;</returns>
        System.Threading.Tasks.Task<List<LayoutResultEntity>> GetImposeResults1Async (int? layoutindex, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);

        /// <summary>
        /// A list of most recent Impose results
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Include thumbnail images or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>Task of ApiResponse (List&lt;LayoutResultEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LayoutResultEntity>>> GetImposeResults1AsyncWithHttpInfo (int? layoutindex, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);
        /// <summary>
        /// Get project at current {projectid}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="productVersion">Product model version (optional, default to V1)</param>
        /// <returns>Task of PhoenixProject</returns>
        System.Threading.Tasks.Task<PhoenixProject> GetJob1Async (string projectid, string productVersion = null);

        /// <summary>
        /// Get project at current {projectid}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="productVersion">Product model version (optional, default to V1)</param>
        /// <returns>Task of ApiResponse (PhoenixProject)</returns>
        System.Threading.Tasks.Task<ApiResponse<PhoenixProject>> GetJob1AsyncWithHttpInfo (string projectid, string productVersion = null);
        /// <summary>
        /// Get a list of all projects
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PhoenixProject&gt;</returns>
        System.Threading.Tasks.Task<List<PhoenixProject>> GetJobsAsync ();

        /// <summary>
        /// Get a list of all projects
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PhoenixProject&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PhoenixProject>>> GetJobsAsyncWithHttpInfo ();
        /// <summary>
        /// Get project layout by index
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="frontThumb">Whether to include thumbnail image of the front surface of this layout (optional, default to false)</param>
        /// <param name="backThumb">Whether to include thumbnail image of the back surface of this layout (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image(s) (optional, default to Colors)</param>
        /// <returns>Task of PhoenixLayoutEntity</returns>
        System.Threading.Tasks.Task<PhoenixLayoutEntity> GetLayout1Async (int? layoutindex, string projectid, bool? frontThumb = null, bool? backThumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);

        /// <summary>
        /// Get project layout by index
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="frontThumb">Whether to include thumbnail image of the front surface of this layout (optional, default to false)</param>
        /// <param name="backThumb">Whether to include thumbnail image of the back surface of this layout (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image(s) (optional, default to Colors)</param>
        /// <returns>Task of ApiResponse (PhoenixLayoutEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<PhoenixLayoutEntity>> GetLayout1AsyncWithHttpInfo (int? layoutindex, string projectid, bool? frontThumb = null, bool? backThumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);
        /// <summary>
        /// Get back side of layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Whether to include thumbnail image of surface (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>Task of SurfaceEntity</returns>
        System.Threading.Tasks.Task<SurfaceEntity> GetLayoutBack1Async (int? layoutindex, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);

        /// <summary>
        /// Get back side of layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Whether to include thumbnail image of surface (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>Task of ApiResponse (SurfaceEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<SurfaceEntity>> GetLayoutBack1AsyncWithHttpInfo (int? layoutindex, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);
        /// <summary>
        /// Get front side of layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Whether to include thumbnail image of surface (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>Task of SurfaceEntity</returns>
        System.Threading.Tasks.Task<SurfaceEntity> GetLayoutFront1Async (int? layoutindex, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);

        /// <summary>
        /// Get front side of layout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Whether to include thumbnail image of surface (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>Task of ApiResponse (SurfaceEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<SurfaceEntity>> GetLayoutFront1AsyncWithHttpInfo (int? layoutindex, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);
        /// <summary>
        /// Get layout plate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of PlateEntity</returns>
        System.Threading.Tasks.Task<PlateEntity> GetLayoutPlate1Async (int? layoutindex, string projectid);

        /// <summary>
        /// Get layout plate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ApiResponse (PlateEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlateEntity>> GetLayoutPlate1AsyncWithHttpInfo (int? layoutindex, string projectid);
        /// <summary>
        /// Get layout press
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of PressEntity</returns>
        System.Threading.Tasks.Task<PressEntity> GetLayoutPress1Async (int? layoutindex, string projectid);

        /// <summary>
        /// Get layout press
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ApiResponse (PressEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<PressEntity>> GetLayoutPress1AsyncWithHttpInfo (int? layoutindex, string projectid);
        /// <summary>
        /// Get layout sheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of SheetEntity</returns>
        System.Threading.Tasks.Task<SheetEntity> GetLayoutSheet1Async (int? layoutindex, string projectid);

        /// <summary>
        /// Get layout sheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ApiResponse (SheetEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<SheetEntity>> GetLayoutSheet1AsyncWithHttpInfo (int? layoutindex, string projectid);
        /// <summary>
        /// Get list of all layouts in the project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="frontThumb">Whether to include thumbnail images of the front surfaces of the layouts (optional, default to false)</param>
        /// <param name="backThumb">Whether to include thumbnail images of the back surfaces of the layouts (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail images (optional, default to Colors)</param>
        /// <returns>Task of List&lt;PhoenixLayoutEntity&gt;</returns>
        System.Threading.Tasks.Task<List<PhoenixLayoutEntity>> GetLayouts1Async (string projectid, bool? frontThumb = null, bool? backThumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);

        /// <summary>
        /// Get list of all layouts in the project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="frontThumb">Whether to include thumbnail images of the front surfaces of the layouts (optional, default to false)</param>
        /// <param name="backThumb">Whether to include thumbnail images of the back surfaces of the layouts (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail images (optional, default to Colors)</param>
        /// <returns>Task of ApiResponse (List&lt;PhoenixLayoutEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PhoenixLayoutEntity>>> GetLayouts1AsyncWithHttpInfo (string projectid, bool? frontThumb = null, bool? backThumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);
        /// <summary>
        /// A single Optimize result by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="resultid">ID of result to retrieve</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>Task of LayoutResultEntity</returns>
        System.Threading.Tasks.Task<LayoutResultEntity> GetOptimizeResult1Async (int? layoutindex, int? resultid, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);

        /// <summary>
        /// A single Optimize result by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="resultid">ID of result to retrieve</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>Task of ApiResponse (LayoutResultEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<LayoutResultEntity>> GetOptimizeResult1AsyncWithHttpInfo (int? layoutindex, int? resultid, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);
        /// <summary>
        /// A list of most recent Optimize results
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Include thumbnail images or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>Task of List&lt;LayoutResultEntity&gt;</returns>
        System.Threading.Tasks.Task<List<LayoutResultEntity>> GetOptimizeResults1Async (int? layoutindex, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);

        /// <summary>
        /// A list of most recent Optimize results
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Include thumbnail images or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>Task of ApiResponse (List&lt;LayoutResultEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LayoutResultEntity>>> GetOptimizeResults1AsyncWithHttpInfo (int? layoutindex, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);
        /// <summary>
        /// Get output project file by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileid">ID of output project file to get</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of JobFilesEntity</returns>
        System.Threading.Tasks.Task<JobFilesEntity> GetOutputFile1Async (string fileid, string projectid);

        /// <summary>
        /// Get output project file by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileid">ID of output project file to get</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ApiResponse (JobFilesEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobFilesEntity>> GetOutputFile1AsyncWithHttpInfo (string fileid, string projectid);
        /// <summary>
        /// Get all output files currently saved to this project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of List&lt;JobFilesEntity&gt;</returns>
        System.Threading.Tasks.Task<List<JobFilesEntity>> GetOutputFiles1Async (string projectid);

        /// <summary>
        /// Get all output files currently saved to this project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ApiResponse (List&lt;JobFilesEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<JobFilesEntity>>> GetOutputFiles1AsyncWithHttpInfo (string projectid);
        /// <summary>
        /// A single plan result by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resultid">ID of result to retrieve</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="layouts">Include individual layout results (optional, default to false)</param>
        /// <param name="thumb">Include thumbnail images in layout results or not (optional, default to false)</param>
        /// <param name="planThumb">Include composite thumbnail image of layouts in plan result or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in layout result thumbnail images (optional, default to Colors)</param>
        /// <returns>Task of PlanResultEntity</returns>
        System.Threading.Tasks.Task<PlanResultEntity> GetPlanResult1Async (int? resultid, string projectid, bool? layouts = null, bool? thumb = null, bool? planThumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);

        /// <summary>
        /// A single plan result by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resultid">ID of result to retrieve</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="layouts">Include individual layout results (optional, default to false)</param>
        /// <param name="thumb">Include thumbnail images in layout results or not (optional, default to false)</param>
        /// <param name="planThumb">Include composite thumbnail image of layouts in plan result or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in layout result thumbnail images (optional, default to Colors)</param>
        /// <returns>Task of ApiResponse (PlanResultEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlanResultEntity>> GetPlanResult1AsyncWithHttpInfo (int? resultid, string projectid, bool? layouts = null, bool? thumb = null, bool? planThumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);
        /// <summary>
        /// A list of most recent Plan results
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="limit">Optional limit to number of results returned.  0 or not-specified signifies return all results. (optional, default to 0)</param>
        /// <param name="start">Optional 1-based start index of results after sorting (optional, default to 0)</param>
        /// <param name="sorting">Optional sorting to control order of results.  By default results are sorted by lowest cost first. (optional, default to Cost)</param>
        /// <param name="layouts">Include individual layout results (optional, default to false)</param>
        /// <param name="thumb">Include individual thumbnail images in layout results or not (optional, default to false)</param>
        /// <param name="planThumb">Include composite thumbnail image of layouts in plan result or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in layout result thumbnail images.  Note: Artwork rendering can be compute intensive and result in slow response times, especially when there are many results being returned. (optional, default to Colors)</param>
        /// <returns>Task of List&lt;PlanResultEntity&gt;</returns>
        System.Threading.Tasks.Task<List<PlanResultEntity>> GetPlanResults1Async (string projectid, int? limit = null, int? start = null, string sorting = null, bool? layouts = null, bool? thumb = null, bool? planThumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);

        /// <summary>
        /// A list of most recent Plan results
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="limit">Optional limit to number of results returned.  0 or not-specified signifies return all results. (optional, default to 0)</param>
        /// <param name="start">Optional 1-based start index of results after sorting (optional, default to 0)</param>
        /// <param name="sorting">Optional sorting to control order of results.  By default results are sorted by lowest cost first. (optional, default to Cost)</param>
        /// <param name="layouts">Include individual layout results (optional, default to false)</param>
        /// <param name="thumb">Include individual thumbnail images in layout results or not (optional, default to false)</param>
        /// <param name="planThumb">Include composite thumbnail image of layouts in plan result or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in layout result thumbnail images.  Note: Artwork rendering can be compute intensive and result in slow response times, especially when there are many results being returned. (optional, default to Colors)</param>
        /// <returns>Task of ApiResponse (List&lt;PlanResultEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PlanResultEntity>>> GetPlanResults1AsyncWithHttpInfo (string projectid, int? limit = null, int? start = null, string sorting = null, bool? layouts = null, bool? thumb = null, bool? planThumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);
        /// <summary>
        /// A single Populate result by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="resultid">ID of result to retrieve</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>Task of LayoutResultEntity</returns>
        System.Threading.Tasks.Task<LayoutResultEntity> GetPopulateResult1Async (int? layoutindex, int? resultid, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);

        /// <summary>
        /// A single Populate result by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="resultid">ID of result to retrieve</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>Task of ApiResponse (LayoutResultEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<LayoutResultEntity>> GetPopulateResult1AsyncWithHttpInfo (int? layoutindex, int? resultid, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);
        /// <summary>
        /// A list of most recent Populate results
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Include thumbnail images or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>Task of List&lt;LayoutResultEntity&gt;</returns>
        System.Threading.Tasks.Task<List<LayoutResultEntity>> GetPopulateResults1Async (int? layoutindex, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);

        /// <summary>
        /// A list of most recent Populate results
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Include thumbnail images or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>Task of ApiResponse (List&lt;LayoutResultEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LayoutResultEntity>>> GetPopulateResults1AsyncWithHttpInfo (int? layoutindex, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);
        /// <summary>
        /// Get product with name of {productname}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productname"></param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Whether to include thumbnail image of product (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>Task of PhoenixProductEntity</returns>
        System.Threading.Tasks.Task<PhoenixProductEntity> GetProduct1Async (string productname, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);

        /// <summary>
        /// Get product with name of {productname}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productname"></param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Whether to include thumbnail image of product (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>Task of ApiResponse (PhoenixProductEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<PhoenixProductEntity>> GetProduct1AsyncWithHttpInfo (string productname, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);
        /// <summary>
        /// Get all products of the current project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Whether to include thumbnail image of products (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail images (optional, default to Colors)</param>
        /// <returns>Task of List&lt;PhoenixProductEntity&gt;</returns>
        System.Threading.Tasks.Task<List<PhoenixProductEntity>> GetProducts1Async (string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);

        /// <summary>
        /// Get all products of the current project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Whether to include thumbnail image of products (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail images (optional, default to Colors)</param>
        /// <returns>Task of ApiResponse (List&lt;PhoenixProductEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PhoenixProductEntity>>> GetProducts1AsyncWithHttpInfo (string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null);
        /// <summary>
        /// Get uploaded project file by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileid">ID of uploaded project file to get</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of JobFilesEntity</returns>
        System.Threading.Tasks.Task<JobFilesEntity> GetUploadedFile1Async (string fileid, string projectid);

        /// <summary>
        /// Get uploaded project file by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileid">ID of uploaded project file to get</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ApiResponse (JobFilesEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobFilesEntity>> GetUploadedFile1AsyncWithHttpInfo (string fileid, string projectid);
        /// <summary>
        /// Get all files currently uploaded to this project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of List&lt;JobFilesEntity&gt;</returns>
        System.Threading.Tasks.Task<List<JobFilesEntity>> GetUploadedFiles1Async (string projectid);

        /// <summary>
        /// Get all files currently uploaded to this project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ApiResponse (List&lt;JobFilesEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<JobFilesEntity>>> GetUploadedFiles1AsyncWithHttpInfo (string projectid);
        /// <summary>
        /// Import die template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> ImportDieTemplate1Async (string projectid, ImportDieTemplateResource body = null);

        /// <summary>
        /// Import die template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ImportDieTemplate1AsyncWithHttpInfo (string projectid, ImportDieTemplateResource body = null);
        /// <summary>
        /// Import products from CSV file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> ImportProductCsvAsync (string projectid, ImportProductCsvResource body = null);

        /// <summary>
        /// Import products from CSV file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ImportProductCsvAsyncWithHttpInfo (string projectid, ImportProductCsvResource body = null);
        /// <summary>
        /// Run Impose tool to generate layouts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> Impose1Async (int? layoutindex, string projectid, ImposeResource body = null);

        /// <summary>
        /// Run Impose tool to generate layouts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> Impose1AsyncWithHttpInfo (int? layoutindex, string projectid, ImposeResource body = null);
        /// <summary>
        /// Open existing project file
        /// </summary>
        /// <remarks>
        /// The file needs to be updated via form data.  The filename content disposition header excluding filename extension is used to define the project ID if present, otherwise the existing project ID in the project is used.
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> OpenJobAsync (FormDataContentDisposition file = null);

        /// <summary>
        /// Open existing project file
        /// </summary>
        /// <remarks>
        /// The file needs to be updated via form data.  The filename content disposition header excluding filename extension is used to define the project ID if present, otherwise the existing project ID in the project is used.
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> OpenJobAsyncWithHttpInfo (FormDataContentDisposition file = null);
        /// <summary>
        /// Run Optimize tool to generate layouts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> Optimize1Async (int? layoutindex, string projectid, OptimizeResource body = null);

        /// <summary>
        /// Run Optimize tool to generate layouts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> Optimize1AsyncWithHttpInfo (int? layoutindex, string projectid, OptimizeResource body = null);
        /// <summary>
        /// Place die template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> PlaceDieTemplateAsync (int? layoutindex, string projectid, PlaceDieTemplateResource body = null);

        /// <summary>
        /// Place die template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> PlaceDieTemplateAsyncWithHttpInfo (int? layoutindex, string projectid, PlaceDieTemplateResource body = null);
        /// <summary>
        /// Run Plan tool to generate project plans
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> Plan1Async (string projectid, PlanResource body = null);

        /// <summary>
        /// Run Plan tool to generate project plans
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> Plan1AsyncWithHttpInfo (string projectid, PlanResource body = null);
        /// <summary>
        /// Start running Plan tool asynchronously to generate project plans
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> PlanStart1Async (string projectid, PlanResource body = null);

        /// <summary>
        /// Start running Plan tool asynchronously to generate project plans
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> PlanStart1AsyncWithHttpInfo (string projectid, PlanResource body = null);
        /// <summary>
        /// Get current plan tool running status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of PlanStatusEntity</returns>
        System.Threading.Tasks.Task<PlanStatusEntity> PlanStatus1Async (string projectid);

        /// <summary>
        /// Get current plan tool running status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ApiResponse (PlanStatusEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlanStatusEntity>> PlanStatus1AsyncWithHttpInfo (string projectid);
        /// <summary>
        /// Stop plan tool if it is currently running
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> PlanStop1Async (string projectid);

        /// <summary>
        /// Stop plan tool if it is currently running
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> PlanStop1AsyncWithHttpInfo (string projectid);
        /// <summary>
        /// Run Populate tool to generate layouts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> Populate1Async (int? layoutindex, string projectid, PopulateResource body = null);

        /// <summary>
        /// Run Populate tool to generate layouts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> Populate1AsyncWithHttpInfo (int? layoutindex, string projectid, PopulateResource body = null);
        /// <summary>
        /// Resize layout sheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> ResizeLayoutSheet1Async (int? layoutindex, string projectid, ResizeSheetResource body = null);

        /// <summary>
        /// Resize layout sheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ResizeLayoutSheet1AsyncWithHttpInfo (int? layoutindex, string projectid, ResizeSheetResource body = null);
        /// <summary>
        /// Run a script on the current project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> RunAsync (string projectid, RunScriptResource body = null);

        /// <summary>
        /// Run a script on the current project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> RunAsyncWithHttpInfo (string projectid, RunScriptResource body = null);
        /// <summary>
        /// Save project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SaveJob1Async (string projectid, SaveJobResource body = null);

        /// <summary>
        /// Save project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SaveJob1AsyncWithHttpInfo (string projectid, SaveJobResource body = null);
        /// <summary>
        /// Save project template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> SaveJobTemplateAsync (string projectid, SaveJobTemplateResource body = null);

        /// <summary>
        /// Save project template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> SaveJobTemplateAsyncWithHttpInfo (string projectid, SaveJobTemplateResource body = null);
        /// <summary>
        /// Set layout plate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> SetLayoutPlate1Async (int? layoutindex, string projectid, SetPlateResource body = null);

        /// <summary>
        /// Set layout plate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> SetLayoutPlate1AsyncWithHttpInfo (int? layoutindex, string projectid, SetPlateResource body = null);
        /// <summary>
        /// Set layout press
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> SetLayoutPress1Async (int? layoutindex, string projectid, SetPressResource body = null);

        /// <summary>
        /// Set layout press
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> SetLayoutPress1AsyncWithHttpInfo (int? layoutindex, string projectid, SetPressResource body = null);
        /// <summary>
        /// Set layout sheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> SetLayoutSheet1Async (int? layoutindex, string projectid, SetSheetResource body = null);

        /// <summary>
        /// Set layout sheet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> SetLayoutSheet1AsyncWithHttpInfo (int? layoutindex, string projectid, SetSheetResource body = null);
        /// <summary>
        /// Snap artwork to products or die numbers in project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> SnapAsync (string projectid, AutosnapResource body = null);

        /// <summary>
        /// Snap artwork to products or die numbers in project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> SnapAsyncWithHttpInfo (string projectid, AutosnapResource body = null);
        /// <summary>
        /// Snap artwork to a given side of the product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productname"></param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> SnapProductAsync (string productname, string projectid, AutosnapArtworkEntity body = null);

        /// <summary>
        /// Snap artwork to a given side of the product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productname"></param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> SnapProductAsyncWithHttpInfo (string productname, string projectid, AutosnapArtworkEntity body = null);
        /// <summary>
        /// Generate step and repeat group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> StepRepeatAsync (int? layoutindex, string projectid, StepRepeatResource body = null);

        /// <summary>
        /// Generate step and repeat group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> StepRepeatAsyncWithHttpInfo (int? layoutindex, string projectid, StepRepeatResource body = null);
        /// <summary>
        /// Upload new file to project
        /// </summary>
        /// <remarks>
        /// The URI returned in the response entity can be used to download the file content directly or referred to when adding products.
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        System.Threading.Tasks.Task<ResponseEntity> UploadFile1Async (string projectid, FormDataContentDisposition file = null);

        /// <summary>
        /// Upload new file to project
        /// </summary>
        /// <remarks>
        /// The URI returned in the response entity can be used to download the file content directly or referred to when adding products.
        /// </remarks>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> UploadFile1AsyncWithHttpInfo (string projectid, FormDataContentDisposition file = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ProjectsAPIApi : IProjectsAPIApi
    {
        private TiliaLabs.Phoenix.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsAPIApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProjectsAPIApi(String basePath)
        {
            this.Configuration = new TiliaLabs.Phoenix.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TiliaLabs.Phoenix.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsAPIApi"/> class
        /// </summary>
        /// <returns></returns>
        public ProjectsAPIApi()
        {
            this.Configuration = TiliaLabs.Phoenix.Client.Configuration.Default;

            ExceptionFactory = TiliaLabs.Phoenix.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsAPIApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProjectsAPIApi(TiliaLabs.Phoenix.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TiliaLabs.Phoenix.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TiliaLabs.Phoenix.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TiliaLabs.Phoenix.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TiliaLabs.Phoenix.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Apply result from most recent Impose run 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="resultid">Id of result to apply</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity ApplyImposeResult1 (int? layoutindex, int? resultid, string projectid)
        {
             ApiResponse<ResponseEntity> localVarResponse = ApplyImposeResult1WithHttpInfo(layoutindex, resultid, projectid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Apply result from most recent Impose run 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="resultid">Id of result to apply</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > ApplyImposeResult1WithHttpInfo (int? layoutindex, int? resultid, string projectid)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->ApplyImposeResult1");
            // verify the required parameter 'resultid' is set
            if (resultid == null)
                throw new ApiException(400, "Missing required parameter 'resultid' when calling ProjectsAPIApi->ApplyImposeResult1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->ApplyImposeResult1");

            var localVarPath = "/jobs/{projectid}/impose/{layoutindex}/result/{resultid}/apply";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (resultid != null) localVarPathParams.Add("resultid", this.Configuration.ApiClient.ParameterToString(resultid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplyImposeResult1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Apply result from most recent Impose run 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="resultid">Id of result to apply</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> ApplyImposeResult1Async (int? layoutindex, int? resultid, string projectid)
        {
             ApiResponse<ResponseEntity> localVarResponse = await ApplyImposeResult1AsyncWithHttpInfo(layoutindex, resultid, projectid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Apply result from most recent Impose run 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="resultid">Id of result to apply</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ApplyImposeResult1AsyncWithHttpInfo (int? layoutindex, int? resultid, string projectid)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->ApplyImposeResult1");
            // verify the required parameter 'resultid' is set
            if (resultid == null)
                throw new ApiException(400, "Missing required parameter 'resultid' when calling ProjectsAPIApi->ApplyImposeResult1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->ApplyImposeResult1");

            var localVarPath = "/jobs/{projectid}/impose/{layoutindex}/result/{resultid}/apply";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (resultid != null) localVarPathParams.Add("resultid", this.Configuration.ApiClient.ParameterToString(resultid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplyImposeResult1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Apply result from most recent Optimize run 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="resultid">Id of result to apply</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity ApplyOptimizeResult1 (int? layoutindex, int? resultid, string projectid)
        {
             ApiResponse<ResponseEntity> localVarResponse = ApplyOptimizeResult1WithHttpInfo(layoutindex, resultid, projectid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Apply result from most recent Optimize run 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="resultid">Id of result to apply</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > ApplyOptimizeResult1WithHttpInfo (int? layoutindex, int? resultid, string projectid)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->ApplyOptimizeResult1");
            // verify the required parameter 'resultid' is set
            if (resultid == null)
                throw new ApiException(400, "Missing required parameter 'resultid' when calling ProjectsAPIApi->ApplyOptimizeResult1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->ApplyOptimizeResult1");

            var localVarPath = "/jobs/{projectid}/optimize/{layoutindex}/result/{resultid}/apply";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (resultid != null) localVarPathParams.Add("resultid", this.Configuration.ApiClient.ParameterToString(resultid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplyOptimizeResult1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Apply result from most recent Optimize run 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="resultid">Id of result to apply</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> ApplyOptimizeResult1Async (int? layoutindex, int? resultid, string projectid)
        {
             ApiResponse<ResponseEntity> localVarResponse = await ApplyOptimizeResult1AsyncWithHttpInfo(layoutindex, resultid, projectid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Apply result from most recent Optimize run 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="resultid">Id of result to apply</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ApplyOptimizeResult1AsyncWithHttpInfo (int? layoutindex, int? resultid, string projectid)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->ApplyOptimizeResult1");
            // verify the required parameter 'resultid' is set
            if (resultid == null)
                throw new ApiException(400, "Missing required parameter 'resultid' when calling ProjectsAPIApi->ApplyOptimizeResult1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->ApplyOptimizeResult1");

            var localVarPath = "/jobs/{projectid}/optimize/{layoutindex}/result/{resultid}/apply";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (resultid != null) localVarPathParams.Add("resultid", this.Configuration.ApiClient.ParameterToString(resultid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplyOptimizeResult1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Apply result from most recent plan run 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resultid">Id of result to apply</param>
        /// <param name="start">First layout to apply from plan starting from 1</param>
        /// <param name="end">Last layout to apply from plan</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity ApplyPartialPlan1 (int? resultid, int? start, int? end, string projectid)
        {
             ApiResponse<ResponseEntity> localVarResponse = ApplyPartialPlan1WithHttpInfo(resultid, start, end, projectid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Apply result from most recent plan run 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resultid">Id of result to apply</param>
        /// <param name="start">First layout to apply from plan starting from 1</param>
        /// <param name="end">Last layout to apply from plan</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > ApplyPartialPlan1WithHttpInfo (int? resultid, int? start, int? end, string projectid)
        {
            // verify the required parameter 'resultid' is set
            if (resultid == null)
                throw new ApiException(400, "Missing required parameter 'resultid' when calling ProjectsAPIApi->ApplyPartialPlan1");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling ProjectsAPIApi->ApplyPartialPlan1");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling ProjectsAPIApi->ApplyPartialPlan1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->ApplyPartialPlan1");

            var localVarPath = "/jobs/{projectid}/plan/results/{resultid}/apply/{start}/{end}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resultid != null) localVarPathParams.Add("resultid", this.Configuration.ApiClient.ParameterToString(resultid)); // path parameter
            if (start != null) localVarPathParams.Add("start", this.Configuration.ApiClient.ParameterToString(start)); // path parameter
            if (end != null) localVarPathParams.Add("end", this.Configuration.ApiClient.ParameterToString(end)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplyPartialPlan1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Apply result from most recent plan run 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resultid">Id of result to apply</param>
        /// <param name="start">First layout to apply from plan starting from 1</param>
        /// <param name="end">Last layout to apply from plan</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> ApplyPartialPlan1Async (int? resultid, int? start, int? end, string projectid)
        {
             ApiResponse<ResponseEntity> localVarResponse = await ApplyPartialPlan1AsyncWithHttpInfo(resultid, start, end, projectid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Apply result from most recent plan run 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resultid">Id of result to apply</param>
        /// <param name="start">First layout to apply from plan starting from 1</param>
        /// <param name="end">Last layout to apply from plan</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ApplyPartialPlan1AsyncWithHttpInfo (int? resultid, int? start, int? end, string projectid)
        {
            // verify the required parameter 'resultid' is set
            if (resultid == null)
                throw new ApiException(400, "Missing required parameter 'resultid' when calling ProjectsAPIApi->ApplyPartialPlan1");
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling ProjectsAPIApi->ApplyPartialPlan1");
            // verify the required parameter 'end' is set
            if (end == null)
                throw new ApiException(400, "Missing required parameter 'end' when calling ProjectsAPIApi->ApplyPartialPlan1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->ApplyPartialPlan1");

            var localVarPath = "/jobs/{projectid}/plan/results/{resultid}/apply/{start}/{end}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resultid != null) localVarPathParams.Add("resultid", this.Configuration.ApiClient.ParameterToString(resultid)); // path parameter
            if (start != null) localVarPathParams.Add("start", this.Configuration.ApiClient.ParameterToString(start)); // path parameter
            if (end != null) localVarPathParams.Add("end", this.Configuration.ApiClient.ParameterToString(end)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplyPartialPlan1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Apply result from most recent plan run 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resultid">Id of result to apply</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity ApplyPlanResult1 (int? resultid, string projectid)
        {
             ApiResponse<ResponseEntity> localVarResponse = ApplyPlanResult1WithHttpInfo(resultid, projectid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Apply result from most recent plan run 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resultid">Id of result to apply</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > ApplyPlanResult1WithHttpInfo (int? resultid, string projectid)
        {
            // verify the required parameter 'resultid' is set
            if (resultid == null)
                throw new ApiException(400, "Missing required parameter 'resultid' when calling ProjectsAPIApi->ApplyPlanResult1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->ApplyPlanResult1");

            var localVarPath = "/jobs/{projectid}/plan/results/{resultid}/apply";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resultid != null) localVarPathParams.Add("resultid", this.Configuration.ApiClient.ParameterToString(resultid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplyPlanResult1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Apply result from most recent plan run 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resultid">Id of result to apply</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> ApplyPlanResult1Async (int? resultid, string projectid)
        {
             ApiResponse<ResponseEntity> localVarResponse = await ApplyPlanResult1AsyncWithHttpInfo(resultid, projectid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Apply result from most recent plan run 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resultid">Id of result to apply</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ApplyPlanResult1AsyncWithHttpInfo (int? resultid, string projectid)
        {
            // verify the required parameter 'resultid' is set
            if (resultid == null)
                throw new ApiException(400, "Missing required parameter 'resultid' when calling ProjectsAPIApi->ApplyPlanResult1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->ApplyPlanResult1");

            var localVarPath = "/jobs/{projectid}/plan/results/{resultid}/apply";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resultid != null) localVarPathParams.Add("resultid", this.Configuration.ApiClient.ParameterToString(resultid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplyPlanResult1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Apply result from most recent Populate run 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="resultid">Id of result to apply</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity ApplyPopulateResult1 (int? layoutindex, int? resultid, string projectid)
        {
             ApiResponse<ResponseEntity> localVarResponse = ApplyPopulateResult1WithHttpInfo(layoutindex, resultid, projectid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Apply result from most recent Populate run 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="resultid">Id of result to apply</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > ApplyPopulateResult1WithHttpInfo (int? layoutindex, int? resultid, string projectid)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->ApplyPopulateResult1");
            // verify the required parameter 'resultid' is set
            if (resultid == null)
                throw new ApiException(400, "Missing required parameter 'resultid' when calling ProjectsAPIApi->ApplyPopulateResult1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->ApplyPopulateResult1");

            var localVarPath = "/jobs/{projectid}/populate/{layoutindex}/result/{resultid}/apply";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (resultid != null) localVarPathParams.Add("resultid", this.Configuration.ApiClient.ParameterToString(resultid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplyPopulateResult1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Apply result from most recent Populate run 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="resultid">Id of result to apply</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> ApplyPopulateResult1Async (int? layoutindex, int? resultid, string projectid)
        {
             ApiResponse<ResponseEntity> localVarResponse = await ApplyPopulateResult1AsyncWithHttpInfo(layoutindex, resultid, projectid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Apply result from most recent Populate run 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="resultid">Id of result to apply</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ApplyPopulateResult1AsyncWithHttpInfo (int? layoutindex, int? resultid, string projectid)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->ApplyPopulateResult1");
            // verify the required parameter 'resultid' is set
            if (resultid == null)
                throw new ApiException(400, "Missing required parameter 'resultid' when calling ProjectsAPIApi->ApplyPopulateResult1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->ApplyPopulateResult1");

            var localVarPath = "/jobs/{projectid}/populate/{layoutindex}/result/{resultid}/apply";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (resultid != null) localVarPathParams.Add("resultid", this.Configuration.ApiClient.ParameterToString(resultid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplyPopulateResult1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Apply a smart product mark to this product 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productname"></param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity ApplyProductMark (string productname, string projectid, ApplyMarkResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = ApplyProductMarkWithHttpInfo(productname, projectid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Apply a smart product mark to this product 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productname"></param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > ApplyProductMarkWithHttpInfo (string productname, string projectid, ApplyMarkResource body = null)
        {
            // verify the required parameter 'productname' is set
            if (productname == null)
                throw new ApiException(400, "Missing required parameter 'productname' when calling ProjectsAPIApi->ApplyProductMark");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->ApplyProductMark");

            var localVarPath = "/jobs/{projectid}/products/{productname}/marks/apply";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productname != null) localVarPathParams.Add("productname", this.Configuration.ApiClient.ParameterToString(productname)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplyProductMark", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Apply a smart product mark to this product 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productname"></param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> ApplyProductMarkAsync (string productname, string projectid, ApplyMarkResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await ApplyProductMarkAsyncWithHttpInfo(productname, projectid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Apply a smart product mark to this product 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productname"></param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ApplyProductMarkAsyncWithHttpInfo (string productname, string projectid, ApplyMarkResource body = null)
        {
            // verify the required parameter 'productname' is set
            if (productname == null)
                throw new ApiException(400, "Missing required parameter 'productname' when calling ProjectsAPIApi->ApplyProductMark");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->ApplyProductMark");

            var localVarPath = "/jobs/{projectid}/products/{productname}/marks/apply";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productname != null) localVarPathParams.Add("productname", this.Configuration.ApiClient.ParameterToString(productname)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplyProductMark", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Create a new project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity CreateJob (CreateJobResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = CreateJobWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > CreateJobWithHttpInfo (CreateJobResource body = null)
        {

            var localVarPath = "/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Create a new project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> CreateJobAsync (CreateJobResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await CreateJobAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> CreateJobAsyncWithHttpInfo (CreateJobResource body = null)
        {

            var localVarPath = "/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Create a new layout 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <returns>PhoenixLayoutEntity</returns>
        public PhoenixLayoutEntity CreateLayout1 (string projectid)
        {
             ApiResponse<PhoenixLayoutEntity> localVarResponse = CreateLayout1WithHttpInfo(projectid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new layout 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ApiResponse of PhoenixLayoutEntity</returns>
        public ApiResponse< PhoenixLayoutEntity > CreateLayout1WithHttpInfo (string projectid)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->CreateLayout1");

            var localVarPath = "/jobs/{projectid}/layouts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateLayout1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PhoenixLayoutEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PhoenixLayoutEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PhoenixLayoutEntity)));
        }

        /// <summary>
        /// Create a new layout 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of PhoenixLayoutEntity</returns>
        public async System.Threading.Tasks.Task<PhoenixLayoutEntity> CreateLayout1Async (string projectid)
        {
             ApiResponse<PhoenixLayoutEntity> localVarResponse = await CreateLayout1AsyncWithHttpInfo(projectid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new layout 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ApiResponse (PhoenixLayoutEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PhoenixLayoutEntity>> CreateLayout1AsyncWithHttpInfo (string projectid)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->CreateLayout1");

            var localVarPath = "/jobs/{projectid}/layouts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateLayout1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PhoenixLayoutEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PhoenixLayoutEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PhoenixLayoutEntity)));
        }

        /// <summary>
        /// Create new product 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity CreateProduct1 (string projectid, AddProductEntity body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = CreateProduct1WithHttpInfo(projectid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create new product 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > CreateProduct1WithHttpInfo (string projectid, AddProductEntity body = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->CreateProduct1");

            var localVarPath = "/jobs/{projectid}/products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProduct1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Create new product 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> CreateProduct1Async (string projectid, AddProductEntity body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await CreateProduct1AsyncWithHttpInfo(projectid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create new product 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> CreateProduct1AsyncWithHttpInfo (string projectid, AddProductEntity body = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->CreateProduct1");

            var localVarPath = "/jobs/{projectid}/products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProduct1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Close the project with ID of {projectid} 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity DeleteJob1 (string projectid)
        {
             ApiResponse<ResponseEntity> localVarResponse = DeleteJob1WithHttpInfo(projectid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Close the project with ID of {projectid} 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > DeleteJob1WithHttpInfo (string projectid)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->DeleteJob1");

            var localVarPath = "/jobs/{projectid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteJob1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Close the project with ID of {projectid} 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> DeleteJob1Async (string projectid)
        {
             ApiResponse<ResponseEntity> localVarResponse = await DeleteJob1AsyncWithHttpInfo(projectid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Close the project with ID of {projectid} 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> DeleteJob1AsyncWithHttpInfo (string projectid)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->DeleteJob1");

            var localVarPath = "/jobs/{projectid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteJob1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Delete layout from the project by index 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity DeleteLayout1 (int? layoutindex, string projectid)
        {
             ApiResponse<ResponseEntity> localVarResponse = DeleteLayout1WithHttpInfo(layoutindex, projectid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete layout from the project by index 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > DeleteLayout1WithHttpInfo (int? layoutindex, string projectid)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->DeleteLayout1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->DeleteLayout1");

            var localVarPath = "/jobs/{projectid}/layouts/{layoutindex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteLayout1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Delete layout from the project by index 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> DeleteLayout1Async (int? layoutindex, string projectid)
        {
             ApiResponse<ResponseEntity> localVarResponse = await DeleteLayout1AsyncWithHttpInfo(layoutindex, projectid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete layout from the project by index 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> DeleteLayout1AsyncWithHttpInfo (int? layoutindex, string projectid)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->DeleteLayout1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->DeleteLayout1");

            var localVarPath = "/jobs/{projectid}/layouts/{layoutindex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteLayout1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Delete output project files from this project with specific file ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileid">ID of uploaded project file to get</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity DeleteOutputFile1 (string fileid, string projectid)
        {
             ApiResponse<ResponseEntity> localVarResponse = DeleteOutputFile1WithHttpInfo(fileid, projectid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete output project files from this project with specific file ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileid">ID of uploaded project file to get</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > DeleteOutputFile1WithHttpInfo (string fileid, string projectid)
        {
            // verify the required parameter 'fileid' is set
            if (fileid == null)
                throw new ApiException(400, "Missing required parameter 'fileid' when calling ProjectsAPIApi->DeleteOutputFile1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->DeleteOutputFile1");

            var localVarPath = "/jobs/{projectid}/files/output/{fileid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileid != null) localVarPathParams.Add("fileid", this.Configuration.ApiClient.ParameterToString(fileid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOutputFile1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Delete output project files from this project with specific file ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileid">ID of uploaded project file to get</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> DeleteOutputFile1Async (string fileid, string projectid)
        {
             ApiResponse<ResponseEntity> localVarResponse = await DeleteOutputFile1AsyncWithHttpInfo(fileid, projectid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete output project files from this project with specific file ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileid">ID of uploaded project file to get</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> DeleteOutputFile1AsyncWithHttpInfo (string fileid, string projectid)
        {
            // verify the required parameter 'fileid' is set
            if (fileid == null)
                throw new ApiException(400, "Missing required parameter 'fileid' when calling ProjectsAPIApi->DeleteOutputFile1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->DeleteOutputFile1");

            var localVarPath = "/jobs/{projectid}/files/output/{fileid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileid != null) localVarPathParams.Add("fileid", this.Configuration.ApiClient.ParameterToString(fileid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOutputFile1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Delete product with name {productname} from the project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productname"></param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity DeleteProduct1 (string productname, string projectid)
        {
             ApiResponse<ResponseEntity> localVarResponse = DeleteProduct1WithHttpInfo(productname, projectid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete product with name {productname} from the project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productname"></param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > DeleteProduct1WithHttpInfo (string productname, string projectid)
        {
            // verify the required parameter 'productname' is set
            if (productname == null)
                throw new ApiException(400, "Missing required parameter 'productname' when calling ProjectsAPIApi->DeleteProduct1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->DeleteProduct1");

            var localVarPath = "/jobs/{projectid}/products/{productname}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productname != null) localVarPathParams.Add("productname", this.Configuration.ApiClient.ParameterToString(productname)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProduct1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Delete product with name {productname} from the project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productname"></param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> DeleteProduct1Async (string productname, string projectid)
        {
             ApiResponse<ResponseEntity> localVarResponse = await DeleteProduct1AsyncWithHttpInfo(productname, projectid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete product with name {productname} from the project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productname"></param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> DeleteProduct1AsyncWithHttpInfo (string productname, string projectid)
        {
            // verify the required parameter 'productname' is set
            if (productname == null)
                throw new ApiException(400, "Missing required parameter 'productname' when calling ProjectsAPIApi->DeleteProduct1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->DeleteProduct1");

            var localVarPath = "/jobs/{projectid}/products/{productname}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productname != null) localVarPathParams.Add("productname", this.Configuration.ApiClient.ParameterToString(productname)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProduct1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Delete uploaded project file from this project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileid">ID of uploaded project file to get</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity DeleteUploadedFile1 (string fileid, string projectid)
        {
             ApiResponse<ResponseEntity> localVarResponse = DeleteUploadedFile1WithHttpInfo(fileid, projectid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete uploaded project file from this project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileid">ID of uploaded project file to get</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > DeleteUploadedFile1WithHttpInfo (string fileid, string projectid)
        {
            // verify the required parameter 'fileid' is set
            if (fileid == null)
                throw new ApiException(400, "Missing required parameter 'fileid' when calling ProjectsAPIApi->DeleteUploadedFile1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->DeleteUploadedFile1");

            var localVarPath = "/jobs/{projectid}/files/upload/{fileid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileid != null) localVarPathParams.Add("fileid", this.Configuration.ApiClient.ParameterToString(fileid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUploadedFile1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Delete uploaded project file from this project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileid">ID of uploaded project file to get</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> DeleteUploadedFile1Async (string fileid, string projectid)
        {
             ApiResponse<ResponseEntity> localVarResponse = await DeleteUploadedFile1AsyncWithHttpInfo(fileid, projectid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete uploaded project file from this project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileid">ID of uploaded project file to get</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> DeleteUploadedFile1AsyncWithHttpInfo (string fileid, string projectid)
        {
            // verify the required parameter 'fileid' is set
            if (fileid == null)
                throw new ApiException(400, "Missing required parameter 'fileid' when calling ProjectsAPIApi->DeleteUploadedFile1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->DeleteUploadedFile1");

            var localVarPath = "/jobs/{projectid}/files/upload/{fileid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileid != null) localVarPathParams.Add("fileid", this.Configuration.ApiClient.ParameterToString(fileid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUploadedFile1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Download specific output file content 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileid">ID of output project file to get</param>
        /// <param name="filepath">Relative path of specific file contents to download</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>List&lt;byte[]&gt;</returns>
        public List<byte[]> DownloadOutputFile1 (string fileid, string filepath, string projectid)
        {
             ApiResponse<List<byte[]>> localVarResponse = DownloadOutputFile1WithHttpInfo(fileid, filepath, projectid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Download specific output file content 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileid">ID of output project file to get</param>
        /// <param name="filepath">Relative path of specific file contents to download</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ApiResponse of List&lt;byte[]&gt;</returns>
        public ApiResponse< List<byte[]> > DownloadOutputFile1WithHttpInfo (string fileid, string filepath, string projectid)
        {
            // verify the required parameter 'fileid' is set
            if (fileid == null)
                throw new ApiException(400, "Missing required parameter 'fileid' when calling ProjectsAPIApi->DownloadOutputFile1");
            // verify the required parameter 'filepath' is set
            if (filepath == null)
                throw new ApiException(400, "Missing required parameter 'filepath' when calling ProjectsAPIApi->DownloadOutputFile1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->DownloadOutputFile1");

            var localVarPath = "/jobs/{projectid}/files/output/{fileid}/{filepath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileid != null) localVarPathParams.Add("fileid", this.Configuration.ApiClient.ParameterToString(fileid)); // path parameter
            if (filepath != null) localVarPathParams.Add("filepath", this.Configuration.ApiClient.ParameterToString(filepath)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadOutputFile1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<byte[]>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<byte[]>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<byte[]>)));
        }

        /// <summary>
        /// Download specific output file content 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileid">ID of output project file to get</param>
        /// <param name="filepath">Relative path of specific file contents to download</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of List&lt;byte[]&gt;</returns>
        public async System.Threading.Tasks.Task<List<byte[]>> DownloadOutputFile1Async (string fileid, string filepath, string projectid)
        {
             ApiResponse<List<byte[]>> localVarResponse = await DownloadOutputFile1AsyncWithHttpInfo(fileid, filepath, projectid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Download specific output file content 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileid">ID of output project file to get</param>
        /// <param name="filepath">Relative path of specific file contents to download</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ApiResponse (List&lt;byte[]&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<byte[]>>> DownloadOutputFile1AsyncWithHttpInfo (string fileid, string filepath, string projectid)
        {
            // verify the required parameter 'fileid' is set
            if (fileid == null)
                throw new ApiException(400, "Missing required parameter 'fileid' when calling ProjectsAPIApi->DownloadOutputFile1");
            // verify the required parameter 'filepath' is set
            if (filepath == null)
                throw new ApiException(400, "Missing required parameter 'filepath' when calling ProjectsAPIApi->DownloadOutputFile1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->DownloadOutputFile1");

            var localVarPath = "/jobs/{projectid}/files/output/{fileid}/{filepath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileid != null) localVarPathParams.Add("fileid", this.Configuration.ApiClient.ParameterToString(fileid)); // path parameter
            if (filepath != null) localVarPathParams.Add("filepath", this.Configuration.ApiClient.ParameterToString(filepath)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadOutputFile1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<byte[]>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<byte[]>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<byte[]>)));
        }

        /// <summary>
        /// Download specific uploaded file content 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileid">ID of uploaded project file to get</param>
        /// <param name="filepath">Relative path of specific file contents to download</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>List&lt;byte[]&gt;</returns>
        public List<byte[]> DownloadUploadedFile1 (string fileid, string filepath, string projectid)
        {
             ApiResponse<List<byte[]>> localVarResponse = DownloadUploadedFile1WithHttpInfo(fileid, filepath, projectid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Download specific uploaded file content 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileid">ID of uploaded project file to get</param>
        /// <param name="filepath">Relative path of specific file contents to download</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ApiResponse of List&lt;byte[]&gt;</returns>
        public ApiResponse< List<byte[]> > DownloadUploadedFile1WithHttpInfo (string fileid, string filepath, string projectid)
        {
            // verify the required parameter 'fileid' is set
            if (fileid == null)
                throw new ApiException(400, "Missing required parameter 'fileid' when calling ProjectsAPIApi->DownloadUploadedFile1");
            // verify the required parameter 'filepath' is set
            if (filepath == null)
                throw new ApiException(400, "Missing required parameter 'filepath' when calling ProjectsAPIApi->DownloadUploadedFile1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->DownloadUploadedFile1");

            var localVarPath = "/jobs/{projectid}/files/upload/{fileid}/{filepath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileid != null) localVarPathParams.Add("fileid", this.Configuration.ApiClient.ParameterToString(fileid)); // path parameter
            if (filepath != null) localVarPathParams.Add("filepath", this.Configuration.ApiClient.ParameterToString(filepath)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadUploadedFile1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<byte[]>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<byte[]>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<byte[]>)));
        }

        /// <summary>
        /// Download specific uploaded file content 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileid">ID of uploaded project file to get</param>
        /// <param name="filepath">Relative path of specific file contents to download</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of List&lt;byte[]&gt;</returns>
        public async System.Threading.Tasks.Task<List<byte[]>> DownloadUploadedFile1Async (string fileid, string filepath, string projectid)
        {
             ApiResponse<List<byte[]>> localVarResponse = await DownloadUploadedFile1AsyncWithHttpInfo(fileid, filepath, projectid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Download specific uploaded file content 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileid">ID of uploaded project file to get</param>
        /// <param name="filepath">Relative path of specific file contents to download</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ApiResponse (List&lt;byte[]&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<byte[]>>> DownloadUploadedFile1AsyncWithHttpInfo (string fileid, string filepath, string projectid)
        {
            // verify the required parameter 'fileid' is set
            if (fileid == null)
                throw new ApiException(400, "Missing required parameter 'fileid' when calling ProjectsAPIApi->DownloadUploadedFile1");
            // verify the required parameter 'filepath' is set
            if (filepath == null)
                throw new ApiException(400, "Missing required parameter 'filepath' when calling ProjectsAPIApi->DownloadUploadedFile1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->DownloadUploadedFile1");

            var localVarPath = "/jobs/{projectid}/files/upload/{fileid}/{filepath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileid != null) localVarPathParams.Add("fileid", this.Configuration.ApiClient.ParameterToString(fileid)); // path parameter
            if (filepath != null) localVarPathParams.Add("filepath", this.Configuration.ApiClient.ParameterToString(filepath)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadUploadedFile1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<byte[]>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<byte[]>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<byte[]>)));
        }

        /// <summary>
        /// Edit layout properties 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity EditLayout1 (int? layoutindex, string projectid, EditLayoutResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = EditLayout1WithHttpInfo(layoutindex, projectid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit layout properties 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > EditLayout1WithHttpInfo (int? layoutindex, string projectid, EditLayoutResource body = null)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->EditLayout1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->EditLayout1");

            var localVarPath = "/jobs/{projectid}/layouts/{layoutindex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditLayout1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Edit layout properties 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> EditLayout1Async (int? layoutindex, string projectid, EditLayoutResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await EditLayout1AsyncWithHttpInfo(layoutindex, projectid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit layout properties 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> EditLayout1AsyncWithHttpInfo (int? layoutindex, string projectid, EditLayoutResource body = null)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->EditLayout1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->EditLayout1");

            var localVarPath = "/jobs/{projectid}/layouts/{layoutindex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditLayout1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Export CFF2 Die Layout of current project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity ExportCff2DieLayout (string projectid, ExportCff2LayoutResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = ExportCff2DieLayoutWithHttpInfo(projectid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export CFF2 Die Layout of current project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > ExportCff2DieLayoutWithHttpInfo (string projectid, ExportCff2LayoutResource body = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->ExportCff2DieLayout");

            var localVarPath = "/jobs/{projectid}/export/die/cff2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportCff2DieLayout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Export CFF2 Die Layout of current project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> ExportCff2DieLayoutAsync (string projectid, ExportCff2LayoutResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await ExportCff2DieLayoutAsyncWithHttpInfo(projectid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export CFF2 Die Layout of current project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ExportCff2DieLayoutAsyncWithHttpInfo (string projectid, ExportCff2LayoutResource body = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->ExportCff2DieLayout");

            var localVarPath = "/jobs/{projectid}/export/die/cff2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportCff2DieLayout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Export layout cover sheet(s) of the given project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity ExportCoverSheet (string projectid, ExportCoverSheetResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = ExportCoverSheetWithHttpInfo(projectid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export layout cover sheet(s) of the given project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > ExportCoverSheetWithHttpInfo (string projectid, ExportCoverSheetResource body = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->ExportCoverSheet");

            var localVarPath = "/jobs/{projectid}/export/cover-sheet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportCoverSheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Export layout cover sheet(s) of the given project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> ExportCoverSheetAsync (string projectid, ExportCoverSheetResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await ExportCoverSheetAsyncWithHttpInfo(projectid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export layout cover sheet(s) of the given project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ExportCoverSheetAsyncWithHttpInfo (string projectid, ExportCoverSheetResource body = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->ExportCoverSheet");

            var localVarPath = "/jobs/{projectid}/export/cover-sheet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportCoverSheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Export JDF Cutting Data of the given project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity ExportCuttingJdf (string projectid, ExportCuttingJdfResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = ExportCuttingJdfWithHttpInfo(projectid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export JDF Cutting Data of the given project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > ExportCuttingJdfWithHttpInfo (string projectid, ExportCuttingJdfResource body = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->ExportCuttingJdf");

            var localVarPath = "/jobs/{projectid}/export/jdf-cutting";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportCuttingJdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Export JDF Cutting Data of the given project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> ExportCuttingJdfAsync (string projectid, ExportCuttingJdfResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await ExportCuttingJdfAsyncWithHttpInfo(projectid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export JDF Cutting Data of the given project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ExportCuttingJdfAsyncWithHttpInfo (string projectid, ExportCuttingJdfResource body = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->ExportCuttingJdf");

            var localVarPath = "/jobs/{projectid}/export/jdf-cutting";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportCuttingJdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Export DXF Die Layout of current project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity ExportDxfDieLayout (string projectid, ExportDxfLayoutResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = ExportDxfDieLayoutWithHttpInfo(projectid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export DXF Die Layout of current project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > ExportDxfDieLayoutWithHttpInfo (string projectid, ExportDxfLayoutResource body = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->ExportDxfDieLayout");

            var localVarPath = "/jobs/{projectid}/export/die/dxf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportDxfDieLayout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Export DXF Die Layout of current project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> ExportDxfDieLayoutAsync (string projectid, ExportDxfLayoutResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await ExportDxfDieLayoutAsyncWithHttpInfo(projectid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export DXF Die Layout of current project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ExportDxfDieLayoutAsyncWithHttpInfo (string projectid, ExportDxfLayoutResource body = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->ExportDxfDieLayout");

            var localVarPath = "/jobs/{projectid}/export/die/dxf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportDxfDieLayout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Export HP JDF of the given project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity ExportHpJdf (string projectid, ExportHpJdfResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = ExportHpJdfWithHttpInfo(projectid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export HP JDF of the given project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > ExportHpJdfWithHttpInfo (string projectid, ExportHpJdfResource body = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->ExportHpJdf");

            var localVarPath = "/jobs/{projectid}/export/hp-jdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportHpJdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Export HP JDF of the given project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> ExportHpJdfAsync (string projectid, ExportHpJdfResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await ExportHpJdfAsyncWithHttpInfo(projectid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export HP JDF of the given project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ExportHpJdfAsyncWithHttpInfo (string projectid, ExportHpJdfResource body = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->ExportHpJdf");

            var localVarPath = "/jobs/{projectid}/export/hp-jdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportHpJdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Export Layout JDF of the given project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity ExportImposedJdf (string projectid, ExportJdfResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = ExportImposedJdfWithHttpInfo(projectid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export Layout JDF of the given project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > ExportImposedJdfWithHttpInfo (string projectid, ExportJdfResource body = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->ExportImposedJdf");

            var localVarPath = "/jobs/{projectid}/export/jdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportImposedJdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Export Layout JDF of the given project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> ExportImposedJdfAsync (string projectid, ExportJdfResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await ExportImposedJdfAsyncWithHttpInfo(projectid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export Layout JDF of the given project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ExportImposedJdfAsyncWithHttpInfo (string projectid, ExportJdfResource body = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->ExportImposedJdf");

            var localVarPath = "/jobs/{projectid}/export/jdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportImposedJdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Export Layout PDF of current project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity ExportImposedPdf (string projectid, ExportPdfResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = ExportImposedPdfWithHttpInfo(projectid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export Layout PDF of current project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > ExportImposedPdfWithHttpInfo (string projectid, ExportPdfResource body = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->ExportImposedPdf");

            var localVarPath = "/jobs/{projectid}/export/pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportImposedPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Export Layout PDF of current project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> ExportImposedPdfAsync (string projectid, ExportPdfResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await ExportImposedPdfAsyncWithHttpInfo(projectid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export Layout PDF of current project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ExportImposedPdfAsyncWithHttpInfo (string projectid, ExportPdfResource body = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->ExportImposedPdf");

            var localVarPath = "/jobs/{projectid}/export/pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportImposedPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Export JSON Project Report of the given project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity ExportJsonReport1 (string projectid, ExportJsonReportResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = ExportJsonReport1WithHttpInfo(projectid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export JSON Project Report of the given project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > ExportJsonReport1WithHttpInfo (string projectid, ExportJsonReportResource body = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->ExportJsonReport1");

            var localVarPath = "/jobs/{projectid}/export/report/json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportJsonReport1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Export JSON Project Report of the given project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> ExportJsonReport1Async (string projectid, ExportJsonReportResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await ExportJsonReport1AsyncWithHttpInfo(projectid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export JSON Project Report of the given project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ExportJsonReport1AsyncWithHttpInfo (string projectid, ExportJsonReportResource body = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->ExportJsonReport1");

            var localVarPath = "/jobs/{projectid}/export/report/json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportJsonReport1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Export PDF Die Layout of current project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity ExportPdfDieLayout (string projectid, ExportPdfLayoutResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = ExportPdfDieLayoutWithHttpInfo(projectid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export PDF Die Layout of current project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > ExportPdfDieLayoutWithHttpInfo (string projectid, ExportPdfLayoutResource body = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->ExportPdfDieLayout");

            var localVarPath = "/jobs/{projectid}/export/die/pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportPdfDieLayout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Export PDF Die Layout of current project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> ExportPdfDieLayoutAsync (string projectid, ExportPdfLayoutResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await ExportPdfDieLayoutAsyncWithHttpInfo(projectid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export PDF Die Layout of current project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ExportPdfDieLayoutAsyncWithHttpInfo (string projectid, ExportPdfLayoutResource body = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->ExportPdfDieLayout");

            var localVarPath = "/jobs/{projectid}/export/die/pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportPdfDieLayout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Export PDF Project Report of the given project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity ExportPdfReport (string projectid, ExportPdfReportResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = ExportPdfReportWithHttpInfo(projectid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export PDF Project Report of the given project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > ExportPdfReportWithHttpInfo (string projectid, ExportPdfReportResource body = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->ExportPdfReport");

            var localVarPath = "/jobs/{projectid}/export/report/pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportPdfReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Export PDF Project Report of the given project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> ExportPdfReportAsync (string projectid, ExportPdfReportResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await ExportPdfReportAsyncWithHttpInfo(projectid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export PDF Project Report of the given project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ExportPdfReportAsyncWithHttpInfo (string projectid, ExportPdfReportResource body = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->ExportPdfReport");

            var localVarPath = "/jobs/{projectid}/export/report/pdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportPdfReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Export Tiling report of the given product 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productname"></param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity ExportProductTilingReport (string productname, string projectid, ExportTilingReportResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = ExportProductTilingReportWithHttpInfo(productname, projectid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export Tiling report of the given product 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productname"></param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > ExportProductTilingReportWithHttpInfo (string productname, string projectid, ExportTilingReportResource body = null)
        {
            // verify the required parameter 'productname' is set
            if (productname == null)
                throw new ApiException(400, "Missing required parameter 'productname' when calling ProjectsAPIApi->ExportProductTilingReport");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->ExportProductTilingReport");

            var localVarPath = "/jobs/{projectid}/products/{productname}/export/tiling-report";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productname != null) localVarPathParams.Add("productname", this.Configuration.ApiClient.ParameterToString(productname)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportProductTilingReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Export Tiling report of the given product 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productname"></param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> ExportProductTilingReportAsync (string productname, string projectid, ExportTilingReportResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await ExportProductTilingReportAsyncWithHttpInfo(productname, projectid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export Tiling report of the given product 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productname"></param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ExportProductTilingReportAsyncWithHttpInfo (string productname, string projectid, ExportTilingReportResource body = null)
        {
            // verify the required parameter 'productname' is set
            if (productname == null)
                throw new ApiException(400, "Missing required parameter 'productname' when calling ProjectsAPIApi->ExportProductTilingReport");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->ExportProductTilingReport");

            var localVarPath = "/jobs/{projectid}/products/{productname}/export/tiling-report";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productname != null) localVarPathParams.Add("productname", this.Configuration.ApiClient.ParameterToString(productname)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportProductTilingReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Export Tiling report of the given project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity ExportTilingReport (string projectid, ExportTilingReportResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = ExportTilingReportWithHttpInfo(projectid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export Tiling report of the given project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > ExportTilingReportWithHttpInfo (string projectid, ExportTilingReportResource body = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->ExportTilingReport");

            var localVarPath = "/jobs/{projectid}/export/tiling-report";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportTilingReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Export Tiling report of the given project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> ExportTilingReportAsync (string projectid, ExportTilingReportResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await ExportTilingReportAsyncWithHttpInfo(projectid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export Tiling report of the given project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ExportTilingReportAsyncWithHttpInfo (string projectid, ExportTilingReportResource body = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->ExportTilingReport");

            var localVarPath = "/jobs/{projectid}/export/tiling-report";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportTilingReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Export Vector Separation of the given project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity ExportVectorPdf (string projectid, ExportVectorSeparationResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = ExportVectorPdfWithHttpInfo(projectid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export Vector Separation of the given project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > ExportVectorPdfWithHttpInfo (string projectid, ExportVectorSeparationResource body = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->ExportVectorPdf");

            var localVarPath = "/jobs/{projectid}/export/pdf-vector";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportVectorPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Export Vector Separation of the given project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> ExportVectorPdfAsync (string projectid, ExportVectorSeparationResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await ExportVectorPdfAsyncWithHttpInfo(projectid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export Vector Separation of the given project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ExportVectorPdfAsyncWithHttpInfo (string projectid, ExportVectorSeparationResource body = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->ExportVectorPdf");

            var localVarPath = "/jobs/{projectid}/export/pdf-vector";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportVectorPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Export XML Project Report of the given project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity ExportXmlReport1 (string projectid, ExportXmlReportResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = ExportXmlReport1WithHttpInfo(projectid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export XML Project Report of the given project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > ExportXmlReport1WithHttpInfo (string projectid, ExportXmlReportResource body = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->ExportXmlReport1");

            var localVarPath = "/jobs/{projectid}/export/report/xml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportXmlReport1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Export XML Project Report of the given project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> ExportXmlReport1Async (string projectid, ExportXmlReportResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await ExportXmlReport1AsyncWithHttpInfo(projectid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export XML Project Report of the given project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ExportXmlReport1AsyncWithHttpInfo (string projectid, ExportXmlReportResource body = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->ExportXmlReport1");

            var localVarPath = "/jobs/{projectid}/export/report/xml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportXmlReport1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Export Zund Cut Center Layout of current project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity ExportZcc (string projectid, ExportZccLayoutResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = ExportZccWithHttpInfo(projectid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export Zund Cut Center Layout of current project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > ExportZccWithHttpInfo (string projectid, ExportZccLayoutResource body = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->ExportZcc");

            var localVarPath = "/jobs/{projectid}/export/die/zcc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportZcc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Export Zund Cut Center Layout of current project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> ExportZccAsync (string projectid, ExportZccLayoutResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await ExportZccAsyncWithHttpInfo(projectid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export Zund Cut Center Layout of current project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ExportZccAsyncWithHttpInfo (string projectid, ExportZccLayoutResource body = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->ExportZcc");

            var localVarPath = "/jobs/{projectid}/export/die/zcc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportZcc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// A single Impose result by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="resultid">ID of result to retrieve</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>LayoutResultEntity</returns>
        public LayoutResultEntity GetImposeResult1 (int? layoutindex, int? resultid, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
             ApiResponse<LayoutResultEntity> localVarResponse = GetImposeResult1WithHttpInfo(layoutindex, resultid, projectid, thumb, thumbWidth, thumbHeight, renderMode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// A single Impose result by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="resultid">ID of result to retrieve</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>ApiResponse of LayoutResultEntity</returns>
        public ApiResponse< LayoutResultEntity > GetImposeResult1WithHttpInfo (int? layoutindex, int? resultid, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->GetImposeResult1");
            // verify the required parameter 'resultid' is set
            if (resultid == null)
                throw new ApiException(400, "Missing required parameter 'resultid' when calling ProjectsAPIApi->GetImposeResult1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->GetImposeResult1");

            var localVarPath = "/jobs/{projectid}/impose/{layoutindex}/result/{resultid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (resultid != null) localVarPathParams.Add("resultid", this.Configuration.ApiClient.ParameterToString(resultid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (thumb != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb", thumb)); // query parameter
            if (thumbWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-width", thumbWidth)); // query parameter
            if (thumbHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-height", thumbHeight)); // query parameter
            if (renderMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "render-mode", renderMode)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetImposeResult1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LayoutResultEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LayoutResultEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LayoutResultEntity)));
        }

        /// <summary>
        /// A single Impose result by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="resultid">ID of result to retrieve</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>Task of LayoutResultEntity</returns>
        public async System.Threading.Tasks.Task<LayoutResultEntity> GetImposeResult1Async (int? layoutindex, int? resultid, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
             ApiResponse<LayoutResultEntity> localVarResponse = await GetImposeResult1AsyncWithHttpInfo(layoutindex, resultid, projectid, thumb, thumbWidth, thumbHeight, renderMode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// A single Impose result by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="resultid">ID of result to retrieve</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>Task of ApiResponse (LayoutResultEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LayoutResultEntity>> GetImposeResult1AsyncWithHttpInfo (int? layoutindex, int? resultid, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->GetImposeResult1");
            // verify the required parameter 'resultid' is set
            if (resultid == null)
                throw new ApiException(400, "Missing required parameter 'resultid' when calling ProjectsAPIApi->GetImposeResult1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->GetImposeResult1");

            var localVarPath = "/jobs/{projectid}/impose/{layoutindex}/result/{resultid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (resultid != null) localVarPathParams.Add("resultid", this.Configuration.ApiClient.ParameterToString(resultid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (thumb != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb", thumb)); // query parameter
            if (thumbWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-width", thumbWidth)); // query parameter
            if (thumbHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-height", thumbHeight)); // query parameter
            if (renderMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "render-mode", renderMode)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetImposeResult1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LayoutResultEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LayoutResultEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LayoutResultEntity)));
        }

        /// <summary>
        /// A list of most recent Impose results 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Include thumbnail images or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>List&lt;LayoutResultEntity&gt;</returns>
        public List<LayoutResultEntity> GetImposeResults1 (int? layoutindex, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
             ApiResponse<List<LayoutResultEntity>> localVarResponse = GetImposeResults1WithHttpInfo(layoutindex, projectid, thumb, thumbWidth, thumbHeight, renderMode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// A list of most recent Impose results 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Include thumbnail images or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>ApiResponse of List&lt;LayoutResultEntity&gt;</returns>
        public ApiResponse< List<LayoutResultEntity> > GetImposeResults1WithHttpInfo (int? layoutindex, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->GetImposeResults1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->GetImposeResults1");

            var localVarPath = "/jobs/{projectid}/impose/{layoutindex}/results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (thumb != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb", thumb)); // query parameter
            if (thumbWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-width", thumbWidth)); // query parameter
            if (thumbHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-height", thumbHeight)); // query parameter
            if (renderMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "render-mode", renderMode)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetImposeResults1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LayoutResultEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<LayoutResultEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LayoutResultEntity>)));
        }

        /// <summary>
        /// A list of most recent Impose results 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Include thumbnail images or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>Task of List&lt;LayoutResultEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<LayoutResultEntity>> GetImposeResults1Async (int? layoutindex, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
             ApiResponse<List<LayoutResultEntity>> localVarResponse = await GetImposeResults1AsyncWithHttpInfo(layoutindex, projectid, thumb, thumbWidth, thumbHeight, renderMode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// A list of most recent Impose results 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Include thumbnail images or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>Task of ApiResponse (List&lt;LayoutResultEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LayoutResultEntity>>> GetImposeResults1AsyncWithHttpInfo (int? layoutindex, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->GetImposeResults1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->GetImposeResults1");

            var localVarPath = "/jobs/{projectid}/impose/{layoutindex}/results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (thumb != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb", thumb)); // query parameter
            if (thumbWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-width", thumbWidth)); // query parameter
            if (thumbHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-height", thumbHeight)); // query parameter
            if (renderMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "render-mode", renderMode)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetImposeResults1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LayoutResultEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<LayoutResultEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LayoutResultEntity>)));
        }

        /// <summary>
        /// Get project at current {projectid} 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="productVersion">Product model version (optional, default to V1)</param>
        /// <returns>PhoenixProject</returns>
        public PhoenixProject GetJob1 (string projectid, string productVersion = null)
        {
             ApiResponse<PhoenixProject> localVarResponse = GetJob1WithHttpInfo(projectid, productVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get project at current {projectid} 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="productVersion">Product model version (optional, default to V1)</param>
        /// <returns>ApiResponse of PhoenixProject</returns>
        public ApiResponse< PhoenixProject > GetJob1WithHttpInfo (string projectid, string productVersion = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->GetJob1");

            var localVarPath = "/jobs/{projectid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (productVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "product-version", productVersion)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJob1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PhoenixProject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PhoenixProject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PhoenixProject)));
        }

        /// <summary>
        /// Get project at current {projectid} 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="productVersion">Product model version (optional, default to V1)</param>
        /// <returns>Task of PhoenixProject</returns>
        public async System.Threading.Tasks.Task<PhoenixProject> GetJob1Async (string projectid, string productVersion = null)
        {
             ApiResponse<PhoenixProject> localVarResponse = await GetJob1AsyncWithHttpInfo(projectid, productVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get project at current {projectid} 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="productVersion">Product model version (optional, default to V1)</param>
        /// <returns>Task of ApiResponse (PhoenixProject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PhoenixProject>> GetJob1AsyncWithHttpInfo (string projectid, string productVersion = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->GetJob1");

            var localVarPath = "/jobs/{projectid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (productVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "product-version", productVersion)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJob1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PhoenixProject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PhoenixProject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PhoenixProject)));
        }

        /// <summary>
        /// Get a list of all projects 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PhoenixProject&gt;</returns>
        public List<PhoenixProject> GetJobs ()
        {
             ApiResponse<List<PhoenixProject>> localVarResponse = GetJobsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of all projects 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PhoenixProject&gt;</returns>
        public ApiResponse< List<PhoenixProject> > GetJobsWithHttpInfo ()
        {

            var localVarPath = "/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PhoenixProject>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PhoenixProject>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PhoenixProject>)));
        }

        /// <summary>
        /// Get a list of all projects 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PhoenixProject&gt;</returns>
        public async System.Threading.Tasks.Task<List<PhoenixProject>> GetJobsAsync ()
        {
             ApiResponse<List<PhoenixProject>> localVarResponse = await GetJobsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of all projects 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PhoenixProject&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PhoenixProject>>> GetJobsAsyncWithHttpInfo ()
        {

            var localVarPath = "/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PhoenixProject>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PhoenixProject>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PhoenixProject>)));
        }

        /// <summary>
        /// Get project layout by index 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="frontThumb">Whether to include thumbnail image of the front surface of this layout (optional, default to false)</param>
        /// <param name="backThumb">Whether to include thumbnail image of the back surface of this layout (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image(s) (optional, default to Colors)</param>
        /// <returns>PhoenixLayoutEntity</returns>
        public PhoenixLayoutEntity GetLayout1 (int? layoutindex, string projectid, bool? frontThumb = null, bool? backThumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
             ApiResponse<PhoenixLayoutEntity> localVarResponse = GetLayout1WithHttpInfo(layoutindex, projectid, frontThumb, backThumb, thumbWidth, thumbHeight, renderMode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get project layout by index 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="frontThumb">Whether to include thumbnail image of the front surface of this layout (optional, default to false)</param>
        /// <param name="backThumb">Whether to include thumbnail image of the back surface of this layout (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image(s) (optional, default to Colors)</param>
        /// <returns>ApiResponse of PhoenixLayoutEntity</returns>
        public ApiResponse< PhoenixLayoutEntity > GetLayout1WithHttpInfo (int? layoutindex, string projectid, bool? frontThumb = null, bool? backThumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->GetLayout1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->GetLayout1");

            var localVarPath = "/jobs/{projectid}/layouts/{layoutindex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (frontThumb != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "front-thumb", frontThumb)); // query parameter
            if (backThumb != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "back-thumb", backThumb)); // query parameter
            if (thumbWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-width", thumbWidth)); // query parameter
            if (thumbHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-height", thumbHeight)); // query parameter
            if (renderMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "render-mode", renderMode)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLayout1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PhoenixLayoutEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PhoenixLayoutEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PhoenixLayoutEntity)));
        }

        /// <summary>
        /// Get project layout by index 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="frontThumb">Whether to include thumbnail image of the front surface of this layout (optional, default to false)</param>
        /// <param name="backThumb">Whether to include thumbnail image of the back surface of this layout (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image(s) (optional, default to Colors)</param>
        /// <returns>Task of PhoenixLayoutEntity</returns>
        public async System.Threading.Tasks.Task<PhoenixLayoutEntity> GetLayout1Async (int? layoutindex, string projectid, bool? frontThumb = null, bool? backThumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
             ApiResponse<PhoenixLayoutEntity> localVarResponse = await GetLayout1AsyncWithHttpInfo(layoutindex, projectid, frontThumb, backThumb, thumbWidth, thumbHeight, renderMode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get project layout by index 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="frontThumb">Whether to include thumbnail image of the front surface of this layout (optional, default to false)</param>
        /// <param name="backThumb">Whether to include thumbnail image of the back surface of this layout (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image(s) (optional, default to Colors)</param>
        /// <returns>Task of ApiResponse (PhoenixLayoutEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PhoenixLayoutEntity>> GetLayout1AsyncWithHttpInfo (int? layoutindex, string projectid, bool? frontThumb = null, bool? backThumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->GetLayout1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->GetLayout1");

            var localVarPath = "/jobs/{projectid}/layouts/{layoutindex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (frontThumb != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "front-thumb", frontThumb)); // query parameter
            if (backThumb != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "back-thumb", backThumb)); // query parameter
            if (thumbWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-width", thumbWidth)); // query parameter
            if (thumbHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-height", thumbHeight)); // query parameter
            if (renderMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "render-mode", renderMode)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLayout1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PhoenixLayoutEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PhoenixLayoutEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PhoenixLayoutEntity)));
        }

        /// <summary>
        /// Get back side of layout 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Whether to include thumbnail image of surface (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>SurfaceEntity</returns>
        public SurfaceEntity GetLayoutBack1 (int? layoutindex, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
             ApiResponse<SurfaceEntity> localVarResponse = GetLayoutBack1WithHttpInfo(layoutindex, projectid, thumb, thumbWidth, thumbHeight, renderMode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get back side of layout 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Whether to include thumbnail image of surface (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>ApiResponse of SurfaceEntity</returns>
        public ApiResponse< SurfaceEntity > GetLayoutBack1WithHttpInfo (int? layoutindex, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->GetLayoutBack1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->GetLayoutBack1");

            var localVarPath = "/jobs/{projectid}/layouts/{layoutindex}/back";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (thumb != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb", thumb)); // query parameter
            if (thumbWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-width", thumbWidth)); // query parameter
            if (thumbHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-height", thumbHeight)); // query parameter
            if (renderMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "render-mode", renderMode)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLayoutBack1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SurfaceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SurfaceEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SurfaceEntity)));
        }

        /// <summary>
        /// Get back side of layout 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Whether to include thumbnail image of surface (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>Task of SurfaceEntity</returns>
        public async System.Threading.Tasks.Task<SurfaceEntity> GetLayoutBack1Async (int? layoutindex, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
             ApiResponse<SurfaceEntity> localVarResponse = await GetLayoutBack1AsyncWithHttpInfo(layoutindex, projectid, thumb, thumbWidth, thumbHeight, renderMode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get back side of layout 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Whether to include thumbnail image of surface (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>Task of ApiResponse (SurfaceEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SurfaceEntity>> GetLayoutBack1AsyncWithHttpInfo (int? layoutindex, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->GetLayoutBack1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->GetLayoutBack1");

            var localVarPath = "/jobs/{projectid}/layouts/{layoutindex}/back";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (thumb != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb", thumb)); // query parameter
            if (thumbWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-width", thumbWidth)); // query parameter
            if (thumbHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-height", thumbHeight)); // query parameter
            if (renderMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "render-mode", renderMode)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLayoutBack1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SurfaceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SurfaceEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SurfaceEntity)));
        }

        /// <summary>
        /// Get front side of layout 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Whether to include thumbnail image of surface (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>SurfaceEntity</returns>
        public SurfaceEntity GetLayoutFront1 (int? layoutindex, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
             ApiResponse<SurfaceEntity> localVarResponse = GetLayoutFront1WithHttpInfo(layoutindex, projectid, thumb, thumbWidth, thumbHeight, renderMode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get front side of layout 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Whether to include thumbnail image of surface (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>ApiResponse of SurfaceEntity</returns>
        public ApiResponse< SurfaceEntity > GetLayoutFront1WithHttpInfo (int? layoutindex, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->GetLayoutFront1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->GetLayoutFront1");

            var localVarPath = "/jobs/{projectid}/layouts/{layoutindex}/front";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (thumb != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb", thumb)); // query parameter
            if (thumbWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-width", thumbWidth)); // query parameter
            if (thumbHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-height", thumbHeight)); // query parameter
            if (renderMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "render-mode", renderMode)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLayoutFront1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SurfaceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SurfaceEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SurfaceEntity)));
        }

        /// <summary>
        /// Get front side of layout 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Whether to include thumbnail image of surface (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>Task of SurfaceEntity</returns>
        public async System.Threading.Tasks.Task<SurfaceEntity> GetLayoutFront1Async (int? layoutindex, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
             ApiResponse<SurfaceEntity> localVarResponse = await GetLayoutFront1AsyncWithHttpInfo(layoutindex, projectid, thumb, thumbWidth, thumbHeight, renderMode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get front side of layout 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Whether to include thumbnail image of surface (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>Task of ApiResponse (SurfaceEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SurfaceEntity>> GetLayoutFront1AsyncWithHttpInfo (int? layoutindex, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->GetLayoutFront1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->GetLayoutFront1");

            var localVarPath = "/jobs/{projectid}/layouts/{layoutindex}/front";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (thumb != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb", thumb)); // query parameter
            if (thumbWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-width", thumbWidth)); // query parameter
            if (thumbHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-height", thumbHeight)); // query parameter
            if (renderMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "render-mode", renderMode)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLayoutFront1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SurfaceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SurfaceEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SurfaceEntity)));
        }

        /// <summary>
        /// Get layout plate 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>PlateEntity</returns>
        public PlateEntity GetLayoutPlate1 (int? layoutindex, string projectid)
        {
             ApiResponse<PlateEntity> localVarResponse = GetLayoutPlate1WithHttpInfo(layoutindex, projectid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get layout plate 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ApiResponse of PlateEntity</returns>
        public ApiResponse< PlateEntity > GetLayoutPlate1WithHttpInfo (int? layoutindex, string projectid)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->GetLayoutPlate1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->GetLayoutPlate1");

            var localVarPath = "/jobs/{projectid}/layouts/{layoutindex}/plate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLayoutPlate1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PlateEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PlateEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlateEntity)));
        }

        /// <summary>
        /// Get layout plate 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of PlateEntity</returns>
        public async System.Threading.Tasks.Task<PlateEntity> GetLayoutPlate1Async (int? layoutindex, string projectid)
        {
             ApiResponse<PlateEntity> localVarResponse = await GetLayoutPlate1AsyncWithHttpInfo(layoutindex, projectid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get layout plate 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ApiResponse (PlateEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PlateEntity>> GetLayoutPlate1AsyncWithHttpInfo (int? layoutindex, string projectid)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->GetLayoutPlate1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->GetLayoutPlate1");

            var localVarPath = "/jobs/{projectid}/layouts/{layoutindex}/plate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLayoutPlate1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PlateEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PlateEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlateEntity)));
        }

        /// <summary>
        /// Get layout press 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>PressEntity</returns>
        public PressEntity GetLayoutPress1 (int? layoutindex, string projectid)
        {
             ApiResponse<PressEntity> localVarResponse = GetLayoutPress1WithHttpInfo(layoutindex, projectid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get layout press 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ApiResponse of PressEntity</returns>
        public ApiResponse< PressEntity > GetLayoutPress1WithHttpInfo (int? layoutindex, string projectid)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->GetLayoutPress1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->GetLayoutPress1");

            var localVarPath = "/jobs/{projectid}/layouts/{layoutindex}/press";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLayoutPress1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PressEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PressEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PressEntity)));
        }

        /// <summary>
        /// Get layout press 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of PressEntity</returns>
        public async System.Threading.Tasks.Task<PressEntity> GetLayoutPress1Async (int? layoutindex, string projectid)
        {
             ApiResponse<PressEntity> localVarResponse = await GetLayoutPress1AsyncWithHttpInfo(layoutindex, projectid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get layout press 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ApiResponse (PressEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PressEntity>> GetLayoutPress1AsyncWithHttpInfo (int? layoutindex, string projectid)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->GetLayoutPress1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->GetLayoutPress1");

            var localVarPath = "/jobs/{projectid}/layouts/{layoutindex}/press";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLayoutPress1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PressEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PressEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PressEntity)));
        }

        /// <summary>
        /// Get layout sheet 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>SheetEntity</returns>
        public SheetEntity GetLayoutSheet1 (int? layoutindex, string projectid)
        {
             ApiResponse<SheetEntity> localVarResponse = GetLayoutSheet1WithHttpInfo(layoutindex, projectid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get layout sheet 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ApiResponse of SheetEntity</returns>
        public ApiResponse< SheetEntity > GetLayoutSheet1WithHttpInfo (int? layoutindex, string projectid)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->GetLayoutSheet1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->GetLayoutSheet1");

            var localVarPath = "/jobs/{projectid}/layouts/{layoutindex}/sheet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLayoutSheet1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SheetEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SheetEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SheetEntity)));
        }

        /// <summary>
        /// Get layout sheet 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of SheetEntity</returns>
        public async System.Threading.Tasks.Task<SheetEntity> GetLayoutSheet1Async (int? layoutindex, string projectid)
        {
             ApiResponse<SheetEntity> localVarResponse = await GetLayoutSheet1AsyncWithHttpInfo(layoutindex, projectid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get layout sheet 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ApiResponse (SheetEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SheetEntity>> GetLayoutSheet1AsyncWithHttpInfo (int? layoutindex, string projectid)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->GetLayoutSheet1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->GetLayoutSheet1");

            var localVarPath = "/jobs/{projectid}/layouts/{layoutindex}/sheet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLayoutSheet1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SheetEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SheetEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SheetEntity)));
        }

        /// <summary>
        /// Get list of all layouts in the project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="frontThumb">Whether to include thumbnail images of the front surfaces of the layouts (optional, default to false)</param>
        /// <param name="backThumb">Whether to include thumbnail images of the back surfaces of the layouts (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail images (optional, default to Colors)</param>
        /// <returns>List&lt;PhoenixLayoutEntity&gt;</returns>
        public List<PhoenixLayoutEntity> GetLayouts1 (string projectid, bool? frontThumb = null, bool? backThumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
             ApiResponse<List<PhoenixLayoutEntity>> localVarResponse = GetLayouts1WithHttpInfo(projectid, frontThumb, backThumb, thumbWidth, thumbHeight, renderMode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of all layouts in the project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="frontThumb">Whether to include thumbnail images of the front surfaces of the layouts (optional, default to false)</param>
        /// <param name="backThumb">Whether to include thumbnail images of the back surfaces of the layouts (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail images (optional, default to Colors)</param>
        /// <returns>ApiResponse of List&lt;PhoenixLayoutEntity&gt;</returns>
        public ApiResponse< List<PhoenixLayoutEntity> > GetLayouts1WithHttpInfo (string projectid, bool? frontThumb = null, bool? backThumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->GetLayouts1");

            var localVarPath = "/jobs/{projectid}/layouts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (frontThumb != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "front-thumb", frontThumb)); // query parameter
            if (backThumb != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "back-thumb", backThumb)); // query parameter
            if (thumbWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-width", thumbWidth)); // query parameter
            if (thumbHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-height", thumbHeight)); // query parameter
            if (renderMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "render-mode", renderMode)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLayouts1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PhoenixLayoutEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PhoenixLayoutEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PhoenixLayoutEntity>)));
        }

        /// <summary>
        /// Get list of all layouts in the project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="frontThumb">Whether to include thumbnail images of the front surfaces of the layouts (optional, default to false)</param>
        /// <param name="backThumb">Whether to include thumbnail images of the back surfaces of the layouts (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail images (optional, default to Colors)</param>
        /// <returns>Task of List&lt;PhoenixLayoutEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<PhoenixLayoutEntity>> GetLayouts1Async (string projectid, bool? frontThumb = null, bool? backThumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
             ApiResponse<List<PhoenixLayoutEntity>> localVarResponse = await GetLayouts1AsyncWithHttpInfo(projectid, frontThumb, backThumb, thumbWidth, thumbHeight, renderMode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of all layouts in the project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="frontThumb">Whether to include thumbnail images of the front surfaces of the layouts (optional, default to false)</param>
        /// <param name="backThumb">Whether to include thumbnail images of the back surfaces of the layouts (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail images (optional, default to Colors)</param>
        /// <returns>Task of ApiResponse (List&lt;PhoenixLayoutEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PhoenixLayoutEntity>>> GetLayouts1AsyncWithHttpInfo (string projectid, bool? frontThumb = null, bool? backThumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->GetLayouts1");

            var localVarPath = "/jobs/{projectid}/layouts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (frontThumb != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "front-thumb", frontThumb)); // query parameter
            if (backThumb != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "back-thumb", backThumb)); // query parameter
            if (thumbWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-width", thumbWidth)); // query parameter
            if (thumbHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-height", thumbHeight)); // query parameter
            if (renderMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "render-mode", renderMode)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLayouts1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PhoenixLayoutEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PhoenixLayoutEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PhoenixLayoutEntity>)));
        }

        /// <summary>
        /// A single Optimize result by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="resultid">ID of result to retrieve</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>LayoutResultEntity</returns>
        public LayoutResultEntity GetOptimizeResult1 (int? layoutindex, int? resultid, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
             ApiResponse<LayoutResultEntity> localVarResponse = GetOptimizeResult1WithHttpInfo(layoutindex, resultid, projectid, thumb, thumbWidth, thumbHeight, renderMode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// A single Optimize result by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="resultid">ID of result to retrieve</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>ApiResponse of LayoutResultEntity</returns>
        public ApiResponse< LayoutResultEntity > GetOptimizeResult1WithHttpInfo (int? layoutindex, int? resultid, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->GetOptimizeResult1");
            // verify the required parameter 'resultid' is set
            if (resultid == null)
                throw new ApiException(400, "Missing required parameter 'resultid' when calling ProjectsAPIApi->GetOptimizeResult1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->GetOptimizeResult1");

            var localVarPath = "/jobs/{projectid}/optimize/{layoutindex}/result/{resultid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (resultid != null) localVarPathParams.Add("resultid", this.Configuration.ApiClient.ParameterToString(resultid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (thumb != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb", thumb)); // query parameter
            if (thumbWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-width", thumbWidth)); // query parameter
            if (thumbHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-height", thumbHeight)); // query parameter
            if (renderMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "render-mode", renderMode)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOptimizeResult1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LayoutResultEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LayoutResultEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LayoutResultEntity)));
        }

        /// <summary>
        /// A single Optimize result by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="resultid">ID of result to retrieve</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>Task of LayoutResultEntity</returns>
        public async System.Threading.Tasks.Task<LayoutResultEntity> GetOptimizeResult1Async (int? layoutindex, int? resultid, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
             ApiResponse<LayoutResultEntity> localVarResponse = await GetOptimizeResult1AsyncWithHttpInfo(layoutindex, resultid, projectid, thumb, thumbWidth, thumbHeight, renderMode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// A single Optimize result by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="resultid">ID of result to retrieve</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>Task of ApiResponse (LayoutResultEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LayoutResultEntity>> GetOptimizeResult1AsyncWithHttpInfo (int? layoutindex, int? resultid, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->GetOptimizeResult1");
            // verify the required parameter 'resultid' is set
            if (resultid == null)
                throw new ApiException(400, "Missing required parameter 'resultid' when calling ProjectsAPIApi->GetOptimizeResult1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->GetOptimizeResult1");

            var localVarPath = "/jobs/{projectid}/optimize/{layoutindex}/result/{resultid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (resultid != null) localVarPathParams.Add("resultid", this.Configuration.ApiClient.ParameterToString(resultid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (thumb != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb", thumb)); // query parameter
            if (thumbWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-width", thumbWidth)); // query parameter
            if (thumbHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-height", thumbHeight)); // query parameter
            if (renderMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "render-mode", renderMode)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOptimizeResult1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LayoutResultEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LayoutResultEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LayoutResultEntity)));
        }

        /// <summary>
        /// A list of most recent Optimize results 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Include thumbnail images or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>List&lt;LayoutResultEntity&gt;</returns>
        public List<LayoutResultEntity> GetOptimizeResults1 (int? layoutindex, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
             ApiResponse<List<LayoutResultEntity>> localVarResponse = GetOptimizeResults1WithHttpInfo(layoutindex, projectid, thumb, thumbWidth, thumbHeight, renderMode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// A list of most recent Optimize results 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Include thumbnail images or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>ApiResponse of List&lt;LayoutResultEntity&gt;</returns>
        public ApiResponse< List<LayoutResultEntity> > GetOptimizeResults1WithHttpInfo (int? layoutindex, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->GetOptimizeResults1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->GetOptimizeResults1");

            var localVarPath = "/jobs/{projectid}/optimize/{layoutindex}/results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (thumb != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb", thumb)); // query parameter
            if (thumbWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-width", thumbWidth)); // query parameter
            if (thumbHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-height", thumbHeight)); // query parameter
            if (renderMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "render-mode", renderMode)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOptimizeResults1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LayoutResultEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<LayoutResultEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LayoutResultEntity>)));
        }

        /// <summary>
        /// A list of most recent Optimize results 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Include thumbnail images or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>Task of List&lt;LayoutResultEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<LayoutResultEntity>> GetOptimizeResults1Async (int? layoutindex, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
             ApiResponse<List<LayoutResultEntity>> localVarResponse = await GetOptimizeResults1AsyncWithHttpInfo(layoutindex, projectid, thumb, thumbWidth, thumbHeight, renderMode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// A list of most recent Optimize results 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Include thumbnail images or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>Task of ApiResponse (List&lt;LayoutResultEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LayoutResultEntity>>> GetOptimizeResults1AsyncWithHttpInfo (int? layoutindex, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->GetOptimizeResults1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->GetOptimizeResults1");

            var localVarPath = "/jobs/{projectid}/optimize/{layoutindex}/results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (thumb != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb", thumb)); // query parameter
            if (thumbWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-width", thumbWidth)); // query parameter
            if (thumbHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-height", thumbHeight)); // query parameter
            if (renderMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "render-mode", renderMode)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOptimizeResults1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LayoutResultEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<LayoutResultEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LayoutResultEntity>)));
        }

        /// <summary>
        /// Get output project file by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileid">ID of output project file to get</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>JobFilesEntity</returns>
        public JobFilesEntity GetOutputFile1 (string fileid, string projectid)
        {
             ApiResponse<JobFilesEntity> localVarResponse = GetOutputFile1WithHttpInfo(fileid, projectid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get output project file by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileid">ID of output project file to get</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ApiResponse of JobFilesEntity</returns>
        public ApiResponse< JobFilesEntity > GetOutputFile1WithHttpInfo (string fileid, string projectid)
        {
            // verify the required parameter 'fileid' is set
            if (fileid == null)
                throw new ApiException(400, "Missing required parameter 'fileid' when calling ProjectsAPIApi->GetOutputFile1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->GetOutputFile1");

            var localVarPath = "/jobs/{projectid}/files/output/{fileid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileid != null) localVarPathParams.Add("fileid", this.Configuration.ApiClient.ParameterToString(fileid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOutputFile1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobFilesEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JobFilesEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobFilesEntity)));
        }

        /// <summary>
        /// Get output project file by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileid">ID of output project file to get</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of JobFilesEntity</returns>
        public async System.Threading.Tasks.Task<JobFilesEntity> GetOutputFile1Async (string fileid, string projectid)
        {
             ApiResponse<JobFilesEntity> localVarResponse = await GetOutputFile1AsyncWithHttpInfo(fileid, projectid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get output project file by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileid">ID of output project file to get</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ApiResponse (JobFilesEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JobFilesEntity>> GetOutputFile1AsyncWithHttpInfo (string fileid, string projectid)
        {
            // verify the required parameter 'fileid' is set
            if (fileid == null)
                throw new ApiException(400, "Missing required parameter 'fileid' when calling ProjectsAPIApi->GetOutputFile1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->GetOutputFile1");

            var localVarPath = "/jobs/{projectid}/files/output/{fileid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileid != null) localVarPathParams.Add("fileid", this.Configuration.ApiClient.ParameterToString(fileid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOutputFile1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobFilesEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JobFilesEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobFilesEntity)));
        }

        /// <summary>
        /// Get all output files currently saved to this project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <returns>List&lt;JobFilesEntity&gt;</returns>
        public List<JobFilesEntity> GetOutputFiles1 (string projectid)
        {
             ApiResponse<List<JobFilesEntity>> localVarResponse = GetOutputFiles1WithHttpInfo(projectid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all output files currently saved to this project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ApiResponse of List&lt;JobFilesEntity&gt;</returns>
        public ApiResponse< List<JobFilesEntity> > GetOutputFiles1WithHttpInfo (string projectid)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->GetOutputFiles1");

            var localVarPath = "/jobs/{projectid}/files/output";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOutputFiles1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<JobFilesEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<JobFilesEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<JobFilesEntity>)));
        }

        /// <summary>
        /// Get all output files currently saved to this project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of List&lt;JobFilesEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<JobFilesEntity>> GetOutputFiles1Async (string projectid)
        {
             ApiResponse<List<JobFilesEntity>> localVarResponse = await GetOutputFiles1AsyncWithHttpInfo(projectid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all output files currently saved to this project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ApiResponse (List&lt;JobFilesEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<JobFilesEntity>>> GetOutputFiles1AsyncWithHttpInfo (string projectid)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->GetOutputFiles1");

            var localVarPath = "/jobs/{projectid}/files/output";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOutputFiles1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<JobFilesEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<JobFilesEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<JobFilesEntity>)));
        }

        /// <summary>
        /// A single plan result by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resultid">ID of result to retrieve</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="layouts">Include individual layout results (optional, default to false)</param>
        /// <param name="thumb">Include thumbnail images in layout results or not (optional, default to false)</param>
        /// <param name="planThumb">Include composite thumbnail image of layouts in plan result or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in layout result thumbnail images (optional, default to Colors)</param>
        /// <returns>PlanResultEntity</returns>
        public PlanResultEntity GetPlanResult1 (int? resultid, string projectid, bool? layouts = null, bool? thumb = null, bool? planThumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
             ApiResponse<PlanResultEntity> localVarResponse = GetPlanResult1WithHttpInfo(resultid, projectid, layouts, thumb, planThumb, thumbWidth, thumbHeight, renderMode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// A single plan result by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resultid">ID of result to retrieve</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="layouts">Include individual layout results (optional, default to false)</param>
        /// <param name="thumb">Include thumbnail images in layout results or not (optional, default to false)</param>
        /// <param name="planThumb">Include composite thumbnail image of layouts in plan result or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in layout result thumbnail images (optional, default to Colors)</param>
        /// <returns>ApiResponse of PlanResultEntity</returns>
        public ApiResponse< PlanResultEntity > GetPlanResult1WithHttpInfo (int? resultid, string projectid, bool? layouts = null, bool? thumb = null, bool? planThumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
            // verify the required parameter 'resultid' is set
            if (resultid == null)
                throw new ApiException(400, "Missing required parameter 'resultid' when calling ProjectsAPIApi->GetPlanResult1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->GetPlanResult1");

            var localVarPath = "/jobs/{projectid}/plan/results/{resultid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resultid != null) localVarPathParams.Add("resultid", this.Configuration.ApiClient.ParameterToString(resultid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (layouts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "layouts", layouts)); // query parameter
            if (thumb != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb", thumb)); // query parameter
            if (planThumb != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "plan-thumb", planThumb)); // query parameter
            if (thumbWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-width", thumbWidth)); // query parameter
            if (thumbHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-height", thumbHeight)); // query parameter
            if (renderMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "render-mode", renderMode)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlanResult1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PlanResultEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PlanResultEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlanResultEntity)));
        }

        /// <summary>
        /// A single plan result by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resultid">ID of result to retrieve</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="layouts">Include individual layout results (optional, default to false)</param>
        /// <param name="thumb">Include thumbnail images in layout results or not (optional, default to false)</param>
        /// <param name="planThumb">Include composite thumbnail image of layouts in plan result or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in layout result thumbnail images (optional, default to Colors)</param>
        /// <returns>Task of PlanResultEntity</returns>
        public async System.Threading.Tasks.Task<PlanResultEntity> GetPlanResult1Async (int? resultid, string projectid, bool? layouts = null, bool? thumb = null, bool? planThumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
             ApiResponse<PlanResultEntity> localVarResponse = await GetPlanResult1AsyncWithHttpInfo(resultid, projectid, layouts, thumb, planThumb, thumbWidth, thumbHeight, renderMode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// A single plan result by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resultid">ID of result to retrieve</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="layouts">Include individual layout results (optional, default to false)</param>
        /// <param name="thumb">Include thumbnail images in layout results or not (optional, default to false)</param>
        /// <param name="planThumb">Include composite thumbnail image of layouts in plan result or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in layout result thumbnail images (optional, default to Colors)</param>
        /// <returns>Task of ApiResponse (PlanResultEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PlanResultEntity>> GetPlanResult1AsyncWithHttpInfo (int? resultid, string projectid, bool? layouts = null, bool? thumb = null, bool? planThumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
            // verify the required parameter 'resultid' is set
            if (resultid == null)
                throw new ApiException(400, "Missing required parameter 'resultid' when calling ProjectsAPIApi->GetPlanResult1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->GetPlanResult1");

            var localVarPath = "/jobs/{projectid}/plan/results/{resultid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resultid != null) localVarPathParams.Add("resultid", this.Configuration.ApiClient.ParameterToString(resultid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (layouts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "layouts", layouts)); // query parameter
            if (thumb != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb", thumb)); // query parameter
            if (planThumb != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "plan-thumb", planThumb)); // query parameter
            if (thumbWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-width", thumbWidth)); // query parameter
            if (thumbHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-height", thumbHeight)); // query parameter
            if (renderMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "render-mode", renderMode)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlanResult1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PlanResultEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PlanResultEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlanResultEntity)));
        }

        /// <summary>
        /// A list of most recent Plan results 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="limit">Optional limit to number of results returned.  0 or not-specified signifies return all results. (optional, default to 0)</param>
        /// <param name="start">Optional 1-based start index of results after sorting (optional, default to 0)</param>
        /// <param name="sorting">Optional sorting to control order of results.  By default results are sorted by lowest cost first. (optional, default to Cost)</param>
        /// <param name="layouts">Include individual layout results (optional, default to false)</param>
        /// <param name="thumb">Include individual thumbnail images in layout results or not (optional, default to false)</param>
        /// <param name="planThumb">Include composite thumbnail image of layouts in plan result or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in layout result thumbnail images.  Note: Artwork rendering can be compute intensive and result in slow response times, especially when there are many results being returned. (optional, default to Colors)</param>
        /// <returns>List&lt;PlanResultEntity&gt;</returns>
        public List<PlanResultEntity> GetPlanResults1 (string projectid, int? limit = null, int? start = null, string sorting = null, bool? layouts = null, bool? thumb = null, bool? planThumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
             ApiResponse<List<PlanResultEntity>> localVarResponse = GetPlanResults1WithHttpInfo(projectid, limit, start, sorting, layouts, thumb, planThumb, thumbWidth, thumbHeight, renderMode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// A list of most recent Plan results 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="limit">Optional limit to number of results returned.  0 or not-specified signifies return all results. (optional, default to 0)</param>
        /// <param name="start">Optional 1-based start index of results after sorting (optional, default to 0)</param>
        /// <param name="sorting">Optional sorting to control order of results.  By default results are sorted by lowest cost first. (optional, default to Cost)</param>
        /// <param name="layouts">Include individual layout results (optional, default to false)</param>
        /// <param name="thumb">Include individual thumbnail images in layout results or not (optional, default to false)</param>
        /// <param name="planThumb">Include composite thumbnail image of layouts in plan result or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in layout result thumbnail images.  Note: Artwork rendering can be compute intensive and result in slow response times, especially when there are many results being returned. (optional, default to Colors)</param>
        /// <returns>ApiResponse of List&lt;PlanResultEntity&gt;</returns>
        public ApiResponse< List<PlanResultEntity> > GetPlanResults1WithHttpInfo (string projectid, int? limit = null, int? start = null, string sorting = null, bool? layouts = null, bool? thumb = null, bool? planThumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->GetPlanResults1");

            var localVarPath = "/jobs/{projectid}/plan/results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (sorting != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sorting", sorting)); // query parameter
            if (layouts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "layouts", layouts)); // query parameter
            if (thumb != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb", thumb)); // query parameter
            if (planThumb != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "plan-thumb", planThumb)); // query parameter
            if (thumbWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-width", thumbWidth)); // query parameter
            if (thumbHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-height", thumbHeight)); // query parameter
            if (renderMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "render-mode", renderMode)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlanResults1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PlanResultEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PlanResultEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PlanResultEntity>)));
        }

        /// <summary>
        /// A list of most recent Plan results 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="limit">Optional limit to number of results returned.  0 or not-specified signifies return all results. (optional, default to 0)</param>
        /// <param name="start">Optional 1-based start index of results after sorting (optional, default to 0)</param>
        /// <param name="sorting">Optional sorting to control order of results.  By default results are sorted by lowest cost first. (optional, default to Cost)</param>
        /// <param name="layouts">Include individual layout results (optional, default to false)</param>
        /// <param name="thumb">Include individual thumbnail images in layout results or not (optional, default to false)</param>
        /// <param name="planThumb">Include composite thumbnail image of layouts in plan result or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in layout result thumbnail images.  Note: Artwork rendering can be compute intensive and result in slow response times, especially when there are many results being returned. (optional, default to Colors)</param>
        /// <returns>Task of List&lt;PlanResultEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<PlanResultEntity>> GetPlanResults1Async (string projectid, int? limit = null, int? start = null, string sorting = null, bool? layouts = null, bool? thumb = null, bool? planThumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
             ApiResponse<List<PlanResultEntity>> localVarResponse = await GetPlanResults1AsyncWithHttpInfo(projectid, limit, start, sorting, layouts, thumb, planThumb, thumbWidth, thumbHeight, renderMode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// A list of most recent Plan results 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="limit">Optional limit to number of results returned.  0 or not-specified signifies return all results. (optional, default to 0)</param>
        /// <param name="start">Optional 1-based start index of results after sorting (optional, default to 0)</param>
        /// <param name="sorting">Optional sorting to control order of results.  By default results are sorted by lowest cost first. (optional, default to Cost)</param>
        /// <param name="layouts">Include individual layout results (optional, default to false)</param>
        /// <param name="thumb">Include individual thumbnail images in layout results or not (optional, default to false)</param>
        /// <param name="planThumb">Include composite thumbnail image of layouts in plan result or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in layout result thumbnail images.  Note: Artwork rendering can be compute intensive and result in slow response times, especially when there are many results being returned. (optional, default to Colors)</param>
        /// <returns>Task of ApiResponse (List&lt;PlanResultEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PlanResultEntity>>> GetPlanResults1AsyncWithHttpInfo (string projectid, int? limit = null, int? start = null, string sorting = null, bool? layouts = null, bool? thumb = null, bool? planThumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->GetPlanResults1");

            var localVarPath = "/jobs/{projectid}/plan/results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (sorting != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sorting", sorting)); // query parameter
            if (layouts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "layouts", layouts)); // query parameter
            if (thumb != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb", thumb)); // query parameter
            if (planThumb != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "plan-thumb", planThumb)); // query parameter
            if (thumbWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-width", thumbWidth)); // query parameter
            if (thumbHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-height", thumbHeight)); // query parameter
            if (renderMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "render-mode", renderMode)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlanResults1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PlanResultEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PlanResultEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PlanResultEntity>)));
        }

        /// <summary>
        /// A single Populate result by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="resultid">ID of result to retrieve</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>LayoutResultEntity</returns>
        public LayoutResultEntity GetPopulateResult1 (int? layoutindex, int? resultid, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
             ApiResponse<LayoutResultEntity> localVarResponse = GetPopulateResult1WithHttpInfo(layoutindex, resultid, projectid, thumb, thumbWidth, thumbHeight, renderMode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// A single Populate result by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="resultid">ID of result to retrieve</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>ApiResponse of LayoutResultEntity</returns>
        public ApiResponse< LayoutResultEntity > GetPopulateResult1WithHttpInfo (int? layoutindex, int? resultid, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->GetPopulateResult1");
            // verify the required parameter 'resultid' is set
            if (resultid == null)
                throw new ApiException(400, "Missing required parameter 'resultid' when calling ProjectsAPIApi->GetPopulateResult1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->GetPopulateResult1");

            var localVarPath = "/jobs/{projectid}/populate/{layoutindex}/result/{resultid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (resultid != null) localVarPathParams.Add("resultid", this.Configuration.ApiClient.ParameterToString(resultid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (thumb != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb", thumb)); // query parameter
            if (thumbWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-width", thumbWidth)); // query parameter
            if (thumbHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-height", thumbHeight)); // query parameter
            if (renderMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "render-mode", renderMode)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPopulateResult1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LayoutResultEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LayoutResultEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LayoutResultEntity)));
        }

        /// <summary>
        /// A single Populate result by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="resultid">ID of result to retrieve</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>Task of LayoutResultEntity</returns>
        public async System.Threading.Tasks.Task<LayoutResultEntity> GetPopulateResult1Async (int? layoutindex, int? resultid, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
             ApiResponse<LayoutResultEntity> localVarResponse = await GetPopulateResult1AsyncWithHttpInfo(layoutindex, resultid, projectid, thumb, thumbWidth, thumbHeight, renderMode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// A single Populate result by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="resultid">ID of result to retrieve</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Include thumbnail image or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>Task of ApiResponse (LayoutResultEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LayoutResultEntity>> GetPopulateResult1AsyncWithHttpInfo (int? layoutindex, int? resultid, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->GetPopulateResult1");
            // verify the required parameter 'resultid' is set
            if (resultid == null)
                throw new ApiException(400, "Missing required parameter 'resultid' when calling ProjectsAPIApi->GetPopulateResult1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->GetPopulateResult1");

            var localVarPath = "/jobs/{projectid}/populate/{layoutindex}/result/{resultid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (resultid != null) localVarPathParams.Add("resultid", this.Configuration.ApiClient.ParameterToString(resultid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (thumb != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb", thumb)); // query parameter
            if (thumbWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-width", thumbWidth)); // query parameter
            if (thumbHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-height", thumbHeight)); // query parameter
            if (renderMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "render-mode", renderMode)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPopulateResult1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LayoutResultEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LayoutResultEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LayoutResultEntity)));
        }

        /// <summary>
        /// A list of most recent Populate results 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Include thumbnail images or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>List&lt;LayoutResultEntity&gt;</returns>
        public List<LayoutResultEntity> GetPopulateResults1 (int? layoutindex, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
             ApiResponse<List<LayoutResultEntity>> localVarResponse = GetPopulateResults1WithHttpInfo(layoutindex, projectid, thumb, thumbWidth, thumbHeight, renderMode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// A list of most recent Populate results 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Include thumbnail images or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>ApiResponse of List&lt;LayoutResultEntity&gt;</returns>
        public ApiResponse< List<LayoutResultEntity> > GetPopulateResults1WithHttpInfo (int? layoutindex, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->GetPopulateResults1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->GetPopulateResults1");

            var localVarPath = "/jobs/{projectid}/populate/{layoutindex}/results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (thumb != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb", thumb)); // query parameter
            if (thumbWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-width", thumbWidth)); // query parameter
            if (thumbHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-height", thumbHeight)); // query parameter
            if (renderMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "render-mode", renderMode)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPopulateResults1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LayoutResultEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<LayoutResultEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LayoutResultEntity>)));
        }

        /// <summary>
        /// A list of most recent Populate results 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Include thumbnail images or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>Task of List&lt;LayoutResultEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<LayoutResultEntity>> GetPopulateResults1Async (int? layoutindex, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
             ApiResponse<List<LayoutResultEntity>> localVarResponse = await GetPopulateResults1AsyncWithHttpInfo(layoutindex, projectid, thumb, thumbWidth, thumbHeight, renderMode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// A list of most recent Populate results 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Include thumbnail images or not (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>Task of ApiResponse (List&lt;LayoutResultEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LayoutResultEntity>>> GetPopulateResults1AsyncWithHttpInfo (int? layoutindex, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->GetPopulateResults1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->GetPopulateResults1");

            var localVarPath = "/jobs/{projectid}/populate/{layoutindex}/results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (thumb != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb", thumb)); // query parameter
            if (thumbWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-width", thumbWidth)); // query parameter
            if (thumbHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-height", thumbHeight)); // query parameter
            if (renderMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "render-mode", renderMode)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPopulateResults1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LayoutResultEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<LayoutResultEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LayoutResultEntity>)));
        }

        /// <summary>
        /// Get product with name of {productname} 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productname"></param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Whether to include thumbnail image of product (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>PhoenixProductEntity</returns>
        public PhoenixProductEntity GetProduct1 (string productname, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
             ApiResponse<PhoenixProductEntity> localVarResponse = GetProduct1WithHttpInfo(productname, projectid, thumb, thumbWidth, thumbHeight, renderMode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get product with name of {productname} 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productname"></param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Whether to include thumbnail image of product (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>ApiResponse of PhoenixProductEntity</returns>
        public ApiResponse< PhoenixProductEntity > GetProduct1WithHttpInfo (string productname, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
            // verify the required parameter 'productname' is set
            if (productname == null)
                throw new ApiException(400, "Missing required parameter 'productname' when calling ProjectsAPIApi->GetProduct1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->GetProduct1");

            var localVarPath = "/jobs/{projectid}/products/{productname}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productname != null) localVarPathParams.Add("productname", this.Configuration.ApiClient.ParameterToString(productname)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (thumb != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb", thumb)); // query parameter
            if (thumbWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-width", thumbWidth)); // query parameter
            if (thumbHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-height", thumbHeight)); // query parameter
            if (renderMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "render-mode", renderMode)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProduct1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PhoenixProductEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PhoenixProductEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PhoenixProductEntity)));
        }

        /// <summary>
        /// Get product with name of {productname} 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productname"></param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Whether to include thumbnail image of product (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>Task of PhoenixProductEntity</returns>
        public async System.Threading.Tasks.Task<PhoenixProductEntity> GetProduct1Async (string productname, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
             ApiResponse<PhoenixProductEntity> localVarResponse = await GetProduct1AsyncWithHttpInfo(productname, projectid, thumb, thumbWidth, thumbHeight, renderMode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get product with name of {productname} 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productname"></param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Whether to include thumbnail image of product (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail image (optional, default to Colors)</param>
        /// <returns>Task of ApiResponse (PhoenixProductEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PhoenixProductEntity>> GetProduct1AsyncWithHttpInfo (string productname, string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
            // verify the required parameter 'productname' is set
            if (productname == null)
                throw new ApiException(400, "Missing required parameter 'productname' when calling ProjectsAPIApi->GetProduct1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->GetProduct1");

            var localVarPath = "/jobs/{projectid}/products/{productname}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productname != null) localVarPathParams.Add("productname", this.Configuration.ApiClient.ParameterToString(productname)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (thumb != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb", thumb)); // query parameter
            if (thumbWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-width", thumbWidth)); // query parameter
            if (thumbHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-height", thumbHeight)); // query parameter
            if (renderMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "render-mode", renderMode)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProduct1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PhoenixProductEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PhoenixProductEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PhoenixProductEntity)));
        }

        /// <summary>
        /// Get all products of the current project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Whether to include thumbnail image of products (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail images (optional, default to Colors)</param>
        /// <returns>List&lt;PhoenixProductEntity&gt;</returns>
        public List<PhoenixProductEntity> GetProducts1 (string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
             ApiResponse<List<PhoenixProductEntity>> localVarResponse = GetProducts1WithHttpInfo(projectid, thumb, thumbWidth, thumbHeight, renderMode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all products of the current project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Whether to include thumbnail image of products (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail images (optional, default to Colors)</param>
        /// <returns>ApiResponse of List&lt;PhoenixProductEntity&gt;</returns>
        public ApiResponse< List<PhoenixProductEntity> > GetProducts1WithHttpInfo (string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->GetProducts1");

            var localVarPath = "/jobs/{projectid}/products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (thumb != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb", thumb)); // query parameter
            if (thumbWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-width", thumbWidth)); // query parameter
            if (thumbHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-height", thumbHeight)); // query parameter
            if (renderMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "render-mode", renderMode)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProducts1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PhoenixProductEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PhoenixProductEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PhoenixProductEntity>)));
        }

        /// <summary>
        /// Get all products of the current project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Whether to include thumbnail image of products (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail images (optional, default to Colors)</param>
        /// <returns>Task of List&lt;PhoenixProductEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<PhoenixProductEntity>> GetProducts1Async (string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
             ApiResponse<List<PhoenixProductEntity>> localVarResponse = await GetProducts1AsyncWithHttpInfo(projectid, thumb, thumbWidth, thumbHeight, renderMode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all products of the current project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="thumb">Whether to include thumbnail image of products (optional, default to false)</param>
        /// <param name="thumbWidth">Thumbnail width in pixels (optional, default to 200)</param>
        /// <param name="thumbHeight">Thumbnail height in pixels (optional, default to 200)</param>
        /// <param name="renderMode">Render mode to use in thumbnail images (optional, default to Colors)</param>
        /// <returns>Task of ApiResponse (List&lt;PhoenixProductEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PhoenixProductEntity>>> GetProducts1AsyncWithHttpInfo (string projectid, bool? thumb = null, int? thumbWidth = null, int? thumbHeight = null, string renderMode = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->GetProducts1");

            var localVarPath = "/jobs/{projectid}/products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (thumb != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb", thumb)); // query parameter
            if (thumbWidth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-width", thumbWidth)); // query parameter
            if (thumbHeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "thumb-height", thumbHeight)); // query parameter
            if (renderMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "render-mode", renderMode)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProducts1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PhoenixProductEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PhoenixProductEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PhoenixProductEntity>)));
        }

        /// <summary>
        /// Get uploaded project file by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileid">ID of uploaded project file to get</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>JobFilesEntity</returns>
        public JobFilesEntity GetUploadedFile1 (string fileid, string projectid)
        {
             ApiResponse<JobFilesEntity> localVarResponse = GetUploadedFile1WithHttpInfo(fileid, projectid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get uploaded project file by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileid">ID of uploaded project file to get</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ApiResponse of JobFilesEntity</returns>
        public ApiResponse< JobFilesEntity > GetUploadedFile1WithHttpInfo (string fileid, string projectid)
        {
            // verify the required parameter 'fileid' is set
            if (fileid == null)
                throw new ApiException(400, "Missing required parameter 'fileid' when calling ProjectsAPIApi->GetUploadedFile1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->GetUploadedFile1");

            var localVarPath = "/jobs/{projectid}/files/upload/{fileid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileid != null) localVarPathParams.Add("fileid", this.Configuration.ApiClient.ParameterToString(fileid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUploadedFile1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobFilesEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JobFilesEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobFilesEntity)));
        }

        /// <summary>
        /// Get uploaded project file by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileid">ID of uploaded project file to get</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of JobFilesEntity</returns>
        public async System.Threading.Tasks.Task<JobFilesEntity> GetUploadedFile1Async (string fileid, string projectid)
        {
             ApiResponse<JobFilesEntity> localVarResponse = await GetUploadedFile1AsyncWithHttpInfo(fileid, projectid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get uploaded project file by ID 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileid">ID of uploaded project file to get</param>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ApiResponse (JobFilesEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JobFilesEntity>> GetUploadedFile1AsyncWithHttpInfo (string fileid, string projectid)
        {
            // verify the required parameter 'fileid' is set
            if (fileid == null)
                throw new ApiException(400, "Missing required parameter 'fileid' when calling ProjectsAPIApi->GetUploadedFile1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->GetUploadedFile1");

            var localVarPath = "/jobs/{projectid}/files/upload/{fileid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fileid != null) localVarPathParams.Add("fileid", this.Configuration.ApiClient.ParameterToString(fileid)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUploadedFile1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobFilesEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JobFilesEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobFilesEntity)));
        }

        /// <summary>
        /// Get all files currently uploaded to this project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <returns>List&lt;JobFilesEntity&gt;</returns>
        public List<JobFilesEntity> GetUploadedFiles1 (string projectid)
        {
             ApiResponse<List<JobFilesEntity>> localVarResponse = GetUploadedFiles1WithHttpInfo(projectid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all files currently uploaded to this project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ApiResponse of List&lt;JobFilesEntity&gt;</returns>
        public ApiResponse< List<JobFilesEntity> > GetUploadedFiles1WithHttpInfo (string projectid)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->GetUploadedFiles1");

            var localVarPath = "/jobs/{projectid}/files/upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUploadedFiles1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<JobFilesEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<JobFilesEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<JobFilesEntity>)));
        }

        /// <summary>
        /// Get all files currently uploaded to this project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of List&lt;JobFilesEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<JobFilesEntity>> GetUploadedFiles1Async (string projectid)
        {
             ApiResponse<List<JobFilesEntity>> localVarResponse = await GetUploadedFiles1AsyncWithHttpInfo(projectid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all files currently uploaded to this project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ApiResponse (List&lt;JobFilesEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<JobFilesEntity>>> GetUploadedFiles1AsyncWithHttpInfo (string projectid)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->GetUploadedFiles1");

            var localVarPath = "/jobs/{projectid}/files/upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUploadedFiles1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<JobFilesEntity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<JobFilesEntity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<JobFilesEntity>)));
        }

        /// <summary>
        /// Import die template 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity ImportDieTemplate1 (string projectid, ImportDieTemplateResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = ImportDieTemplate1WithHttpInfo(projectid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import die template 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > ImportDieTemplate1WithHttpInfo (string projectid, ImportDieTemplateResource body = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->ImportDieTemplate1");

            var localVarPath = "/jobs/{projectid}/import/die-template";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportDieTemplate1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Import die template 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> ImportDieTemplate1Async (string projectid, ImportDieTemplateResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await ImportDieTemplate1AsyncWithHttpInfo(projectid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Import die template 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ImportDieTemplate1AsyncWithHttpInfo (string projectid, ImportDieTemplateResource body = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->ImportDieTemplate1");

            var localVarPath = "/jobs/{projectid}/import/die-template";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportDieTemplate1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Import products from CSV file 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity ImportProductCsv (string projectid, ImportProductCsvResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = ImportProductCsvWithHttpInfo(projectid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import products from CSV file 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > ImportProductCsvWithHttpInfo (string projectid, ImportProductCsvResource body = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->ImportProductCsv");

            var localVarPath = "/jobs/{projectid}/products/import/csv";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportProductCsv", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Import products from CSV file 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> ImportProductCsvAsync (string projectid, ImportProductCsvResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await ImportProductCsvAsyncWithHttpInfo(projectid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Import products from CSV file 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ImportProductCsvAsyncWithHttpInfo (string projectid, ImportProductCsvResource body = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->ImportProductCsv");

            var localVarPath = "/jobs/{projectid}/products/import/csv";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportProductCsv", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Run Impose tool to generate layouts 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity Impose1 (int? layoutindex, string projectid, ImposeResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = Impose1WithHttpInfo(layoutindex, projectid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Run Impose tool to generate layouts 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > Impose1WithHttpInfo (int? layoutindex, string projectid, ImposeResource body = null)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->Impose1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->Impose1");

            var localVarPath = "/jobs/{projectid}/impose/{layoutindex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Impose1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Run Impose tool to generate layouts 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> Impose1Async (int? layoutindex, string projectid, ImposeResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await Impose1AsyncWithHttpInfo(layoutindex, projectid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Run Impose tool to generate layouts 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> Impose1AsyncWithHttpInfo (int? layoutindex, string projectid, ImposeResource body = null)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->Impose1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->Impose1");

            var localVarPath = "/jobs/{projectid}/impose/{layoutindex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Impose1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Open existing project file The file needs to be updated via form data.  The filename content disposition header excluding filename extension is used to define the project ID if present, otherwise the existing project ID in the project is used.
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity OpenJob (FormDataContentDisposition file = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = OpenJobWithHttpInfo(file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Open existing project file The file needs to be updated via form data.  The filename content disposition header excluding filename extension is used to define the project ID if present, otherwise the existing project ID in the project is used.
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > OpenJobWithHttpInfo (FormDataContentDisposition file = null)
        {

            var localVarPath = "/jobs/open";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (file != null) localVarFormParams.Add("file", this.Configuration.ApiClient.ParameterToString(file)); // form parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpenJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Open existing project file The file needs to be updated via form data.  The filename content disposition header excluding filename extension is used to define the project ID if present, otherwise the existing project ID in the project is used.
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> OpenJobAsync (FormDataContentDisposition file = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await OpenJobAsyncWithHttpInfo(file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Open existing project file The file needs to be updated via form data.  The filename content disposition header excluding filename extension is used to define the project ID if present, otherwise the existing project ID in the project is used.
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> OpenJobAsyncWithHttpInfo (FormDataContentDisposition file = null)
        {

            var localVarPath = "/jobs/open";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (file != null) localVarFormParams.Add("file", this.Configuration.ApiClient.ParameterToString(file)); // form parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpenJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Run Optimize tool to generate layouts 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity Optimize1 (int? layoutindex, string projectid, OptimizeResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = Optimize1WithHttpInfo(layoutindex, projectid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Run Optimize tool to generate layouts 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > Optimize1WithHttpInfo (int? layoutindex, string projectid, OptimizeResource body = null)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->Optimize1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->Optimize1");

            var localVarPath = "/jobs/{projectid}/optimize/{layoutindex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Optimize1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Run Optimize tool to generate layouts 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> Optimize1Async (int? layoutindex, string projectid, OptimizeResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await Optimize1AsyncWithHttpInfo(layoutindex, projectid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Run Optimize tool to generate layouts 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> Optimize1AsyncWithHttpInfo (int? layoutindex, string projectid, OptimizeResource body = null)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->Optimize1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->Optimize1");

            var localVarPath = "/jobs/{projectid}/optimize/{layoutindex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Optimize1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Place die template 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity PlaceDieTemplate (int? layoutindex, string projectid, PlaceDieTemplateResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = PlaceDieTemplateWithHttpInfo(layoutindex, projectid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Place die template 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > PlaceDieTemplateWithHttpInfo (int? layoutindex, string projectid, PlaceDieTemplateResource body = null)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->PlaceDieTemplate");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->PlaceDieTemplate");

            var localVarPath = "/jobs/{projectid}/layouts/{layoutindex}/place/die-template";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaceDieTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Place die template 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> PlaceDieTemplateAsync (int? layoutindex, string projectid, PlaceDieTemplateResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await PlaceDieTemplateAsyncWithHttpInfo(layoutindex, projectid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Place die template 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> PlaceDieTemplateAsyncWithHttpInfo (int? layoutindex, string projectid, PlaceDieTemplateResource body = null)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->PlaceDieTemplate");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->PlaceDieTemplate");

            var localVarPath = "/jobs/{projectid}/layouts/{layoutindex}/place/die-template";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaceDieTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Run Plan tool to generate project plans 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity Plan1 (string projectid, PlanResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = Plan1WithHttpInfo(projectid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Run Plan tool to generate project plans 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > Plan1WithHttpInfo (string projectid, PlanResource body = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->Plan1");

            var localVarPath = "/jobs/{projectid}/plan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Plan1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Run Plan tool to generate project plans 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> Plan1Async (string projectid, PlanResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await Plan1AsyncWithHttpInfo(projectid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Run Plan tool to generate project plans 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> Plan1AsyncWithHttpInfo (string projectid, PlanResource body = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->Plan1");

            var localVarPath = "/jobs/{projectid}/plan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Plan1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Start running Plan tool asynchronously to generate project plans 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity PlanStart1 (string projectid, PlanResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = PlanStart1WithHttpInfo(projectid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Start running Plan tool asynchronously to generate project plans 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > PlanStart1WithHttpInfo (string projectid, PlanResource body = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->PlanStart1");

            var localVarPath = "/jobs/{projectid}/plan/start";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlanStart1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Start running Plan tool asynchronously to generate project plans 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> PlanStart1Async (string projectid, PlanResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await PlanStart1AsyncWithHttpInfo(projectid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Start running Plan tool asynchronously to generate project plans 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> PlanStart1AsyncWithHttpInfo (string projectid, PlanResource body = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->PlanStart1");

            var localVarPath = "/jobs/{projectid}/plan/start";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlanStart1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Get current plan tool running status 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <returns>PlanStatusEntity</returns>
        public PlanStatusEntity PlanStatus1 (string projectid)
        {
             ApiResponse<PlanStatusEntity> localVarResponse = PlanStatus1WithHttpInfo(projectid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get current plan tool running status 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ApiResponse of PlanStatusEntity</returns>
        public ApiResponse< PlanStatusEntity > PlanStatus1WithHttpInfo (string projectid)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->PlanStatus1");

            var localVarPath = "/jobs/{projectid}/plan/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlanStatus1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PlanStatusEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PlanStatusEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlanStatusEntity)));
        }

        /// <summary>
        /// Get current plan tool running status 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of PlanStatusEntity</returns>
        public async System.Threading.Tasks.Task<PlanStatusEntity> PlanStatus1Async (string projectid)
        {
             ApiResponse<PlanStatusEntity> localVarResponse = await PlanStatus1AsyncWithHttpInfo(projectid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get current plan tool running status 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ApiResponse (PlanStatusEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PlanStatusEntity>> PlanStatus1AsyncWithHttpInfo (string projectid)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->PlanStatus1");

            var localVarPath = "/jobs/{projectid}/plan/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlanStatus1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PlanStatusEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PlanStatusEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlanStatusEntity)));
        }

        /// <summary>
        /// Stop plan tool if it is currently running 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity PlanStop1 (string projectid)
        {
             ApiResponse<ResponseEntity> localVarResponse = PlanStop1WithHttpInfo(projectid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Stop plan tool if it is currently running 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > PlanStop1WithHttpInfo (string projectid)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->PlanStop1");

            var localVarPath = "/jobs/{projectid}/plan/stop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlanStop1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Stop plan tool if it is currently running 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> PlanStop1Async (string projectid)
        {
             ApiResponse<ResponseEntity> localVarResponse = await PlanStop1AsyncWithHttpInfo(projectid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Stop plan tool if it is currently running 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> PlanStop1AsyncWithHttpInfo (string projectid)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->PlanStop1");

            var localVarPath = "/jobs/{projectid}/plan/stop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlanStop1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Run Populate tool to generate layouts 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity Populate1 (int? layoutindex, string projectid, PopulateResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = Populate1WithHttpInfo(layoutindex, projectid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Run Populate tool to generate layouts 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > Populate1WithHttpInfo (int? layoutindex, string projectid, PopulateResource body = null)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->Populate1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->Populate1");

            var localVarPath = "/jobs/{projectid}/populate/{layoutindex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Populate1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Run Populate tool to generate layouts 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> Populate1Async (int? layoutindex, string projectid, PopulateResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await Populate1AsyncWithHttpInfo(layoutindex, projectid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Run Populate tool to generate layouts 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> Populate1AsyncWithHttpInfo (int? layoutindex, string projectid, PopulateResource body = null)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->Populate1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->Populate1");

            var localVarPath = "/jobs/{projectid}/populate/{layoutindex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Populate1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Resize layout sheet 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity ResizeLayoutSheet1 (int? layoutindex, string projectid, ResizeSheetResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = ResizeLayoutSheet1WithHttpInfo(layoutindex, projectid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Resize layout sheet 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > ResizeLayoutSheet1WithHttpInfo (int? layoutindex, string projectid, ResizeSheetResource body = null)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->ResizeLayoutSheet1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->ResizeLayoutSheet1");

            var localVarPath = "/jobs/{projectid}/layouts/{layoutindex}/sheet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResizeLayoutSheet1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Resize layout sheet 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> ResizeLayoutSheet1Async (int? layoutindex, string projectid, ResizeSheetResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await ResizeLayoutSheet1AsyncWithHttpInfo(layoutindex, projectid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Resize layout sheet 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> ResizeLayoutSheet1AsyncWithHttpInfo (int? layoutindex, string projectid, ResizeSheetResource body = null)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->ResizeLayoutSheet1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->ResizeLayoutSheet1");

            var localVarPath = "/jobs/{projectid}/layouts/{layoutindex}/sheet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResizeLayoutSheet1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Run a script on the current project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity Run (string projectid, RunScriptResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = RunWithHttpInfo(projectid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Run a script on the current project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > RunWithHttpInfo (string projectid, RunScriptResource body = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->Run");

            var localVarPath = "/jobs/{projectid}/script";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Run", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Run a script on the current project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> RunAsync (string projectid, RunScriptResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await RunAsyncWithHttpInfo(projectid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Run a script on the current project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> RunAsyncWithHttpInfo (string projectid, RunScriptResource body = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->Run");

            var localVarPath = "/jobs/{projectid}/script";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Run", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Save project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void SaveJob1 (string projectid, SaveJobResource body = null)
        {
             SaveJob1WithHttpInfo(projectid, body);
        }

        /// <summary>
        /// Save project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SaveJob1WithHttpInfo (string projectid, SaveJobResource body = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->SaveJob1");

            var localVarPath = "/jobs/{projectid}/save";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveJob1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Save project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SaveJob1Async (string projectid, SaveJobResource body = null)
        {
             await SaveJob1AsyncWithHttpInfo(projectid, body);

        }

        /// <summary>
        /// Save project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SaveJob1AsyncWithHttpInfo (string projectid, SaveJobResource body = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->SaveJob1");

            var localVarPath = "/jobs/{projectid}/save";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveJob1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Save project template 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity SaveJobTemplate (string projectid, SaveJobTemplateResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = SaveJobTemplateWithHttpInfo(projectid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Save project template 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > SaveJobTemplateWithHttpInfo (string projectid, SaveJobTemplateResource body = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->SaveJobTemplate");

            var localVarPath = "/jobs/{projectid}/save-template";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveJobTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Save project template 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> SaveJobTemplateAsync (string projectid, SaveJobTemplateResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await SaveJobTemplateAsyncWithHttpInfo(projectid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Save project template 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> SaveJobTemplateAsyncWithHttpInfo (string projectid, SaveJobTemplateResource body = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->SaveJobTemplate");

            var localVarPath = "/jobs/{projectid}/save-template";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveJobTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Set layout plate 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity SetLayoutPlate1 (int? layoutindex, string projectid, SetPlateResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = SetLayoutPlate1WithHttpInfo(layoutindex, projectid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set layout plate 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > SetLayoutPlate1WithHttpInfo (int? layoutindex, string projectid, SetPlateResource body = null)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->SetLayoutPlate1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->SetLayoutPlate1");

            var localVarPath = "/jobs/{projectid}/layouts/{layoutindex}/plate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetLayoutPlate1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Set layout plate 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> SetLayoutPlate1Async (int? layoutindex, string projectid, SetPlateResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await SetLayoutPlate1AsyncWithHttpInfo(layoutindex, projectid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set layout plate 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> SetLayoutPlate1AsyncWithHttpInfo (int? layoutindex, string projectid, SetPlateResource body = null)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->SetLayoutPlate1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->SetLayoutPlate1");

            var localVarPath = "/jobs/{projectid}/layouts/{layoutindex}/plate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetLayoutPlate1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Set layout press 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity SetLayoutPress1 (int? layoutindex, string projectid, SetPressResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = SetLayoutPress1WithHttpInfo(layoutindex, projectid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set layout press 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > SetLayoutPress1WithHttpInfo (int? layoutindex, string projectid, SetPressResource body = null)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->SetLayoutPress1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->SetLayoutPress1");

            var localVarPath = "/jobs/{projectid}/layouts/{layoutindex}/press";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetLayoutPress1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Set layout press 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> SetLayoutPress1Async (int? layoutindex, string projectid, SetPressResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await SetLayoutPress1AsyncWithHttpInfo(layoutindex, projectid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set layout press 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> SetLayoutPress1AsyncWithHttpInfo (int? layoutindex, string projectid, SetPressResource body = null)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->SetLayoutPress1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->SetLayoutPress1");

            var localVarPath = "/jobs/{projectid}/layouts/{layoutindex}/press";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetLayoutPress1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Set layout sheet 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity SetLayoutSheet1 (int? layoutindex, string projectid, SetSheetResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = SetLayoutSheet1WithHttpInfo(layoutindex, projectid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set layout sheet 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > SetLayoutSheet1WithHttpInfo (int? layoutindex, string projectid, SetSheetResource body = null)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->SetLayoutSheet1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->SetLayoutSheet1");

            var localVarPath = "/jobs/{projectid}/layouts/{layoutindex}/sheet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetLayoutSheet1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Set layout sheet 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> SetLayoutSheet1Async (int? layoutindex, string projectid, SetSheetResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await SetLayoutSheet1AsyncWithHttpInfo(layoutindex, projectid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set layout sheet 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> SetLayoutSheet1AsyncWithHttpInfo (int? layoutindex, string projectid, SetSheetResource body = null)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->SetLayoutSheet1");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->SetLayoutSheet1");

            var localVarPath = "/jobs/{projectid}/layouts/{layoutindex}/sheet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetLayoutSheet1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Snap artwork to products or die numbers in project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity Snap (string projectid, AutosnapResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = SnapWithHttpInfo(projectid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Snap artwork to products or die numbers in project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > SnapWithHttpInfo (string projectid, AutosnapResource body = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->Snap");

            var localVarPath = "/jobs/{projectid}/snap";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Snap", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Snap artwork to products or die numbers in project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> SnapAsync (string projectid, AutosnapResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await SnapAsyncWithHttpInfo(projectid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Snap artwork to products or die numbers in project 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> SnapAsyncWithHttpInfo (string projectid, AutosnapResource body = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->Snap");

            var localVarPath = "/jobs/{projectid}/snap";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Snap", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Snap artwork to a given side of the product 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productname"></param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity SnapProduct (string productname, string projectid, AutosnapArtworkEntity body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = SnapProductWithHttpInfo(productname, projectid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Snap artwork to a given side of the product 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productname"></param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > SnapProductWithHttpInfo (string productname, string projectid, AutosnapArtworkEntity body = null)
        {
            // verify the required parameter 'productname' is set
            if (productname == null)
                throw new ApiException(400, "Missing required parameter 'productname' when calling ProjectsAPIApi->SnapProduct");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->SnapProduct");

            var localVarPath = "/jobs/{projectid}/products/{productname}/snap";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productname != null) localVarPathParams.Add("productname", this.Configuration.ApiClient.ParameterToString(productname)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SnapProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Snap artwork to a given side of the product 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productname"></param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> SnapProductAsync (string productname, string projectid, AutosnapArtworkEntity body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await SnapProductAsyncWithHttpInfo(productname, projectid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Snap artwork to a given side of the product 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productname"></param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> SnapProductAsyncWithHttpInfo (string productname, string projectid, AutosnapArtworkEntity body = null)
        {
            // verify the required parameter 'productname' is set
            if (productname == null)
                throw new ApiException(400, "Missing required parameter 'productname' when calling ProjectsAPIApi->SnapProduct");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->SnapProduct");

            var localVarPath = "/jobs/{projectid}/products/{productname}/snap";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productname != null) localVarPathParams.Add("productname", this.Configuration.ApiClient.ParameterToString(productname)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SnapProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Generate step and repeat group 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity StepRepeat (int? layoutindex, string projectid, StepRepeatResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = StepRepeatWithHttpInfo(layoutindex, projectid, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate step and repeat group 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > StepRepeatWithHttpInfo (int? layoutindex, string projectid, StepRepeatResource body = null)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->StepRepeat");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->StepRepeat");

            var localVarPath = "/jobs/{projectid}/layouts/{layoutindex}/step-repeat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StepRepeat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Generate step and repeat group 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> StepRepeatAsync (int? layoutindex, string projectid, StepRepeatResource body = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await StepRepeatAsyncWithHttpInfo(layoutindex, projectid, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generate step and repeat group 
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layoutindex">Index of layout</param>
        /// <param name="projectid">ID of the job</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> StepRepeatAsyncWithHttpInfo (int? layoutindex, string projectid, StepRepeatResource body = null)
        {
            // verify the required parameter 'layoutindex' is set
            if (layoutindex == null)
                throw new ApiException(400, "Missing required parameter 'layoutindex' when calling ProjectsAPIApi->StepRepeat");
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->StepRepeat");

            var localVarPath = "/jobs/{projectid}/layouts/{layoutindex}/step-repeat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layoutindex != null) localVarPathParams.Add("layoutindex", this.Configuration.ApiClient.ParameterToString(layoutindex)); // path parameter
            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StepRepeat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Upload new file to project The URI returned in the response entity can be used to download the file content directly or referred to when adding products.
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="file"> (optional)</param>
        /// <returns>ResponseEntity</returns>
        public ResponseEntity UploadFile1 (string projectid, FormDataContentDisposition file = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = UploadFile1WithHttpInfo(projectid, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload new file to project The URI returned in the response entity can be used to download the file content directly or referred to when adding products.
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="file"> (optional)</param>
        /// <returns>ApiResponse of ResponseEntity</returns>
        public ApiResponse< ResponseEntity > UploadFile1WithHttpInfo (string projectid, FormDataContentDisposition file = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->UploadFile1");

            var localVarPath = "/jobs/{projectid}/files/upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (file != null) localVarFormParams.Add("file", this.Configuration.ApiClient.ParameterToString(file)); // form parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadFile1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

        /// <summary>
        /// Upload new file to project The URI returned in the response entity can be used to download the file content directly or referred to when adding products.
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of ResponseEntity</returns>
        public async System.Threading.Tasks.Task<ResponseEntity> UploadFile1Async (string projectid, FormDataContentDisposition file = null)
        {
             ApiResponse<ResponseEntity> localVarResponse = await UploadFile1AsyncWithHttpInfo(projectid, file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload new file to project The URI returned in the response entity can be used to download the file content directly or referred to when adding products.
        /// </summary>
        /// <exception cref="TiliaLabs.Phoenix.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectid">ID of the job</param>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEntity>> UploadFile1AsyncWithHttpInfo (string projectid, FormDataContentDisposition file = null)
        {
            // verify the required parameter 'projectid' is set
            if (projectid == null)
                throw new ApiException(400, "Missing required parameter 'projectid' when calling ProjectsAPIApi->UploadFile1");

            var localVarPath = "/jobs/{projectid}/files/upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectid != null) localVarPathParams.Add("projectid", this.Configuration.ApiClient.ParameterToString(projectid)); // path parameter
            if (file != null) localVarFormParams.Add("file", this.Configuration.ApiClient.ParameterToString(file)); // form parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadFile1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEntity)));
        }

    }
}
