/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Creep settings
    /// </summary>
    [DataContract]
        public partial class Creep :  IEquatable<Creep>, IValidatableObject
    {
        /// <summary>
        /// Creep type
        /// </summary>
        /// <value>Creep type</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,
            /// <summary>
            /// Enum Inward for value: Inward
            /// </summary>
            [EnumMember(Value = "Inward")]
            Inward = 2,
            /// <summary>
            /// Enum Outward for value: Outward
            /// </summary>
            [EnumMember(Value = "Outward")]
            Outward = 3,
            /// <summary>
            /// Enum Both for value: Both
            /// </summary>
            [EnumMember(Value = "Both")]
            Both = 4,
            /// <summary>
            /// Enum Custom for value: Custom
            /// </summary>
            [EnumMember(Value = "Custom")]
            Custom = 5        }
        /// <summary>
        /// Creep type
        /// </summary>
        /// <value>Creep type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Creep method
        /// </summary>
        /// <value>Creep method</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum MethodEnum
        {
            /// <summary>
            /// Enum Offset for value: Offset
            /// </summary>
            [EnumMember(Value = "Offset")]
            Offset = 1,
            /// <summary>
            /// Enum Scale for value: Scale
            /// </summary>
            [EnumMember(Value = "Scale")]
            Scale = 2        }
        /// <summary>
        /// Creep method
        /// </summary>
        /// <value>Creep method</value>
        [DataMember(Name="method", EmitDefaultValue=false)]
        public MethodEnum Method { get; set; }
        /// <summary>
        /// Creep calculation
        /// </summary>
        /// <value>Creep calculation</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum CalculationEnum
        {
            /// <summary>
            /// Enum FromStock for value: From Stock
            /// </summary>
            [EnumMember(Value = "From Stock")]
            FromStock = 1,
            /// <summary>
            /// Enum PerPage for value: Per Page
            /// </summary>
            [EnumMember(Value = "Per Page")]
            PerPage = 2,
            /// <summary>
            /// Enum Total for value: Total
            /// </summary>
            [EnumMember(Value = "Total")]
            Total = 3        }
        /// <summary>
        /// Creep calculation
        /// </summary>
        /// <value>Creep calculation</value>
        [DataMember(Name="calculation", EmitDefaultValue=false)]
        public CalculationEnum Calculation { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Creep" /> class.
        /// </summary>
        /// <param name="type">Creep type (required).</param>
        /// <param name="method">Creep method (required).</param>
        /// <param name="transition">Creep transition (required).</param>
        /// <param name="calculation">Creep calculation (required).</param>
        /// <param name="amount">Creep amount.</param>
        public Creep(TypeEnum type = default(TypeEnum), MethodEnum method = default(MethodEnum), double? transition = default(double?), CalculationEnum calculation = default(CalculationEnum), string amount = default(string))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for Creep and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "method" is required (not null)
            if (method == null)
            {
                throw new InvalidDataException("method is a required property for Creep and cannot be null");
            }
            else
            {
                this.Method = method;
            }
            // to ensure "transition" is required (not null)
            if (transition == null)
            {
                throw new InvalidDataException("transition is a required property for Creep and cannot be null");
            }
            else
            {
                this.Transition = transition;
            }
            // to ensure "calculation" is required (not null)
            if (calculation == null)
            {
                throw new InvalidDataException("calculation is a required property for Creep and cannot be null");
            }
            else
            {
                this.Calculation = calculation;
            }
            this.Amount = amount;
        }
        


        /// <summary>
        /// Creep transition
        /// </summary>
        /// <value>Creep transition</value>
        [DataMember(Name="transition", EmitDefaultValue=false)]
        public double? Transition { get; set; }


        /// <summary>
        /// Creep amount
        /// </summary>
        /// <value>Creep amount</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public string Amount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Creep {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Transition: ").Append(Transition).Append("\n");
            sb.Append("  Calculation: ").Append(Calculation).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Creep);
        }

        /// <summary>
        /// Returns true if Creep instances are equal
        /// </summary>
        /// <param name="input">Instance of Creep to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Creep input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Method == input.Method ||
                    (this.Method != null &&
                    this.Method.Equals(input.Method))
                ) && 
                (
                    this.Transition == input.Transition ||
                    (this.Transition != null &&
                    this.Transition.Equals(input.Transition))
                ) && 
                (
                    this.Calculation == input.Calculation ||
                    (this.Calculation != null &&
                    this.Calculation.Equals(input.Calculation))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Method != null)
                    hashCode = hashCode * 59 + this.Method.GetHashCode();
                if (this.Transition != null)
                    hashCode = hashCode * 59 + this.Transition.GetHashCode();
                if (this.Calculation != null)
                    hashCode = hashCode * 59 + this.Calculation.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
