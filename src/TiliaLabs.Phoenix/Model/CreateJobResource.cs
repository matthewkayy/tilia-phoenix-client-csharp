/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Create job action resource
    /// </summary>
    [DataContract]
        public partial class CreateJobResource :  IEquatable<CreateJobResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateJobResource" /> class.
        /// </summary>
        /// <param name="id">Job ID (required).</param>
        /// <param name="name">Job name.</param>
        /// <param name="contact">Job contact person.</param>
        /// <param name="phone">Job phone number.</param>
        /// <param name="_client">Job client name.</param>
        /// <param name="notes">Job notes.</param>
        /// <param name="units">Job units.</param>
        /// <param name="idref">ID of action resource is being applied to (Hot Folders only).</param>
        /// <param name="templatePath">Job template path for creating a new job from a template file or reporting which template was used to create a given job.</param>
        public CreateJobResource(string id = default(string), string name = default(string), string contact = default(string), string phone = default(string), string _client = default(string), string notes = default(string), string units = default(string), int? idref = default(int?), string templatePath = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for CreateJobResource and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            this.Name = name;
            this.Contact = contact;
            this.Phone = phone;
            this._Client = _client;
            this.Notes = notes;
            this.Units = units;
            this.Idref = idref;
            this.TemplatePath = templatePath;
        }
        
        /// <summary>
        /// Job ID
        /// </summary>
        /// <value>Job ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Job name
        /// </summary>
        /// <value>Job name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Job contact person
        /// </summary>
        /// <value>Job contact person</value>
        [DataMember(Name="contact", EmitDefaultValue=false)]
        public string Contact { get; set; }

        /// <summary>
        /// Job phone number
        /// </summary>
        /// <value>Job phone number</value>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }

        /// <summary>
        /// Job client name
        /// </summary>
        /// <value>Job client name</value>
        [DataMember(Name="client", EmitDefaultValue=false)]
        public string _Client { get; set; }

        /// <summary>
        /// Job notes
        /// </summary>
        /// <value>Job notes</value>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// Job units
        /// </summary>
        /// <value>Job units</value>
        [DataMember(Name="units", EmitDefaultValue=false)]
        public string Units { get; set; }

        /// <summary>
        /// ID of action resource is being applied to (Hot Folders only)
        /// </summary>
        /// <value>ID of action resource is being applied to (Hot Folders only)</value>
        [DataMember(Name="idref", EmitDefaultValue=false)]
        public int? Idref { get; set; }

        /// <summary>
        /// Job template path for creating a new job from a template file or reporting which template was used to create a given job
        /// </summary>
        /// <value>Job template path for creating a new job from a template file or reporting which template was used to create a given job</value>
        [DataMember(Name="template-path", EmitDefaultValue=false)]
        public string TemplatePath { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateJobResource {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  _Client: ").Append(_Client).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Units: ").Append(Units).Append("\n");
            sb.Append("  Idref: ").Append(Idref).Append("\n");
            sb.Append("  TemplatePath: ").Append(TemplatePath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateJobResource);
        }

        /// <summary>
        /// Returns true if CreateJobResource instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateJobResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateJobResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Contact == input.Contact ||
                    (this.Contact != null &&
                    this.Contact.Equals(input.Contact))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this._Client == input._Client ||
                    (this._Client != null &&
                    this._Client.Equals(input._Client))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.Units == input.Units ||
                    (this.Units != null &&
                    this.Units.Equals(input.Units))
                ) && 
                (
                    this.Idref == input.Idref ||
                    (this.Idref != null &&
                    this.Idref.Equals(input.Idref))
                ) && 
                (
                    this.TemplatePath == input.TemplatePath ||
                    (this.TemplatePath != null &&
                    this.TemplatePath.Equals(input.TemplatePath))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Contact != null)
                    hashCode = hashCode * 59 + this.Contact.GetHashCode();
                if (this.Phone != null)
                    hashCode = hashCode * 59 + this.Phone.GetHashCode();
                if (this._Client != null)
                    hashCode = hashCode * 59 + this._Client.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                if (this.Units != null)
                    hashCode = hashCode * 59 + this.Units.GetHashCode();
                if (this.Idref != null)
                    hashCode = hashCode * 59 + this.Idref.GetHashCode();
                if (this.TemplatePath != null)
                    hashCode = hashCode * 59 + this.TemplatePath.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
