/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Guillotine cutter media rules
    /// </summary>
    [DataContract]
        public partial class GcMediaRules :  IEquatable<GcMediaRules>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum OperationModes for value: OperationModes
            /// </summary>
            [EnumMember(Value = "OperationModes")]
            OperationModes = 1,
            /// <summary>
            /// Enum DctOperation for value: DctOperation
            /// </summary>
            [EnumMember(Value = "DctOperation")]
            DctOperation = 2,
            /// <summary>
            /// Enum PressMediaRules for value: PressMediaRules
            /// </summary>
            [EnumMember(Value = "PressMediaRules")]
            PressMediaRules = 3,
            /// <summary>
            /// Enum GcMediaRules for value: GcMediaRules
            /// </summary>
            [EnumMember(Value = "GcMediaRules")]
            GcMediaRules = 4,
            /// <summary>
            /// Enum FdcMediaRules for value: FdcMediaRules
            /// </summary>
            [EnumMember(Value = "FdcMediaRules")]
            FdcMediaRules = 5,
            /// <summary>
            /// Enum DctMediaRules for value: DctMediaRules
            /// </summary>
            [EnumMember(Value = "DctMediaRules")]
            DctMediaRules = 6,
            /// <summary>
            /// Enum SteelRules for value: SteelRules
            /// </summary>
            [EnumMember(Value = "SteelRules")]
            SteelRules = 7        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GcMediaRules" /> class.
        /// </summary>
        /// <param name="_default">_default (required).</param>
        /// <param name="map">Map containing key/values.</param>
        /// <param name="type">type (required).</param>
        public GcMediaRules(MediaRule _default = default(MediaRule), Dictionary<string, MediaRule> map = default(Dictionary<string, MediaRule>), TypeEnum type = default(TypeEnum))
        {
            // to ensure "_default" is required (not null)
            if (_default == null)
            {
                throw new InvalidDataException("_default is a required property for GcMediaRules and cannot be null");
            }
            else
            {
                this._Default = _default;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for GcMediaRules and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.Map = map;
        }
        
        /// <summary>
        /// Gets or Sets _Default
        /// </summary>
        [DataMember(Name="default", EmitDefaultValue=false)]
        public MediaRule _Default { get; set; }

        /// <summary>
        /// Map containing key/values
        /// </summary>
        /// <value>Map containing key/values</value>
        [DataMember(Name="map", EmitDefaultValue=false)]
        public Dictionary<string, MediaRule> Map { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GcMediaRules {\n");
            sb.Append("  _Default: ").Append(_Default).Append("\n");
            sb.Append("  Map: ").Append(Map).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GcMediaRules);
        }

        /// <summary>
        /// Returns true if GcMediaRules instances are equal
        /// </summary>
        /// <param name="input">Instance of GcMediaRules to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GcMediaRules input)
        {
            if (input == null)
                return false;

            return 
                (
                    this._Default == input._Default ||
                    (this._Default != null &&
                    this._Default.Equals(input._Default))
                ) && 
                (
                    this.Map == input.Map ||
                    this.Map != null &&
                    input.Map != null &&
                    this.Map.SequenceEqual(input.Map)
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._Default != null)
                    hashCode = hashCode * 59 + this._Default.GetHashCode();
                if (this.Map != null)
                    hashCode = hashCode * 59 + this.Map.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
