/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Digital cutting table rule value
    /// </summary>
    [DataContract]
        public partial class DctRuleValue :  IEquatable<DctRuleValue>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum OperationMode for value: OperationMode
            /// </summary>
            [EnumMember(Value = "OperationMode")]
            OperationMode = 1,
            /// <summary>
            /// Enum MediaRule for value: MediaRule
            /// </summary>
            [EnumMember(Value = "MediaRule")]
            MediaRule = 2,
            /// <summary>
            /// Enum PressMediaRule for value: PressMediaRule
            /// </summary>
            [EnumMember(Value = "PressMediaRule")]
            PressMediaRule = 3,
            /// <summary>
            /// Enum DctRuleValue for value: DctRuleValue
            /// </summary>
            [EnumMember(Value = "DctRuleValue")]
            DctRuleValue = 4,
            /// <summary>
            /// Enum SteelRule for value: SteelRule
            /// </summary>
            [EnumMember(Value = "SteelRule")]
            SteelRule = 5        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DctRuleValue" /> class.
        /// </summary>
        /// <param name="motionLowered">motionLowered (required).</param>
        /// <param name="motionLifted">motionLifted (required).</param>
        /// <param name="motionLowering">motionLowering (required).</param>
        /// <param name="motionLifting">motionLifting (required).</param>
        /// <param name="clearingDistance">Clearing Distance (required).</param>
        /// <param name="autoLiftAngle">Auto Lift Angle (required).</param>
        /// <param name="autoLiftDistance">Auto Lift Distance (required).</param>
        /// <param name="type">type (required).</param>
        public DctRuleValue(MotionSpecs motionLowered = default(MotionSpecs), MotionSpecs motionLifted = default(MotionSpecs), MotionSpecs motionLowering = default(MotionSpecs), MotionSpecs motionLifting = default(MotionSpecs), string clearingDistance = default(string), double? autoLiftAngle = default(double?), string autoLiftDistance = default(string), TypeEnum type = default(TypeEnum))
        {
            // to ensure "motionLowered" is required (not null)
            if (motionLowered == null)
            {
                throw new InvalidDataException("motionLowered is a required property for DctRuleValue and cannot be null");
            }
            else
            {
                this.MotionLowered = motionLowered;
            }
            // to ensure "motionLifted" is required (not null)
            if (motionLifted == null)
            {
                throw new InvalidDataException("motionLifted is a required property for DctRuleValue and cannot be null");
            }
            else
            {
                this.MotionLifted = motionLifted;
            }
            // to ensure "motionLowering" is required (not null)
            if (motionLowering == null)
            {
                throw new InvalidDataException("motionLowering is a required property for DctRuleValue and cannot be null");
            }
            else
            {
                this.MotionLowering = motionLowering;
            }
            // to ensure "motionLifting" is required (not null)
            if (motionLifting == null)
            {
                throw new InvalidDataException("motionLifting is a required property for DctRuleValue and cannot be null");
            }
            else
            {
                this.MotionLifting = motionLifting;
            }
            // to ensure "clearingDistance" is required (not null)
            if (clearingDistance == null)
            {
                throw new InvalidDataException("clearingDistance is a required property for DctRuleValue and cannot be null");
            }
            else
            {
                this.ClearingDistance = clearingDistance;
            }
            // to ensure "autoLiftAngle" is required (not null)
            if (autoLiftAngle == null)
            {
                throw new InvalidDataException("autoLiftAngle is a required property for DctRuleValue and cannot be null");
            }
            else
            {
                this.AutoLiftAngle = autoLiftAngle;
            }
            // to ensure "autoLiftDistance" is required (not null)
            if (autoLiftDistance == null)
            {
                throw new InvalidDataException("autoLiftDistance is a required property for DctRuleValue and cannot be null");
            }
            else
            {
                this.AutoLiftDistance = autoLiftDistance;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for DctRuleValue and cannot be null");
            }
            else
            {
                this.Type = type;
            }
        }
        
        /// <summary>
        /// Gets or Sets MotionLowered
        /// </summary>
        [DataMember(Name="motion-lowered", EmitDefaultValue=false)]
        public MotionSpecs MotionLowered { get; set; }

        /// <summary>
        /// Gets or Sets MotionLifted
        /// </summary>
        [DataMember(Name="motion-lifted", EmitDefaultValue=false)]
        public MotionSpecs MotionLifted { get; set; }

        /// <summary>
        /// Gets or Sets MotionLowering
        /// </summary>
        [DataMember(Name="motion-lowering", EmitDefaultValue=false)]
        public MotionSpecs MotionLowering { get; set; }

        /// <summary>
        /// Gets or Sets MotionLifting
        /// </summary>
        [DataMember(Name="motion-lifting", EmitDefaultValue=false)]
        public MotionSpecs MotionLifting { get; set; }

        /// <summary>
        /// Clearing Distance
        /// </summary>
        /// <value>Clearing Distance</value>
        [DataMember(Name="clearing-distance", EmitDefaultValue=false)]
        public string ClearingDistance { get; set; }

        /// <summary>
        /// Auto Lift Angle
        /// </summary>
        /// <value>Auto Lift Angle</value>
        [DataMember(Name="auto-lift-angle", EmitDefaultValue=false)]
        public double? AutoLiftAngle { get; set; }

        /// <summary>
        /// Auto Lift Distance
        /// </summary>
        /// <value>Auto Lift Distance</value>
        [DataMember(Name="auto-lift-distance", EmitDefaultValue=false)]
        public string AutoLiftDistance { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DctRuleValue {\n");
            sb.Append("  MotionLowered: ").Append(MotionLowered).Append("\n");
            sb.Append("  MotionLifted: ").Append(MotionLifted).Append("\n");
            sb.Append("  MotionLowering: ").Append(MotionLowering).Append("\n");
            sb.Append("  MotionLifting: ").Append(MotionLifting).Append("\n");
            sb.Append("  ClearingDistance: ").Append(ClearingDistance).Append("\n");
            sb.Append("  AutoLiftAngle: ").Append(AutoLiftAngle).Append("\n");
            sb.Append("  AutoLiftDistance: ").Append(AutoLiftDistance).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DctRuleValue);
        }

        /// <summary>
        /// Returns true if DctRuleValue instances are equal
        /// </summary>
        /// <param name="input">Instance of DctRuleValue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DctRuleValue input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MotionLowered == input.MotionLowered ||
                    (this.MotionLowered != null &&
                    this.MotionLowered.Equals(input.MotionLowered))
                ) && 
                (
                    this.MotionLifted == input.MotionLifted ||
                    (this.MotionLifted != null &&
                    this.MotionLifted.Equals(input.MotionLifted))
                ) && 
                (
                    this.MotionLowering == input.MotionLowering ||
                    (this.MotionLowering != null &&
                    this.MotionLowering.Equals(input.MotionLowering))
                ) && 
                (
                    this.MotionLifting == input.MotionLifting ||
                    (this.MotionLifting != null &&
                    this.MotionLifting.Equals(input.MotionLifting))
                ) && 
                (
                    this.ClearingDistance == input.ClearingDistance ||
                    (this.ClearingDistance != null &&
                    this.ClearingDistance.Equals(input.ClearingDistance))
                ) && 
                (
                    this.AutoLiftAngle == input.AutoLiftAngle ||
                    (this.AutoLiftAngle != null &&
                    this.AutoLiftAngle.Equals(input.AutoLiftAngle))
                ) && 
                (
                    this.AutoLiftDistance == input.AutoLiftDistance ||
                    (this.AutoLiftDistance != null &&
                    this.AutoLiftDistance.Equals(input.AutoLiftDistance))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MotionLowered != null)
                    hashCode = hashCode * 59 + this.MotionLowered.GetHashCode();
                if (this.MotionLifted != null)
                    hashCode = hashCode * 59 + this.MotionLifted.GetHashCode();
                if (this.MotionLowering != null)
                    hashCode = hashCode * 59 + this.MotionLowering.GetHashCode();
                if (this.MotionLifting != null)
                    hashCode = hashCode * 59 + this.MotionLifting.GetHashCode();
                if (this.ClearingDistance != null)
                    hashCode = hashCode * 59 + this.ClearingDistance.GetHashCode();
                if (this.AutoLiftAngle != null)
                    hashCode = hashCode * 59 + this.AutoLiftAngle.GetHashCode();
                if (this.AutoLiftDistance != null)
                    hashCode = hashCode * 59 + this.AutoLiftDistance.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
