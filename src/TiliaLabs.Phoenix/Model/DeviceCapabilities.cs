/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Device capabilities
    /// </summary>
    [DataContract]
        public partial class DeviceCapabilities :  IEquatable<DeviceCapabilities>, IValidatableObject
    {
        /// <summary>
        /// Limit logic
        /// </summary>
        /// <value>Limit logic</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum LimitLogicEnum
        {
            /// <summary>
            /// Enum Inclusively for value: Inclusively
            /// </summary>
            [EnumMember(Value = "Inclusively")]
            Inclusively = 1,
            /// <summary>
            /// Enum Exclusively for value: Exclusively
            /// </summary>
            [EnumMember(Value = "Exclusively")]
            Exclusively = 2        }
        /// <summary>
        /// Limit logic
        /// </summary>
        /// <value>Limit logic</value>
        [DataMember(Name="limit-logic", EmitDefaultValue=false)]
        public LimitLogicEnum LimitLogic { get; set; }
        /// <summary>
        /// Sheet handling
        /// </summary>
        /// <value>Sheet handling</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum SheetHandlingEnum
        {
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,
            /// <summary>
            /// Enum LongEdgeHorizontal for value: Long Edge Horizontal
            /// </summary>
            [EnumMember(Value = "Long Edge Horizontal")]
            LongEdgeHorizontal = 2,
            /// <summary>
            /// Enum LongEdgeVertical for value: Long Edge Vertical
            /// </summary>
            [EnumMember(Value = "Long Edge Vertical")]
            LongEdgeVertical = 3        }
        /// <summary>
        /// Sheet handling
        /// </summary>
        /// <value>Sheet handling</value>
        [DataMember(Name="sheet-handling", EmitDefaultValue=false)]
        public SheetHandlingEnum SheetHandling { get; set; }
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum PressCapabilities for value: PressCapabilities
            /// </summary>
            [EnumMember(Value = "PressCapabilities")]
            PressCapabilities = 1,
            /// <summary>
            /// Enum GcCapabilities for value: GcCapabilities
            /// </summary>
            [EnumMember(Value = "GcCapabilities")]
            GcCapabilities = 2,
            /// <summary>
            /// Enum FdcCapabilities for value: FdcCapabilities
            /// </summary>
            [EnumMember(Value = "FdcCapabilities")]
            FdcCapabilities = 3,
            /// <summary>
            /// Enum DctCapabilities for value: DctCapabilities
            /// </summary>
            [EnumMember(Value = "DctCapabilities")]
            DctCapabilities = 4,
            /// <summary>
            /// Enum DmCapabilities for value: DmCapabilities
            /// </summary>
            [EnumMember(Value = "DmCapabilities")]
            DmCapabilities = 5        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceCapabilities" /> class.
        /// </summary>
        /// <param name="widthRange">widthRange (required).</param>
        /// <param name="heightRange">heightRange (required).</param>
        /// <param name="limit">Limit (required).</param>
        /// <param name="limitLogic">Limit logic (required).</param>
        /// <param name="caliperRange">caliperRange (required).</param>
        /// <param name="weightRange">weightRange (required).</param>
        /// <param name="sheetHandling">Sheet handling (required).</param>
        /// <param name="stockTypes">stockTypes.</param>
        /// <param name="specificStocks">specificStocks.</param>
        /// <param name="type">type (required).</param>
        public DeviceCapabilities(ScalarRange widthRange = default(ScalarRange), ScalarRange heightRange = default(ScalarRange), bool? limit = default(bool?), LimitLogicEnum limitLogic = default(LimitLogicEnum), ScalarRange caliperRange = default(ScalarRange), StockWeightRange weightRange = default(StockWeightRange), SheetHandlingEnum sheetHandling = default(SheetHandlingEnum), DctcapabilitiesStocktypes stockTypes = default(DctcapabilitiesStocktypes), DctcapabilitiesStocktypes specificStocks = default(DctcapabilitiesStocktypes), TypeEnum type = default(TypeEnum))
        {
            // to ensure "widthRange" is required (not null)
            if (widthRange == null)
            {
                throw new InvalidDataException("widthRange is a required property for DeviceCapabilities and cannot be null");
            }
            else
            {
                this.WidthRange = widthRange;
            }
            // to ensure "heightRange" is required (not null)
            if (heightRange == null)
            {
                throw new InvalidDataException("heightRange is a required property for DeviceCapabilities and cannot be null");
            }
            else
            {
                this.HeightRange = heightRange;
            }
            // to ensure "limit" is required (not null)
            if (limit == null)
            {
                throw new InvalidDataException("limit is a required property for DeviceCapabilities and cannot be null");
            }
            else
            {
                this.Limit = limit;
            }
            // to ensure "limitLogic" is required (not null)
            if (limitLogic == null)
            {
                throw new InvalidDataException("limitLogic is a required property for DeviceCapabilities and cannot be null");
            }
            else
            {
                this.LimitLogic = limitLogic;
            }
            // to ensure "caliperRange" is required (not null)
            if (caliperRange == null)
            {
                throw new InvalidDataException("caliperRange is a required property for DeviceCapabilities and cannot be null");
            }
            else
            {
                this.CaliperRange = caliperRange;
            }
            // to ensure "weightRange" is required (not null)
            if (weightRange == null)
            {
                throw new InvalidDataException("weightRange is a required property for DeviceCapabilities and cannot be null");
            }
            else
            {
                this.WeightRange = weightRange;
            }
            // to ensure "sheetHandling" is required (not null)
            if (sheetHandling == null)
            {
                throw new InvalidDataException("sheetHandling is a required property for DeviceCapabilities and cannot be null");
            }
            else
            {
                this.SheetHandling = sheetHandling;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for DeviceCapabilities and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.StockTypes = stockTypes;
            this.SpecificStocks = specificStocks;
        }
        
        /// <summary>
        /// Gets or Sets WidthRange
        /// </summary>
        [DataMember(Name="width-range", EmitDefaultValue=false)]
        public ScalarRange WidthRange { get; set; }

        /// <summary>
        /// Gets or Sets HeightRange
        /// </summary>
        [DataMember(Name="height-range", EmitDefaultValue=false)]
        public ScalarRange HeightRange { get; set; }

        /// <summary>
        /// Limit
        /// </summary>
        /// <value>Limit</value>
        [DataMember(Name="limit", EmitDefaultValue=false)]
        public bool? Limit { get; set; }


        /// <summary>
        /// Gets or Sets CaliperRange
        /// </summary>
        [DataMember(Name="caliper-range", EmitDefaultValue=false)]
        public ScalarRange CaliperRange { get; set; }

        /// <summary>
        /// Gets or Sets WeightRange
        /// </summary>
        [DataMember(Name="weight-range", EmitDefaultValue=false)]
        public StockWeightRange WeightRange { get; set; }


        /// <summary>
        /// Gets or Sets StockTypes
        /// </summary>
        [DataMember(Name="stock-types", EmitDefaultValue=false)]
        public DctcapabilitiesStocktypes StockTypes { get; set; }

        /// <summary>
        /// Gets or Sets SpecificStocks
        /// </summary>
        [DataMember(Name="specific-stocks", EmitDefaultValue=false)]
        public DctcapabilitiesStocktypes SpecificStocks { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeviceCapabilities {\n");
            sb.Append("  WidthRange: ").Append(WidthRange).Append("\n");
            sb.Append("  HeightRange: ").Append(HeightRange).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  LimitLogic: ").Append(LimitLogic).Append("\n");
            sb.Append("  CaliperRange: ").Append(CaliperRange).Append("\n");
            sb.Append("  WeightRange: ").Append(WeightRange).Append("\n");
            sb.Append("  SheetHandling: ").Append(SheetHandling).Append("\n");
            sb.Append("  StockTypes: ").Append(StockTypes).Append("\n");
            sb.Append("  SpecificStocks: ").Append(SpecificStocks).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeviceCapabilities);
        }

        /// <summary>
        /// Returns true if DeviceCapabilities instances are equal
        /// </summary>
        /// <param name="input">Instance of DeviceCapabilities to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeviceCapabilities input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.WidthRange == input.WidthRange ||
                    (this.WidthRange != null &&
                    this.WidthRange.Equals(input.WidthRange))
                ) && 
                (
                    this.HeightRange == input.HeightRange ||
                    (this.HeightRange != null &&
                    this.HeightRange.Equals(input.HeightRange))
                ) && 
                (
                    this.Limit == input.Limit ||
                    (this.Limit != null &&
                    this.Limit.Equals(input.Limit))
                ) && 
                (
                    this.LimitLogic == input.LimitLogic ||
                    (this.LimitLogic != null &&
                    this.LimitLogic.Equals(input.LimitLogic))
                ) && 
                (
                    this.CaliperRange == input.CaliperRange ||
                    (this.CaliperRange != null &&
                    this.CaliperRange.Equals(input.CaliperRange))
                ) && 
                (
                    this.WeightRange == input.WeightRange ||
                    (this.WeightRange != null &&
                    this.WeightRange.Equals(input.WeightRange))
                ) && 
                (
                    this.SheetHandling == input.SheetHandling ||
                    (this.SheetHandling != null &&
                    this.SheetHandling.Equals(input.SheetHandling))
                ) && 
                (
                    this.StockTypes == input.StockTypes ||
                    (this.StockTypes != null &&
                    this.StockTypes.Equals(input.StockTypes))
                ) && 
                (
                    this.SpecificStocks == input.SpecificStocks ||
                    (this.SpecificStocks != null &&
                    this.SpecificStocks.Equals(input.SpecificStocks))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.WidthRange != null)
                    hashCode = hashCode * 59 + this.WidthRange.GetHashCode();
                if (this.HeightRange != null)
                    hashCode = hashCode * 59 + this.HeightRange.GetHashCode();
                if (this.Limit != null)
                    hashCode = hashCode * 59 + this.Limit.GetHashCode();
                if (this.LimitLogic != null)
                    hashCode = hashCode * 59 + this.LimitLogic.GetHashCode();
                if (this.CaliperRange != null)
                    hashCode = hashCode * 59 + this.CaliperRange.GetHashCode();
                if (this.WeightRange != null)
                    hashCode = hashCode * 59 + this.WeightRange.GetHashCode();
                if (this.SheetHandling != null)
                    hashCode = hashCode * 59 + this.SheetHandling.GetHashCode();
                if (this.StockTypes != null)
                    hashCode = hashCode * 59 + this.StockTypes.GetHashCode();
                if (this.SpecificStocks != null)
                    hashCode = hashCode * 59 + this.SpecificStocks.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
