/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Standard action response including success, new resources, and error/warning messages
    /// </summary>
    [DataContract]
        public partial class ResponseEntity :  IEquatable<ResponseEntity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseEntity" /> class.
        /// </summary>
        /// <param name="success">Overall success of operation (required).</param>
        /// <param name="statusCode">HTTP response status code.</param>
        /// <param name="errors">Any errors that occurred during operation.</param>
        /// <param name="warnings">Any warnings that occurred during operation.</param>
        /// <param name="resources">URIs of newly created resources.</param>
        public ResponseEntity(bool? success = default(bool?), int? statusCode = default(int?), List<MessageEntity> errors = default(List<MessageEntity>), List<MessageEntity> warnings = default(List<MessageEntity>), List<string> resources = default(List<string>))
        {
            // to ensure "success" is required (not null)
            if (success == null)
            {
                throw new InvalidDataException("success is a required property for ResponseEntity and cannot be null");
            }
            else
            {
                this.Success = success;
            }
            this.StatusCode = statusCode;
            this.Errors = errors;
            this.Warnings = warnings;
            this.Resources = resources;
        }
        
        /// <summary>
        /// Overall success of operation
        /// </summary>
        /// <value>Overall success of operation</value>
        [DataMember(Name="success", EmitDefaultValue=false)]
        public bool? Success { get; set; }

        /// <summary>
        /// HTTP response status code
        /// </summary>
        /// <value>HTTP response status code</value>
        [DataMember(Name="status-code", EmitDefaultValue=false)]
        public int? StatusCode { get; set; }

        /// <summary>
        /// Any errors that occurred during operation
        /// </summary>
        /// <value>Any errors that occurred during operation</value>
        [DataMember(Name="errors", EmitDefaultValue=false)]
        public List<MessageEntity> Errors { get; set; }

        /// <summary>
        /// Any warnings that occurred during operation
        /// </summary>
        /// <value>Any warnings that occurred during operation</value>
        [DataMember(Name="warnings", EmitDefaultValue=false)]
        public List<MessageEntity> Warnings { get; set; }

        /// <summary>
        /// URIs of newly created resources
        /// </summary>
        /// <value>URIs of newly created resources</value>
        [DataMember(Name="resources", EmitDefaultValue=false)]
        public List<string> Resources { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResponseEntity {\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("  Resources: ").Append(Resources).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResponseEntity);
        }

        /// <summary>
        /// Returns true if ResponseEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of ResponseEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResponseEntity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Success == input.Success ||
                    (this.Success != null &&
                    this.Success.Equals(input.Success))
                ) && 
                (
                    this.StatusCode == input.StatusCode ||
                    (this.StatusCode != null &&
                    this.StatusCode.Equals(input.StatusCode))
                ) && 
                (
                    this.Errors == input.Errors ||
                    this.Errors != null &&
                    input.Errors != null &&
                    this.Errors.SequenceEqual(input.Errors)
                ) && 
                (
                    this.Warnings == input.Warnings ||
                    this.Warnings != null &&
                    input.Warnings != null &&
                    this.Warnings.SequenceEqual(input.Warnings)
                ) && 
                (
                    this.Resources == input.Resources ||
                    this.Resources != null &&
                    input.Resources != null &&
                    this.Resources.SequenceEqual(input.Resources)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Success != null)
                    hashCode = hashCode * 59 + this.Success.GetHashCode();
                if (this.StatusCode != null)
                    hashCode = hashCode * 59 + this.StatusCode.GetHashCode();
                if (this.Errors != null)
                    hashCode = hashCode * 59 + this.Errors.GetHashCode();
                if (this.Warnings != null)
                    hashCode = hashCode * 59 + this.Warnings.GetHashCode();
                if (this.Resources != null)
                    hashCode = hashCode * 59 + this.Resources.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
