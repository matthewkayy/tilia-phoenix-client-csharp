/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Margins
    /// </summary>
    [DataContract]
        public partial class Margins :  IEquatable<Margins>, IValidatableObject
    {
        /// <summary>
        /// Type
        /// </summary>
        /// <value>Type</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum Inside for value: Inside
            /// </summary>
            [EnumMember(Value = "Inside")]
            Inside = 1,
            /// <summary>
            /// Enum Outside for value: Outside
            /// </summary>
            [EnumMember(Value = "Outside")]
            Outside = 2        }
        /// <summary>
        /// Type
        /// </summary>
        /// <value>Type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Margins" /> class.
        /// </summary>
        /// <param name="type">Type.</param>
        /// <param name="left">Left.</param>
        /// <param name="top">Top.</param>
        /// <param name="right">Right.</param>
        /// <param name="bottom">Bottom.</param>
        /// <param name="linked">Linked.</param>
        public Margins(TypeEnum? type = default(TypeEnum?), string left = default(string), string top = default(string), string right = default(string), string bottom = default(string), bool? linked = default(bool?))
        {
            this.Type = type;
            this.Left = left;
            this.Top = top;
            this.Right = right;
            this.Bottom = bottom;
            this.Linked = linked;
        }
        

        /// <summary>
        /// Left
        /// </summary>
        /// <value>Left</value>
        [DataMember(Name="left", EmitDefaultValue=false)]
        public string Left { get; set; }

        /// <summary>
        /// Top
        /// </summary>
        /// <value>Top</value>
        [DataMember(Name="top", EmitDefaultValue=false)]
        public string Top { get; set; }

        /// <summary>
        /// Right
        /// </summary>
        /// <value>Right</value>
        [DataMember(Name="right", EmitDefaultValue=false)]
        public string Right { get; set; }

        /// <summary>
        /// Bottom
        /// </summary>
        /// <value>Bottom</value>
        [DataMember(Name="bottom", EmitDefaultValue=false)]
        public string Bottom { get; set; }

        /// <summary>
        /// Linked
        /// </summary>
        /// <value>Linked</value>
        [DataMember(Name="linked", EmitDefaultValue=false)]
        public bool? Linked { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Margins {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Left: ").Append(Left).Append("\n");
            sb.Append("  Top: ").Append(Top).Append("\n");
            sb.Append("  Right: ").Append(Right).Append("\n");
            sb.Append("  Bottom: ").Append(Bottom).Append("\n");
            sb.Append("  Linked: ").Append(Linked).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Margins);
        }

        /// <summary>
        /// Returns true if Margins instances are equal
        /// </summary>
        /// <param name="input">Instance of Margins to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Margins input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Left == input.Left ||
                    (this.Left != null &&
                    this.Left.Equals(input.Left))
                ) && 
                (
                    this.Top == input.Top ||
                    (this.Top != null &&
                    this.Top.Equals(input.Top))
                ) && 
                (
                    this.Right == input.Right ||
                    (this.Right != null &&
                    this.Right.Equals(input.Right))
                ) && 
                (
                    this.Bottom == input.Bottom ||
                    (this.Bottom != null &&
                    this.Bottom.Equals(input.Bottom))
                ) && 
                (
                    this.Linked == input.Linked ||
                    (this.Linked != null &&
                    this.Linked.Equals(input.Linked))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Left != null)
                    hashCode = hashCode * 59 + this.Left.GetHashCode();
                if (this.Top != null)
                    hashCode = hashCode * 59 + this.Top.GetHashCode();
                if (this.Right != null)
                    hashCode = hashCode * 59 + this.Right.GetHashCode();
                if (this.Bottom != null)
                    hashCode = hashCode * 59 + this.Bottom.GetHashCode();
                if (this.Linked != null)
                    hashCode = hashCode * 59 + this.Linked.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
