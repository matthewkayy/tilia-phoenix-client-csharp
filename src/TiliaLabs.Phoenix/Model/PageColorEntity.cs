/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Page color for specifying colors in products
    /// </summary>
    [DataContract]
        public partial class PageColorEntity :  IEquatable<PageColorEntity>, IValidatableObject
    {
        /// <summary>
        /// Color type
        /// </summary>
        /// <value>Color type</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum CMYK for value: CMYK
            /// </summary>
            [EnumMember(Value = "CMYK")]
            CMYK = 1,
            /// <summary>
            /// Enum Lab for value: Lab
            /// </summary>
            [EnumMember(Value = "Lab")]
            Lab = 2,
            /// <summary>
            /// Enum RGB for value: RGB
            /// </summary>
            [EnumMember(Value = "RGB")]
            RGB = 3        }
        /// <summary>
        /// Color type
        /// </summary>
        /// <value>Color type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PageColorEntity" /> class.
        /// </summary>
        /// <param name="name">Color name (required).</param>
        /// <param name="type">Color type.</param>
        /// <param name="values">Color values.</param>
        /// <param name="coverage">Color coverage in the page ranging from 0.0 to 100.0.</param>
        /// <param name="process">Process the color represents. Default is &#x27;Printing&#x27;..</param>
        public PageColorEntity(string name = default(string), TypeEnum? type = default(TypeEnum?), List<double?> values = default(List<double?>), double? coverage = default(double?), string process = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for PageColorEntity and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            this.Type = type;
            this.Values = values;
            this.Coverage = coverage;
            this.Process = process;
        }
        
        /// <summary>
        /// Color name
        /// </summary>
        /// <value>Color name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }


        /// <summary>
        /// Color values
        /// </summary>
        /// <value>Color values</value>
        [DataMember(Name="values", EmitDefaultValue=false)]
        public List<double?> Values { get; set; }

        /// <summary>
        /// Color coverage in the page ranging from 0.0 to 100.0
        /// </summary>
        /// <value>Color coverage in the page ranging from 0.0 to 100.0</value>
        [DataMember(Name="coverage", EmitDefaultValue=false)]
        public double? Coverage { get; set; }

        /// <summary>
        /// Process the color represents. Default is &#x27;Printing&#x27;.
        /// </summary>
        /// <value>Process the color represents. Default is &#x27;Printing&#x27;.</value>
        [DataMember(Name="process", EmitDefaultValue=false)]
        public string Process { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PageColorEntity {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("  Coverage: ").Append(Coverage).Append("\n");
            sb.Append("  Process: ").Append(Process).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PageColorEntity);
        }

        /// <summary>
        /// Returns true if PageColorEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of PageColorEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PageColorEntity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Values == input.Values ||
                    this.Values != null &&
                    input.Values != null &&
                    this.Values.SequenceEqual(input.Values)
                ) && 
                (
                    this.Coverage == input.Coverage ||
                    (this.Coverage != null &&
                    this.Coverage.Equals(input.Coverage))
                ) && 
                (
                    this.Process == input.Process ||
                    (this.Process != null &&
                    this.Process.Equals(input.Process))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Values != null)
                    hashCode = hashCode * 59 + this.Values.GetHashCode();
                if (this.Coverage != null)
                    hashCode = hashCode * 59 + this.Coverage.GetHashCode();
                if (this.Process != null)
                    hashCode = hashCode * 59 + this.Process.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
