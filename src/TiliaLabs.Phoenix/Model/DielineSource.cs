/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Dieline source
    /// </summary>
    [DataContract]
        public partial class DielineSource :  IEquatable<DielineSource>, IValidatableObject
    {
        /// <summary>
        /// Dieline source type
        /// </summary>
        /// <value>Dieline source type</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 1,
            /// <summary>
            /// Enum Separation for value: Separation
            /// </summary>
            [EnumMember(Value = "Separation")]
            Separation = 2,
            /// <summary>
            /// Enum PDFLayer for value: PDFLayer
            /// </summary>
            [EnumMember(Value = "PDFLayer")]
            PDFLayer = 3,
            /// <summary>
            /// Enum CAD for value: CAD
            /// </summary>
            [EnumMember(Value = "CAD")]
            CAD = 4,
            /// <summary>
            /// Enum MediaBox for value: MediaBox
            /// </summary>
            [EnumMember(Value = "MediaBox")]
            MediaBox = 5,
            /// <summary>
            /// Enum BleedBox for value: BleedBox
            /// </summary>
            [EnumMember(Value = "BleedBox")]
            BleedBox = 6,
            /// <summary>
            /// Enum CropBox for value: CropBox
            /// </summary>
            [EnumMember(Value = "CropBox")]
            CropBox = 7,
            /// <summary>
            /// Enum TrimBox for value: TrimBox
            /// </summary>
            [EnumMember(Value = "TrimBox")]
            TrimBox = 8,
            /// <summary>
            /// Enum ArtBox for value: ArtBox
            /// </summary>
            [EnumMember(Value = "ArtBox")]
            ArtBox = 9,
            /// <summary>
            /// Enum PathBounds for value: PathBounds
            /// </summary>
            [EnumMember(Value = "PathBounds")]
            PathBounds = 10,
            /// <summary>
            /// Enum ImageBounds for value: ImageBounds
            /// </summary>
            [EnumMember(Value = "ImageBounds")]
            ImageBounds = 11,
            /// <summary>
            /// Enum ImageTracing for value: ImageTracing
            /// </summary>
            [EnumMember(Value = "ImageTracing")]
            ImageTracing = 12,
            /// <summary>
            /// Enum CustomSize for value: CustomSize
            /// </summary>
            [EnumMember(Value = "CustomSize")]
            CustomSize = 13,
            /// <summary>
            /// Enum Offcut for value: Offcut
            /// </summary>
            [EnumMember(Value = "Offcut")]
            Offcut = 14,
            /// <summary>
            /// Enum Application for value: Application
            /// </summary>
            [EnumMember(Value = "Application")]
            Application = 15,
            /// <summary>
            /// Enum Tile for value: Tile
            /// </summary>
            [EnumMember(Value = "Tile")]
            Tile = 16,
            /// <summary>
            /// Enum Mark for value: Mark
            /// </summary>
            [EnumMember(Value = "Mark")]
            Mark = 17        }
        /// <summary>
        /// Dieline source type
        /// </summary>
        /// <value>Dieline source type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DielineSource" /> class.
        /// </summary>
        /// <param name="type">Dieline source type (required).</param>
        /// <param name="name">Dieline source name.</param>
        public DielineSource(TypeEnum type = default(TypeEnum), string name = default(string))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for DielineSource and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.Name = name;
        }
        

        /// <summary>
        /// Dieline source name
        /// </summary>
        /// <value>Dieline source name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DielineSource {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DielineSource);
        }

        /// <summary>
        /// Returns true if DielineSource instances are equal
        /// </summary>
        /// <param name="input">Instance of DielineSource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DielineSource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
