/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Plate library item
    /// </summary>
    [DataContract]
        public partial class PlateEntity :  IEquatable<PlateEntity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlateEntity" /> class.
        /// </summary>
        /// <param name="name">Name of library item (required).</param>
        /// <param name="id">Unique ID of this item (auto-generated, read-only).</param>
        /// <param name="externalId">Optional external ID of media item.</param>
        /// <param name="description">Asset description.</param>
        /// <param name="width">Plate width.</param>
        /// <param name="height">Plate height.</param>
        /// <param name="punchHeight">Punch height of plate.</param>
        /// <param name="hDistortion">Horizontal distortion of plate.</param>
        /// <param name="vDistortion">Vertical distortion of plate.</param>
        /// <param name="price">Price of one plate.</param>
        public PlateEntity(string name = default(string), string id = default(string), string externalId = default(string), string description = default(string), string width = default(string), string height = default(string), string punchHeight = default(string), double? hDistortion = default(double?), double? vDistortion = default(double?), double? price = default(double?))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for PlateEntity and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            this.Id = id;
            this.ExternalId = externalId;
            this.Description = description;
            this.Width = width;
            this.Height = height;
            this.PunchHeight = punchHeight;
            this.HDistortion = hDistortion;
            this.VDistortion = vDistortion;
            this.Price = price;
        }
        
        /// <summary>
        /// Name of library item
        /// </summary>
        /// <value>Name of library item</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Unique ID of this item (auto-generated, read-only)
        /// </summary>
        /// <value>Unique ID of this item (auto-generated, read-only)</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Optional external ID of media item
        /// </summary>
        /// <value>Optional external ID of media item</value>
        [DataMember(Name="external-id", EmitDefaultValue=false)]
        public string ExternalId { get; set; }

        /// <summary>
        /// Asset description
        /// </summary>
        /// <value>Asset description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Plate width
        /// </summary>
        /// <value>Plate width</value>
        [DataMember(Name="width", EmitDefaultValue=false)]
        public string Width { get; set; }

        /// <summary>
        /// Plate height
        /// </summary>
        /// <value>Plate height</value>
        [DataMember(Name="height", EmitDefaultValue=false)]
        public string Height { get; set; }

        /// <summary>
        /// Punch height of plate
        /// </summary>
        /// <value>Punch height of plate</value>
        [DataMember(Name="punch-height", EmitDefaultValue=false)]
        public string PunchHeight { get; set; }

        /// <summary>
        /// Horizontal distortion of plate
        /// </summary>
        /// <value>Horizontal distortion of plate</value>
        [DataMember(Name="h-distortion", EmitDefaultValue=false)]
        public double? HDistortion { get; set; }

        /// <summary>
        /// Vertical distortion of plate
        /// </summary>
        /// <value>Vertical distortion of plate</value>
        [DataMember(Name="v-distortion", EmitDefaultValue=false)]
        public double? VDistortion { get; set; }

        /// <summary>
        /// Price of one plate
        /// </summary>
        /// <value>Price of one plate</value>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public double? Price { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlateEntity {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  PunchHeight: ").Append(PunchHeight).Append("\n");
            sb.Append("  HDistortion: ").Append(HDistortion).Append("\n");
            sb.Append("  VDistortion: ").Append(VDistortion).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PlateEntity);
        }

        /// <summary>
        /// Returns true if PlateEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of PlateEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlateEntity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                ) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && 
                (
                    this.PunchHeight == input.PunchHeight ||
                    (this.PunchHeight != null &&
                    this.PunchHeight.Equals(input.PunchHeight))
                ) && 
                (
                    this.HDistortion == input.HDistortion ||
                    (this.HDistortion != null &&
                    this.HDistortion.Equals(input.HDistortion))
                ) && 
                (
                    this.VDistortion == input.VDistortion ||
                    (this.VDistortion != null &&
                    this.VDistortion.Equals(input.VDistortion))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ExternalId != null)
                    hashCode = hashCode * 59 + this.ExternalId.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.PunchHeight != null)
                    hashCode = hashCode * 59 + this.PunchHeight.GetHashCode();
                if (this.HDistortion != null)
                    hashCode = hashCode * 59 + this.HDistortion.GetHashCode();
                if (this.VDistortion != null)
                    hashCode = hashCode * 59 + this.VDistortion.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
