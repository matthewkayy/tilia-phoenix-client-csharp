/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Gap tiling method creates gaps between tiles
    /// </summary>
    [DataContract]
        public partial class GapTiling : TilingMethod, IEquatable<GapTiling>, IValidatableObject
    {
        /// <summary>
        /// Rule defining which direction(s) the extension is applied for each tile in the given direction
        /// </summary>
        /// <value>Rule defining which direction(s) the extension is applied for each tile in the given direction</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ExtensionRuleEnum
        {
            /// <summary>
            /// Enum OppositeStart for value: Opposite Start
            /// </summary>
            [EnumMember(Value = "Opposite Start")]
            OppositeStart = 1,
            /// <summary>
            /// Enum Both for value: Both
            /// </summary>
            [EnumMember(Value = "Both")]
            Both = 2        }
        /// <summary>
        /// Rule defining which direction(s) the extension is applied for each tile in the given direction
        /// </summary>
        /// <value>Rule defining which direction(s) the extension is applied for each tile in the given direction</value>
        [DataMember(Name="extension-rule", EmitDefaultValue=false)]
        public ExtensionRuleEnum? ExtensionRule { get; set; }

        /// <summary>
        /// Tiling method type.  &#x27;Gap&#x27; for tile gap rule and &#x27;Overlap&#x27; for tile overlap rule type
        /// </summary>
        /// <value>Tiling method type.  &#x27;Gap&#x27; for tile gap rule and &#x27;Overlap&#x27; for tile overlap rule type</value>
        public override TypeEnum Type { get; } = TypeEnum.Gap;
        /// <summary>
        /// Initializes a new instance of the <see cref="GapTiling" /> class.
        /// </summary>
        /// <param name="gap">Gap distance between tiles in the given direction (required).</param>
        /// <param name="extensionRule">Rule defining which direction(s) the extension is applied for each tile in the given direction.</param>
        /// <param name="extension">Amount of extra artwork content beyond the tile gap boundary to extend into the gap in the given direction.</param>
        public GapTiling(double? gap = default(double?), ExtensionRuleEnum? extensionRule = default(ExtensionRuleEnum?), double? extension = default(double?))
        {
            // to ensure "gap" is required (not null)
            if (gap == null)
            {
                throw new InvalidDataException("gap is a required property for GapTiling and cannot be null");
            }
            else
            {
                this.Gap = gap;
            }
            this.ExtensionRule = extensionRule;
            this.Extension = extension;
        }
        
        /// <summary>
        /// Gap distance between tiles in the given direction
        /// </summary>
        /// <value>Gap distance between tiles in the given direction</value>
        [DataMember(Name="gap", EmitDefaultValue=false)]
        public double? Gap { get; set; }


        /// <summary>
        /// Amount of extra artwork content beyond the tile gap boundary to extend into the gap in the given direction
        /// </summary>
        /// <value>Amount of extra artwork content beyond the tile gap boundary to extend into the gap in the given direction</value>
        [DataMember(Name="extension", EmitDefaultValue=false)]
        public double? Extension { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GapTiling {\n");
            sb.Append("  Gap: ").Append(Gap).Append("\n");
            sb.Append("  ExtensionRule: ").Append(ExtensionRule).Append("\n");
            sb.Append("  Extension: ").Append(Extension).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GapTiling);
        }

        /// <summary>
        /// Returns true if GapTiling instances are equal
        /// </summary>
        /// <param name="input">Instance of GapTiling to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GapTiling input)
        {
            if (input == null)
                return false;

            return base.Equals(input) &&
                (
                    this.Gap == input.Gap ||
                    (this.Gap != null &&
                    this.Gap.Equals(input.Gap))
                ) && 
                (
                    this.ExtensionRule == input.ExtensionRule ||
                    (this.ExtensionRule != null &&
                    this.ExtensionRule.Equals(input.ExtensionRule))
                ) && 
                (
                    this.Extension == input.Extension ||
                    (this.Extension != null &&
                    this.Extension.Equals(input.Extension))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Gap != null)
                    hashCode = hashCode * 59 + this.Gap.GetHashCode();
                if (this.ExtensionRule != null)
                    hashCode = hashCode * 59 + this.ExtensionRule.GetHashCode();
                if (this.Extension != null)
                    hashCode = hashCode * 59 + this.Extension.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
