/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Setting to specify which layout strategies are used
    /// </summary>
    [DataContract]
        public partial class StrategiesEntity :  IEquatable<StrategiesEntity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StrategiesEntity" /> class.
        /// </summary>
        /// <param name="horizontalCut">Horizontal cut.</param>
        /// <param name="verticalCut">Vertical cut.</param>
        /// <param name="nesting">Nesting strategies.</param>
        /// <param name="freeNesting">Free nesting.</param>
        /// <param name="gridNesting">Grid nesting.</param>
        /// <param name="stripNesting">Strip nesting.</param>
        /// <param name="horizontalStrip">Horizontal strip.</param>
        /// <param name="verticalStrip">Vertical strip.</param>
        /// <param name="templates">Templates.</param>
        public StrategiesEntity(bool? horizontalCut = default(bool?), bool? verticalCut = default(bool?), bool? nesting = default(bool?), bool? freeNesting = default(bool?), bool? gridNesting = default(bool?), bool? stripNesting = default(bool?), bool? horizontalStrip = default(bool?), bool? verticalStrip = default(bool?), bool? templates = default(bool?))
        {
            this.HorizontalCut = horizontalCut;
            this.VerticalCut = verticalCut;
            this.Nesting = nesting;
            this.FreeNesting = freeNesting;
            this.GridNesting = gridNesting;
            this.StripNesting = stripNesting;
            this.HorizontalStrip = horizontalStrip;
            this.VerticalStrip = verticalStrip;
            this.Templates = templates;
        }
        
        /// <summary>
        /// Horizontal cut
        /// </summary>
        /// <value>Horizontal cut</value>
        [DataMember(Name="horizontal-cut", EmitDefaultValue=false)]
        public bool? HorizontalCut { get; set; }

        /// <summary>
        /// Vertical cut
        /// </summary>
        /// <value>Vertical cut</value>
        [DataMember(Name="vertical-cut", EmitDefaultValue=false)]
        public bool? VerticalCut { get; set; }

        /// <summary>
        /// Nesting strategies
        /// </summary>
        /// <value>Nesting strategies</value>
        [DataMember(Name="nesting", EmitDefaultValue=false)]
        public bool? Nesting { get; set; }

        /// <summary>
        /// Free nesting
        /// </summary>
        /// <value>Free nesting</value>
        [DataMember(Name="free-nesting", EmitDefaultValue=false)]
        public bool? FreeNesting { get; set; }

        /// <summary>
        /// Grid nesting
        /// </summary>
        /// <value>Grid nesting</value>
        [DataMember(Name="grid-nesting", EmitDefaultValue=false)]
        public bool? GridNesting { get; set; }

        /// <summary>
        /// Strip nesting
        /// </summary>
        /// <value>Strip nesting</value>
        [DataMember(Name="strip-nesting", EmitDefaultValue=false)]
        public bool? StripNesting { get; set; }

        /// <summary>
        /// Horizontal strip
        /// </summary>
        /// <value>Horizontal strip</value>
        [DataMember(Name="horizontal-strip", EmitDefaultValue=false)]
        public bool? HorizontalStrip { get; set; }

        /// <summary>
        /// Vertical strip
        /// </summary>
        /// <value>Vertical strip</value>
        [DataMember(Name="vertical-strip", EmitDefaultValue=false)]
        public bool? VerticalStrip { get; set; }

        /// <summary>
        /// Templates
        /// </summary>
        /// <value>Templates</value>
        [DataMember(Name="templates", EmitDefaultValue=false)]
        public bool? Templates { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StrategiesEntity {\n");
            sb.Append("  HorizontalCut: ").Append(HorizontalCut).Append("\n");
            sb.Append("  VerticalCut: ").Append(VerticalCut).Append("\n");
            sb.Append("  Nesting: ").Append(Nesting).Append("\n");
            sb.Append("  FreeNesting: ").Append(FreeNesting).Append("\n");
            sb.Append("  GridNesting: ").Append(GridNesting).Append("\n");
            sb.Append("  StripNesting: ").Append(StripNesting).Append("\n");
            sb.Append("  HorizontalStrip: ").Append(HorizontalStrip).Append("\n");
            sb.Append("  VerticalStrip: ").Append(VerticalStrip).Append("\n");
            sb.Append("  Templates: ").Append(Templates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StrategiesEntity);
        }

        /// <summary>
        /// Returns true if StrategiesEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of StrategiesEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StrategiesEntity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.HorizontalCut == input.HorizontalCut ||
                    (this.HorizontalCut != null &&
                    this.HorizontalCut.Equals(input.HorizontalCut))
                ) && 
                (
                    this.VerticalCut == input.VerticalCut ||
                    (this.VerticalCut != null &&
                    this.VerticalCut.Equals(input.VerticalCut))
                ) && 
                (
                    this.Nesting == input.Nesting ||
                    (this.Nesting != null &&
                    this.Nesting.Equals(input.Nesting))
                ) && 
                (
                    this.FreeNesting == input.FreeNesting ||
                    (this.FreeNesting != null &&
                    this.FreeNesting.Equals(input.FreeNesting))
                ) && 
                (
                    this.GridNesting == input.GridNesting ||
                    (this.GridNesting != null &&
                    this.GridNesting.Equals(input.GridNesting))
                ) && 
                (
                    this.StripNesting == input.StripNesting ||
                    (this.StripNesting != null &&
                    this.StripNesting.Equals(input.StripNesting))
                ) && 
                (
                    this.HorizontalStrip == input.HorizontalStrip ||
                    (this.HorizontalStrip != null &&
                    this.HorizontalStrip.Equals(input.HorizontalStrip))
                ) && 
                (
                    this.VerticalStrip == input.VerticalStrip ||
                    (this.VerticalStrip != null &&
                    this.VerticalStrip.Equals(input.VerticalStrip))
                ) && 
                (
                    this.Templates == input.Templates ||
                    (this.Templates != null &&
                    this.Templates.Equals(input.Templates))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HorizontalCut != null)
                    hashCode = hashCode * 59 + this.HorizontalCut.GetHashCode();
                if (this.VerticalCut != null)
                    hashCode = hashCode * 59 + this.VerticalCut.GetHashCode();
                if (this.Nesting != null)
                    hashCode = hashCode * 59 + this.Nesting.GetHashCode();
                if (this.FreeNesting != null)
                    hashCode = hashCode * 59 + this.FreeNesting.GetHashCode();
                if (this.GridNesting != null)
                    hashCode = hashCode * 59 + this.GridNesting.GetHashCode();
                if (this.StripNesting != null)
                    hashCode = hashCode * 59 + this.StripNesting.GetHashCode();
                if (this.HorizontalStrip != null)
                    hashCode = hashCode * 59 + this.HorizontalStrip.GetHashCode();
                if (this.VerticalStrip != null)
                    hashCode = hashCode * 59 + this.VerticalStrip.GetHashCode();
                if (this.Templates != null)
                    hashCode = hashCode * 59 + this.Templates.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
