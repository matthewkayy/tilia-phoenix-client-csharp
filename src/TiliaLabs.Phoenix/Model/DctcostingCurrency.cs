/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Currency
    /// </summary>
    [DataContract]
        public partial class DctcostingCurrency :  IEquatable<DctcostingCurrency>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DctcostingCurrency" /> class.
        /// </summary>
        /// <param name="currencyCode">currencyCode.</param>
        /// <param name="defaultFractionDigits">defaultFractionDigits.</param>
        /// <param name="numericCode">numericCode.</param>
        /// <param name="numericCodeAsString">numericCodeAsString.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="symbol">symbol.</param>
        public DctcostingCurrency(string currencyCode = default(string), int? defaultFractionDigits = default(int?), int? numericCode = default(int?), string numericCodeAsString = default(string), string displayName = default(string), string symbol = default(string))
        {
            this.CurrencyCode = currencyCode;
            this.DefaultFractionDigits = defaultFractionDigits;
            this.NumericCode = numericCode;
            this.NumericCodeAsString = numericCodeAsString;
            this.DisplayName = displayName;
            this.Symbol = symbol;
        }
        
        /// <summary>
        /// Gets or Sets CurrencyCode
        /// </summary>
        [DataMember(Name="currencyCode", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets DefaultFractionDigits
        /// </summary>
        [DataMember(Name="defaultFractionDigits", EmitDefaultValue=false)]
        public int? DefaultFractionDigits { get; set; }

        /// <summary>
        /// Gets or Sets NumericCode
        /// </summary>
        [DataMember(Name="numericCode", EmitDefaultValue=false)]
        public int? NumericCode { get; set; }

        /// <summary>
        /// Gets or Sets NumericCodeAsString
        /// </summary>
        [DataMember(Name="numericCodeAsString", EmitDefaultValue=false)]
        public string NumericCodeAsString { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets Symbol
        /// </summary>
        [DataMember(Name="symbol", EmitDefaultValue=false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DctcostingCurrency {\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  DefaultFractionDigits: ").Append(DefaultFractionDigits).Append("\n");
            sb.Append("  NumericCode: ").Append(NumericCode).Append("\n");
            sb.Append("  NumericCodeAsString: ").Append(NumericCodeAsString).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DctcostingCurrency);
        }

        /// <summary>
        /// Returns true if DctcostingCurrency instances are equal
        /// </summary>
        /// <param name="input">Instance of DctcostingCurrency to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DctcostingCurrency input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.DefaultFractionDigits == input.DefaultFractionDigits ||
                    (this.DefaultFractionDigits != null &&
                    this.DefaultFractionDigits.Equals(input.DefaultFractionDigits))
                ) && 
                (
                    this.NumericCode == input.NumericCode ||
                    (this.NumericCode != null &&
                    this.NumericCode.Equals(input.NumericCode))
                ) && 
                (
                    this.NumericCodeAsString == input.NumericCodeAsString ||
                    (this.NumericCodeAsString != null &&
                    this.NumericCodeAsString.Equals(input.NumericCodeAsString))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.DefaultFractionDigits != null)
                    hashCode = hashCode * 59 + this.DefaultFractionDigits.GetHashCode();
                if (this.NumericCode != null)
                    hashCode = hashCode * 59 + this.NumericCode.GetHashCode();
                if (this.NumericCodeAsString != null)
                    hashCode = hashCode * 59 + this.NumericCodeAsString.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
