/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Ink name and type
    /// </summary>
    [DataContract]
        public partial class InkEntity :  IEquatable<InkEntity>, IValidatableObject
    {
        /// <summary>
        /// Ink type
        /// </summary>
        /// <value>Ink type</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum Bleed for value: Bleed
            /// </summary>
            [EnumMember(Value = "Bleed")]
            Bleed = 1,
            /// <summary>
            /// Enum Crease for value: Crease
            /// </summary>
            [EnumMember(Value = "Crease")]
            Crease = 2,
            /// <summary>
            /// Enum Cut for value: Cut
            /// </summary>
            [EnumMember(Value = "Cut")]
            Cut = 3,
            /// <summary>
            /// Enum Foil for value: Foil
            /// </summary>
            [EnumMember(Value = "Foil")]
            Foil = 4,
            /// <summary>
            /// Enum Glue for value: Glue
            /// </summary>
            [EnumMember(Value = "Glue")]
            Glue = 5,
            /// <summary>
            /// Enum Normal for value: Normal
            /// </summary>
            [EnumMember(Value = "Normal")]
            Normal = 6,
            /// <summary>
            /// Enum Technical for value: Technical
            /// </summary>
            [EnumMember(Value = "Technical")]
            Technical = 7,
            /// <summary>
            /// Enum Varnish for value: Varnish
            /// </summary>
            [EnumMember(Value = "Varnish")]
            Varnish = 8        }
        /// <summary>
        /// Ink type
        /// </summary>
        /// <value>Ink type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InkEntity" /> class.
        /// </summary>
        /// <param name="name">Ink name (required).</param>
        /// <param name="separation">Whether ink is a separation color (required).</param>
        /// <param name="type">Ink type (required).</param>
        public InkEntity(string name = default(string), bool? separation = default(bool?), TypeEnum type = default(TypeEnum))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for InkEntity and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "separation" is required (not null)
            if (separation == null)
            {
                throw new InvalidDataException("separation is a required property for InkEntity and cannot be null");
            }
            else
            {
                this.Separation = separation;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for InkEntity and cannot be null");
            }
            else
            {
                this.Type = type;
            }
        }
        
        /// <summary>
        /// Ink name
        /// </summary>
        /// <value>Ink name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Whether ink is a separation color
        /// </summary>
        /// <value>Whether ink is a separation color</value>
        [DataMember(Name="separation", EmitDefaultValue=false)]
        public bool? Separation { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InkEntity {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Separation: ").Append(Separation).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InkEntity);
        }

        /// <summary>
        /// Returns true if InkEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of InkEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InkEntity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Separation == input.Separation ||
                    (this.Separation != null &&
                    this.Separation.Equals(input.Separation))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Separation != null)
                    hashCode = hashCode * 59 + this.Separation.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
