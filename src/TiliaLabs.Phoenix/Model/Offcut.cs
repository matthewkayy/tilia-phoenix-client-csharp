/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Offcut settings
    /// </summary>
    [DataContract]
        public partial class Offcut :  IEquatable<Offcut>, IValidatableObject
    {
        /// <summary>
        /// Type
        /// </summary>
        /// <value>Type</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,
            /// <summary>
            /// Enum Contour for value: Contour
            /// </summary>
            [EnumMember(Value = "Contour")]
            Contour = 2,
            /// <summary>
            /// Enum Margins for value: Margins
            /// </summary>
            [EnumMember(Value = "Margins")]
            Margins = 3        }
        /// <summary>
        /// Type
        /// </summary>
        /// <value>Type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Offcut" /> class.
        /// </summary>
        /// <param name="type">Type (required).</param>
        /// <param name="margin">Single margin setting.</param>
        /// <param name="margins">margins.</param>
        public Offcut(TypeEnum type = default(TypeEnum), string margin = default(string), Margins margins = default(Margins))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for Offcut and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.Margin = margin;
            this.Margins = margins;
        }
        

        /// <summary>
        /// Single margin setting
        /// </summary>
        /// <value>Single margin setting</value>
        [DataMember(Name="margin", EmitDefaultValue=false)]
        public string Margin { get; set; }

        /// <summary>
        /// Gets or Sets Margins
        /// </summary>
        [DataMember(Name="margins", EmitDefaultValue=false)]
        public Margins Margins { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Offcut {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Margin: ").Append(Margin).Append("\n");
            sb.Append("  Margins: ").Append(Margins).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Offcut);
        }

        /// <summary>
        /// Returns true if Offcut instances are equal
        /// </summary>
        /// <param name="input">Instance of Offcut to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Offcut input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Margin == input.Margin ||
                    (this.Margin != null &&
                    this.Margin.Equals(input.Margin))
                ) && 
                (
                    this.Margins == input.Margins ||
                    (this.Margins != null &&
                    this.Margins.Equals(input.Margins))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Margin != null)
                    hashCode = hashCode * 59 + this.Margin.GetHashCode();
                if (this.Margins != null)
                    hashCode = hashCode * 59 + this.Margins.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
