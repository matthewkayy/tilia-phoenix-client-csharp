/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Steel rule
    /// </summary>
    [DataContract]
        public partial class SteelRule :  IEquatable<SteelRule>, IValidatableObject
    {
        /// <summary>
        /// Units
        /// </summary>
        /// <value>Units</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum UnitsEnum
        {
            /// <summary>
            /// Enum Feet for value: Feet
            /// </summary>
            [EnumMember(Value = "Feet")]
            Feet = 1,
            /// <summary>
            /// Enum Inches for value: Inches
            /// </summary>
            [EnumMember(Value = "Inches")]
            Inches = 2,
            /// <summary>
            /// Enum Meters for value: Meters
            /// </summary>
            [EnumMember(Value = "Meters")]
            Meters = 3,
            /// <summary>
            /// Enum Centimeters for value: Centimeters
            /// </summary>
            [EnumMember(Value = "Centimeters")]
            Centimeters = 4,
            /// <summary>
            /// Enum Millimeters for value: Millimeters
            /// </summary>
            [EnumMember(Value = "Millimeters")]
            Millimeters = 5,
            /// <summary>
            /// Enum Micrometers for value: Micrometers
            /// </summary>
            [EnumMember(Value = "Micrometers")]
            Micrometers = 6,
            /// <summary>
            /// Enum Thou for value: Thou
            /// </summary>
            [EnumMember(Value = "Thou")]
            Thou = 7,
            /// <summary>
            /// Enum Points for value: Points
            /// </summary>
            [EnumMember(Value = "Points")]
            Points = 8        }
        /// <summary>
        /// Units
        /// </summary>
        /// <value>Units</value>
        [DataMember(Name="units", EmitDefaultValue=false)]
        public UnitsEnum Units { get; set; }
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum OperationMode for value: OperationMode
            /// </summary>
            [EnumMember(Value = "OperationMode")]
            OperationMode = 1,
            /// <summary>
            /// Enum MediaRule for value: MediaRule
            /// </summary>
            [EnumMember(Value = "MediaRule")]
            MediaRule = 2,
            /// <summary>
            /// Enum PressMediaRule for value: PressMediaRule
            /// </summary>
            [EnumMember(Value = "PressMediaRule")]
            PressMediaRule = 3,
            /// <summary>
            /// Enum DctRuleValue for value: DctRuleValue
            /// </summary>
            [EnumMember(Value = "DctRuleValue")]
            DctRuleValue = 4,
            /// <summary>
            /// Enum SteelRule for value: SteelRule
            /// </summary>
            [EnumMember(Value = "SteelRule")]
            SteelRule = 5        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SteelRule" /> class.
        /// </summary>
        /// <param name="cost">Cost (required).</param>
        /// <param name="units">Units (required).</param>
        /// <param name="type">type (required).</param>
        public SteelRule(double? cost = default(double?), UnitsEnum units = default(UnitsEnum), TypeEnum type = default(TypeEnum))
        {
            // to ensure "cost" is required (not null)
            if (cost == null)
            {
                throw new InvalidDataException("cost is a required property for SteelRule and cannot be null");
            }
            else
            {
                this.Cost = cost;
            }
            // to ensure "units" is required (not null)
            if (units == null)
            {
                throw new InvalidDataException("units is a required property for SteelRule and cannot be null");
            }
            else
            {
                this.Units = units;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for SteelRule and cannot be null");
            }
            else
            {
                this.Type = type;
            }
        }
        
        /// <summary>
        /// Cost
        /// </summary>
        /// <value>Cost</value>
        [DataMember(Name="cost", EmitDefaultValue=false)]
        public double? Cost { get; set; }



        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SteelRule {\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  Units: ").Append(Units).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SteelRule);
        }

        /// <summary>
        /// Returns true if SteelRule instances are equal
        /// </summary>
        /// <param name="input">Instance of SteelRule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SteelRule input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Cost == input.Cost ||
                    (this.Cost != null &&
                    this.Cost.Equals(input.Cost))
                ) && 
                (
                    this.Units == input.Units ||
                    (this.Units != null &&
                    this.Units.Equals(input.Units))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Cost != null)
                    hashCode = hashCode * 59 + this.Cost.GetHashCode();
                if (this.Units != null)
                    hashCode = hashCode * 59 + this.Units.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
