/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Imposition AI Plan result
    /// </summary>
    [DataContract]
        public partial class PlanResultEntity :  IEquatable<PlanResultEntity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlanResultEntity" /> class.
        /// </summary>
        /// <param name="id">ID of result.</param>
        /// <param name="timestamp">Time this result was generated as measured in seconds since the start of this run.</param>
        /// <param name="pendingEstimations">Whether this result has one or more pending estimations that have not been performed and could lead to more accurate cost and time estimates.</param>
        /// <param name="pressMinutes">Total estimated press time in minutes.</param>
        /// <param name="cuttingTime">Estimated total cutting time in seconds.</param>
        /// <param name="runLength">Total run lengths across all layouts.</param>
        /// <param name="totalCost">Total estimated cost for the job including all material and device costs.</param>
        /// <param name="plateCost">Estimated total plate cost.</param>
        /// <param name="stockCost">Estimated total stock cost.</param>
        /// <param name="pressCost">Estimated total press run cost.</param>
        /// <param name="cuttingCost">Estimated total cutting cost.</param>
        /// <param name="waste">Total sheet waste percentage.</param>
        /// <param name="sheetUsage">Sheet usage percentage per sheet.</param>
        /// <param name="totalUnderruns">Total number of underrun items.</param>
        /// <param name="totalOverruns">Total number of overrun items.</param>
        /// <param name="layoutCount">Number of layouts in this plan result.</param>
        /// <param name="layouts">Optional results for each layout.</param>
        /// <param name="thumbnail">thumbnail.</param>
        public PlanResultEntity(int? id = default(int?), float? timestamp = default(float?), bool? pendingEstimations = default(bool?), float? pressMinutes = default(float?), float? cuttingTime = default(float?), int? runLength = default(int?), float? totalCost = default(float?), float? plateCost = default(float?), float? stockCost = default(float?), float? pressCost = default(float?), float? cuttingCost = default(float?), float? waste = default(float?), float? sheetUsage = default(float?), int? totalUnderruns = default(int?), int? totalOverruns = default(int?), int? layoutCount = default(int?), List<LayoutResultEntity> layouts = default(List<LayoutResultEntity>), ThumbnailEntity thumbnail = default(ThumbnailEntity))
        {
            this.Id = id;
            this.Timestamp = timestamp;
            this.PendingEstimations = pendingEstimations;
            this.PressMinutes = pressMinutes;
            this.CuttingTime = cuttingTime;
            this.RunLength = runLength;
            this.TotalCost = totalCost;
            this.PlateCost = plateCost;
            this.StockCost = stockCost;
            this.PressCost = pressCost;
            this.CuttingCost = cuttingCost;
            this.Waste = waste;
            this.SheetUsage = sheetUsage;
            this.TotalUnderruns = totalUnderruns;
            this.TotalOverruns = totalOverruns;
            this.LayoutCount = layoutCount;
            this.Layouts = layouts;
            this.Thumbnail = thumbnail;
        }
        
        /// <summary>
        /// ID of result
        /// </summary>
        /// <value>ID of result</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Time this result was generated as measured in seconds since the start of this run
        /// </summary>
        /// <value>Time this result was generated as measured in seconds since the start of this run</value>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public float? Timestamp { get; set; }

        /// <summary>
        /// Whether this result has one or more pending estimations that have not been performed and could lead to more accurate cost and time estimates
        /// </summary>
        /// <value>Whether this result has one or more pending estimations that have not been performed and could lead to more accurate cost and time estimates</value>
        [DataMember(Name="pending-estimations", EmitDefaultValue=false)]
        public bool? PendingEstimations { get; set; }

        /// <summary>
        /// Total estimated press time in minutes
        /// </summary>
        /// <value>Total estimated press time in minutes</value>
        [DataMember(Name="press-minutes", EmitDefaultValue=false)]
        public float? PressMinutes { get; set; }

        /// <summary>
        /// Estimated total cutting time in seconds
        /// </summary>
        /// <value>Estimated total cutting time in seconds</value>
        [DataMember(Name="cutting-time", EmitDefaultValue=false)]
        public float? CuttingTime { get; set; }

        /// <summary>
        /// Total run lengths across all layouts
        /// </summary>
        /// <value>Total run lengths across all layouts</value>
        [DataMember(Name="run-length", EmitDefaultValue=false)]
        public int? RunLength { get; set; }

        /// <summary>
        /// Total estimated cost for the job including all material and device costs
        /// </summary>
        /// <value>Total estimated cost for the job including all material and device costs</value>
        [DataMember(Name="total-cost", EmitDefaultValue=false)]
        public float? TotalCost { get; set; }

        /// <summary>
        /// Estimated total plate cost
        /// </summary>
        /// <value>Estimated total plate cost</value>
        [DataMember(Name="plate-cost", EmitDefaultValue=false)]
        public float? PlateCost { get; set; }

        /// <summary>
        /// Estimated total stock cost
        /// </summary>
        /// <value>Estimated total stock cost</value>
        [DataMember(Name="stock-cost", EmitDefaultValue=false)]
        public float? StockCost { get; set; }

        /// <summary>
        /// Estimated total press run cost
        /// </summary>
        /// <value>Estimated total press run cost</value>
        [DataMember(Name="press-cost", EmitDefaultValue=false)]
        public float? PressCost { get; set; }

        /// <summary>
        /// Estimated total cutting cost
        /// </summary>
        /// <value>Estimated total cutting cost</value>
        [DataMember(Name="cutting-cost", EmitDefaultValue=false)]
        public float? CuttingCost { get; set; }

        /// <summary>
        /// Total sheet waste percentage
        /// </summary>
        /// <value>Total sheet waste percentage</value>
        [DataMember(Name="waste", EmitDefaultValue=false)]
        public float? Waste { get; set; }

        /// <summary>
        /// Sheet usage percentage per sheet
        /// </summary>
        /// <value>Sheet usage percentage per sheet</value>
        [DataMember(Name="sheet-usage", EmitDefaultValue=false)]
        public float? SheetUsage { get; set; }

        /// <summary>
        /// Total number of underrun items
        /// </summary>
        /// <value>Total number of underrun items</value>
        [DataMember(Name="total-underruns", EmitDefaultValue=false)]
        public int? TotalUnderruns { get; set; }

        /// <summary>
        /// Total number of overrun items
        /// </summary>
        /// <value>Total number of overrun items</value>
        [DataMember(Name="total-overruns", EmitDefaultValue=false)]
        public int? TotalOverruns { get; set; }

        /// <summary>
        /// Number of layouts in this plan result
        /// </summary>
        /// <value>Number of layouts in this plan result</value>
        [DataMember(Name="layout-count", EmitDefaultValue=false)]
        public int? LayoutCount { get; set; }

        /// <summary>
        /// Optional results for each layout
        /// </summary>
        /// <value>Optional results for each layout</value>
        [DataMember(Name="layouts", EmitDefaultValue=false)]
        public List<LayoutResultEntity> Layouts { get; set; }

        /// <summary>
        /// Gets or Sets Thumbnail
        /// </summary>
        [DataMember(Name="thumbnail", EmitDefaultValue=false)]
        public ThumbnailEntity Thumbnail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlanResultEntity {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  PendingEstimations: ").Append(PendingEstimations).Append("\n");
            sb.Append("  PressMinutes: ").Append(PressMinutes).Append("\n");
            sb.Append("  CuttingTime: ").Append(CuttingTime).Append("\n");
            sb.Append("  RunLength: ").Append(RunLength).Append("\n");
            sb.Append("  TotalCost: ").Append(TotalCost).Append("\n");
            sb.Append("  PlateCost: ").Append(PlateCost).Append("\n");
            sb.Append("  StockCost: ").Append(StockCost).Append("\n");
            sb.Append("  PressCost: ").Append(PressCost).Append("\n");
            sb.Append("  CuttingCost: ").Append(CuttingCost).Append("\n");
            sb.Append("  Waste: ").Append(Waste).Append("\n");
            sb.Append("  SheetUsage: ").Append(SheetUsage).Append("\n");
            sb.Append("  TotalUnderruns: ").Append(TotalUnderruns).Append("\n");
            sb.Append("  TotalOverruns: ").Append(TotalOverruns).Append("\n");
            sb.Append("  LayoutCount: ").Append(LayoutCount).Append("\n");
            sb.Append("  Layouts: ").Append(Layouts).Append("\n");
            sb.Append("  Thumbnail: ").Append(Thumbnail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PlanResultEntity);
        }

        /// <summary>
        /// Returns true if PlanResultEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of PlanResultEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlanResultEntity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.PendingEstimations == input.PendingEstimations ||
                    (this.PendingEstimations != null &&
                    this.PendingEstimations.Equals(input.PendingEstimations))
                ) && 
                (
                    this.PressMinutes == input.PressMinutes ||
                    (this.PressMinutes != null &&
                    this.PressMinutes.Equals(input.PressMinutes))
                ) && 
                (
                    this.CuttingTime == input.CuttingTime ||
                    (this.CuttingTime != null &&
                    this.CuttingTime.Equals(input.CuttingTime))
                ) && 
                (
                    this.RunLength == input.RunLength ||
                    (this.RunLength != null &&
                    this.RunLength.Equals(input.RunLength))
                ) && 
                (
                    this.TotalCost == input.TotalCost ||
                    (this.TotalCost != null &&
                    this.TotalCost.Equals(input.TotalCost))
                ) && 
                (
                    this.PlateCost == input.PlateCost ||
                    (this.PlateCost != null &&
                    this.PlateCost.Equals(input.PlateCost))
                ) && 
                (
                    this.StockCost == input.StockCost ||
                    (this.StockCost != null &&
                    this.StockCost.Equals(input.StockCost))
                ) && 
                (
                    this.PressCost == input.PressCost ||
                    (this.PressCost != null &&
                    this.PressCost.Equals(input.PressCost))
                ) && 
                (
                    this.CuttingCost == input.CuttingCost ||
                    (this.CuttingCost != null &&
                    this.CuttingCost.Equals(input.CuttingCost))
                ) && 
                (
                    this.Waste == input.Waste ||
                    (this.Waste != null &&
                    this.Waste.Equals(input.Waste))
                ) && 
                (
                    this.SheetUsage == input.SheetUsage ||
                    (this.SheetUsage != null &&
                    this.SheetUsage.Equals(input.SheetUsage))
                ) && 
                (
                    this.TotalUnderruns == input.TotalUnderruns ||
                    (this.TotalUnderruns != null &&
                    this.TotalUnderruns.Equals(input.TotalUnderruns))
                ) && 
                (
                    this.TotalOverruns == input.TotalOverruns ||
                    (this.TotalOverruns != null &&
                    this.TotalOverruns.Equals(input.TotalOverruns))
                ) && 
                (
                    this.LayoutCount == input.LayoutCount ||
                    (this.LayoutCount != null &&
                    this.LayoutCount.Equals(input.LayoutCount))
                ) && 
                (
                    this.Layouts == input.Layouts ||
                    this.Layouts != null &&
                    input.Layouts != null &&
                    this.Layouts.SequenceEqual(input.Layouts)
                ) && 
                (
                    this.Thumbnail == input.Thumbnail ||
                    (this.Thumbnail != null &&
                    this.Thumbnail.Equals(input.Thumbnail))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.PendingEstimations != null)
                    hashCode = hashCode * 59 + this.PendingEstimations.GetHashCode();
                if (this.PressMinutes != null)
                    hashCode = hashCode * 59 + this.PressMinutes.GetHashCode();
                if (this.CuttingTime != null)
                    hashCode = hashCode * 59 + this.CuttingTime.GetHashCode();
                if (this.RunLength != null)
                    hashCode = hashCode * 59 + this.RunLength.GetHashCode();
                if (this.TotalCost != null)
                    hashCode = hashCode * 59 + this.TotalCost.GetHashCode();
                if (this.PlateCost != null)
                    hashCode = hashCode * 59 + this.PlateCost.GetHashCode();
                if (this.StockCost != null)
                    hashCode = hashCode * 59 + this.StockCost.GetHashCode();
                if (this.PressCost != null)
                    hashCode = hashCode * 59 + this.PressCost.GetHashCode();
                if (this.CuttingCost != null)
                    hashCode = hashCode * 59 + this.CuttingCost.GetHashCode();
                if (this.Waste != null)
                    hashCode = hashCode * 59 + this.Waste.GetHashCode();
                if (this.SheetUsage != null)
                    hashCode = hashCode * 59 + this.SheetUsage.GetHashCode();
                if (this.TotalUnderruns != null)
                    hashCode = hashCode * 59 + this.TotalUnderruns.GetHashCode();
                if (this.TotalOverruns != null)
                    hashCode = hashCode * 59 + this.TotalOverruns.GetHashCode();
                if (this.LayoutCount != null)
                    hashCode = hashCode * 59 + this.LayoutCount.GetHashCode();
                if (this.Layouts != null)
                    hashCode = hashCode * 59 + this.Layouts.GetHashCode();
                if (this.Thumbnail != null)
                    hashCode = hashCode * 59 + this.Thumbnail.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
