/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Die design
    /// </summary>
    [DataContract]
        public partial class DieDesign :  IEquatable<DieDesign>, IValidatableObject
    {
        /// <summary>
        /// Die design type
        /// </summary>
        /// <value>Die design type</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum Rectangle for value: Rectangle
            /// </summary>
            [EnumMember(Value = "Rectangle")]
            Rectangle = 1,
            /// <summary>
            /// Enum Irregular for value: Irregular
            /// </summary>
            [EnumMember(Value = "Irregular")]
            Irregular = 2,
            /// <summary>
            /// Enum Open for value: Open
            /// </summary>
            [EnumMember(Value = "Open")]
            Open = 3        }
        /// <summary>
        /// Die design type
        /// </summary>
        /// <value>Die design type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DieDesign" /> class.
        /// </summary>
        /// <param name="name">Name (required).</param>
        /// <param name="description">Description.</param>
        /// <param name="notes">Notes.</param>
        /// <param name="type">Die design type.</param>
        /// <param name="source">Die design source.</param>
        /// <param name="filePath">Die design file-path.</param>
        /// <param name="shapeSource">Die design shape source.</param>
        /// <param name="shape">shape.</param>
        /// <param name="bleedline">bleedline.</param>
        /// <param name="dielines">Die design dielines.</param>
        /// <param name="shapeId">Die design shape id.</param>
        /// <param name="rect">rect.</param>
        /// <param name="properties">Custom properties.</param>
        /// <param name="path">Path.</param>
        public DieDesign(string name = default(string), string description = default(string), string notes = default(string), TypeEnum? type = default(TypeEnum?), string source = default(string), string filePath = default(string), string shapeSource = default(string), Path shape = default(Path), Bleedline bleedline = default(Bleedline), List<Dieline> dielines = default(List<Dieline>), string shapeId = default(string), Rect rect = default(Rect), List<PropertyObject> properties = default(List<PropertyObject>), string path = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for DieDesign and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            this.Description = description;
            this.Notes = notes;
            this.Type = type;
            this.Source = source;
            this.FilePath = filePath;
            this.ShapeSource = shapeSource;
            this.Shape = shape;
            this.Bleedline = bleedline;
            this.Dielines = dielines;
            this.ShapeId = shapeId;
            this.Rect = rect;
            this.Properties = properties;
            this.Path = path;
        }
        
        /// <summary>
        /// Unique ID
        /// </summary>
        /// <value>Unique ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; private set; }

        /// <summary>
        /// Name
        /// </summary>
        /// <value>Name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Created On
        /// </summary>
        /// <value>Created On</value>
        [DataMember(Name="created-on", EmitDefaultValue=false)]
        public DateTime? CreatedOn { get; private set; }

        /// <summary>
        /// Modified On
        /// </summary>
        /// <value>Modified On</value>
        [DataMember(Name="modified-on", EmitDefaultValue=false)]
        public DateTime? ModifiedOn { get; private set; }

        /// <summary>
        /// Version
        /// </summary>
        /// <value>Version</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; private set; }

        /// <summary>
        /// Description
        /// </summary>
        /// <value>Description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Notes
        /// </summary>
        /// <value>Notes</value>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }


        /// <summary>
        /// Die design source
        /// </summary>
        /// <value>Die design source</value>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public string Source { get; set; }

        /// <summary>
        /// Die design file-path
        /// </summary>
        /// <value>Die design file-path</value>
        [DataMember(Name="file-path", EmitDefaultValue=false)]
        public string FilePath { get; set; }

        /// <summary>
        /// Die design shape source
        /// </summary>
        /// <value>Die design shape source</value>
        [DataMember(Name="shape-source", EmitDefaultValue=false)]
        public string ShapeSource { get; set; }

        /// <summary>
        /// Gets or Sets Shape
        /// </summary>
        [DataMember(Name="shape", EmitDefaultValue=false)]
        public Path Shape { get; set; }

        /// <summary>
        /// Gets or Sets Bleedline
        /// </summary>
        [DataMember(Name="bleedline", EmitDefaultValue=false)]
        public Bleedline Bleedline { get; set; }

        /// <summary>
        /// Die design dielines
        /// </summary>
        /// <value>Die design dielines</value>
        [DataMember(Name="dielines", EmitDefaultValue=false)]
        public List<Dieline> Dielines { get; set; }

        /// <summary>
        /// Die design shape id
        /// </summary>
        /// <value>Die design shape id</value>
        [DataMember(Name="shape-id", EmitDefaultValue=false)]
        public string ShapeId { get; set; }

        /// <summary>
        /// Gets or Sets Rect
        /// </summary>
        [DataMember(Name="rect", EmitDefaultValue=false)]
        public Rect Rect { get; set; }

        /// <summary>
        /// Custom properties
        /// </summary>
        /// <value>Custom properties</value>
        [DataMember(Name="properties", EmitDefaultValue=false)]
        public List<PropertyObject> Properties { get; set; }

        /// <summary>
        /// Path
        /// </summary>
        /// <value>Path</value>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DieDesign {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  ModifiedOn: ").Append(ModifiedOn).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  FilePath: ").Append(FilePath).Append("\n");
            sb.Append("  ShapeSource: ").Append(ShapeSource).Append("\n");
            sb.Append("  Shape: ").Append(Shape).Append("\n");
            sb.Append("  Bleedline: ").Append(Bleedline).Append("\n");
            sb.Append("  Dielines: ").Append(Dielines).Append("\n");
            sb.Append("  ShapeId: ").Append(ShapeId).Append("\n");
            sb.Append("  Rect: ").Append(Rect).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DieDesign);
        }

        /// <summary>
        /// Returns true if DieDesign instances are equal
        /// </summary>
        /// <param name="input">Instance of DieDesign to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DieDesign input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CreatedOn == input.CreatedOn ||
                    (this.CreatedOn != null &&
                    this.CreatedOn.Equals(input.CreatedOn))
                ) && 
                (
                    this.ModifiedOn == input.ModifiedOn ||
                    (this.ModifiedOn != null &&
                    this.ModifiedOn.Equals(input.ModifiedOn))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.FilePath == input.FilePath ||
                    (this.FilePath != null &&
                    this.FilePath.Equals(input.FilePath))
                ) && 
                (
                    this.ShapeSource == input.ShapeSource ||
                    (this.ShapeSource != null &&
                    this.ShapeSource.Equals(input.ShapeSource))
                ) && 
                (
                    this.Shape == input.Shape ||
                    (this.Shape != null &&
                    this.Shape.Equals(input.Shape))
                ) && 
                (
                    this.Bleedline == input.Bleedline ||
                    (this.Bleedline != null &&
                    this.Bleedline.Equals(input.Bleedline))
                ) && 
                (
                    this.Dielines == input.Dielines ||
                    this.Dielines != null &&
                    input.Dielines != null &&
                    this.Dielines.SequenceEqual(input.Dielines)
                ) && 
                (
                    this.ShapeId == input.ShapeId ||
                    (this.ShapeId != null &&
                    this.ShapeId.Equals(input.ShapeId))
                ) && 
                (
                    this.Rect == input.Rect ||
                    (this.Rect != null &&
                    this.Rect.Equals(input.Rect))
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.CreatedOn != null)
                    hashCode = hashCode * 59 + this.CreatedOn.GetHashCode();
                if (this.ModifiedOn != null)
                    hashCode = hashCode * 59 + this.ModifiedOn.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                if (this.FilePath != null)
                    hashCode = hashCode * 59 + this.FilePath.GetHashCode();
                if (this.ShapeSource != null)
                    hashCode = hashCode * 59 + this.ShapeSource.GetHashCode();
                if (this.Shape != null)
                    hashCode = hashCode * 59 + this.Shape.GetHashCode();
                if (this.Bleedline != null)
                    hashCode = hashCode * 59 + this.Bleedline.GetHashCode();
                if (this.Dielines != null)
                    hashCode = hashCode * 59 + this.Dielines.GetHashCode();
                if (this.ShapeId != null)
                    hashCode = hashCode * 59 + this.ShapeId.GetHashCode();
                if (this.Rect != null)
                    hashCode = hashCode * 59 + this.Rect.GetHashCode();
                if (this.Properties != null)
                    hashCode = hashCode * 59 + this.Properties.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
