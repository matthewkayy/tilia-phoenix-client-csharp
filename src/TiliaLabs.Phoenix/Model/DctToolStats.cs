/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Tool stats
    /// </summary>
    [DataContract]
        public partial class DctToolStats :  IEquatable<DctToolStats>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DctToolStats" /> class.
        /// </summary>
        /// <param name="tool">Tool name (required).</param>
        /// <param name="time">time.</param>
        /// <param name="downLength">Total travel time when this tool is in the down position.</param>
        /// <param name="upLength">Total travel time when this tool is in the raised position.</param>
        /// <param name="beam">Beam name for multi-beam tables.</param>
        public DctToolStats(string tool = default(string), TimeInfo time = default(TimeInfo), double? downLength = default(double?), double? upLength = default(double?), string beam = default(string))
        {
            // to ensure "tool" is required (not null)
            if (tool == null)
            {
                throw new InvalidDataException("tool is a required property for DctToolStats and cannot be null");
            }
            else
            {
                this.Tool = tool;
            }
            this.Time = time;
            this.DownLength = downLength;
            this.UpLength = upLength;
            this.Beam = beam;
        }
        
        /// <summary>
        /// Tool name
        /// </summary>
        /// <value>Tool name</value>
        [DataMember(Name="tool", EmitDefaultValue=false)]
        public string Tool { get; set; }

        /// <summary>
        /// Gets or Sets Time
        /// </summary>
        [DataMember(Name="time", EmitDefaultValue=false)]
        public TimeInfo Time { get; set; }

        /// <summary>
        /// Total travel time when this tool is in the down position
        /// </summary>
        /// <value>Total travel time when this tool is in the down position</value>
        [DataMember(Name="down-length", EmitDefaultValue=false)]
        public double? DownLength { get; set; }

        /// <summary>
        /// Total travel time when this tool is in the raised position
        /// </summary>
        /// <value>Total travel time when this tool is in the raised position</value>
        [DataMember(Name="up-length", EmitDefaultValue=false)]
        public double? UpLength { get; set; }

        /// <summary>
        /// Beam name for multi-beam tables
        /// </summary>
        /// <value>Beam name for multi-beam tables</value>
        [DataMember(Name="beam", EmitDefaultValue=false)]
        public string Beam { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DctToolStats {\n");
            sb.Append("  Tool: ").Append(Tool).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  DownLength: ").Append(DownLength).Append("\n");
            sb.Append("  UpLength: ").Append(UpLength).Append("\n");
            sb.Append("  Beam: ").Append(Beam).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DctToolStats);
        }

        /// <summary>
        /// Returns true if DctToolStats instances are equal
        /// </summary>
        /// <param name="input">Instance of DctToolStats to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DctToolStats input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Tool == input.Tool ||
                    (this.Tool != null &&
                    this.Tool.Equals(input.Tool))
                ) && 
                (
                    this.Time == input.Time ||
                    (this.Time != null &&
                    this.Time.Equals(input.Time))
                ) && 
                (
                    this.DownLength == input.DownLength ||
                    (this.DownLength != null &&
                    this.DownLength.Equals(input.DownLength))
                ) && 
                (
                    this.UpLength == input.UpLength ||
                    (this.UpLength != null &&
                    this.UpLength.Equals(input.UpLength))
                ) && 
                (
                    this.Beam == input.Beam ||
                    (this.Beam != null &&
                    this.Beam.Equals(input.Beam))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Tool != null)
                    hashCode = hashCode * 59 + this.Tool.GetHashCode();
                if (this.Time != null)
                    hashCode = hashCode * 59 + this.Time.GetHashCode();
                if (this.DownLength != null)
                    hashCode = hashCode * 59 + this.DownLength.GetHashCode();
                if (this.UpLength != null)
                    hashCode = hashCode * 59 + this.UpLength.GetHashCode();
                if (this.Beam != null)
                    hashCode = hashCode * 59 + this.Beam.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
