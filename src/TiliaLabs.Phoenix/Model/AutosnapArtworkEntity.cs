/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Information describing artwork being autosnapped
    /// </summary>
    [DataContract]
        public partial class AutosnapArtworkEntity :  IEquatable<AutosnapArtworkEntity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AutosnapArtworkEntity" /> class.
        /// </summary>
        /// <param name="path">Local path of artwork file (required).</param>
        /// <param name="frontPage">Page number of front artwork.  When not specified defaults to page 1 unless back page is defined in which case only back side of die is snapped.</param>
        /// <param name="backPage">Page number of back artwork.  Default: none.</param>
        /// <param name="cutInk">Name if spot cut line ink.  Ink automatically detected when not specified.</param>
        public AutosnapArtworkEntity(string path = default(string), int? frontPage = default(int?), int? backPage = default(int?), string cutInk = default(string))
        {
            // to ensure "path" is required (not null)
            if (path == null)
            {
                throw new InvalidDataException("path is a required property for AutosnapArtworkEntity and cannot be null");
            }
            else
            {
                this.Path = path;
            }
            this.FrontPage = frontPage;
            this.BackPage = backPage;
            this.CutInk = cutInk;
        }
        
        /// <summary>
        /// Local path of artwork file
        /// </summary>
        /// <value>Local path of artwork file</value>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// Page number of front artwork.  When not specified defaults to page 1 unless back page is defined in which case only back side of die is snapped
        /// </summary>
        /// <value>Page number of front artwork.  When not specified defaults to page 1 unless back page is defined in which case only back side of die is snapped</value>
        [DataMember(Name="front-page", EmitDefaultValue=false)]
        public int? FrontPage { get; set; }

        /// <summary>
        /// Page number of back artwork.  Default: none
        /// </summary>
        /// <value>Page number of back artwork.  Default: none</value>
        [DataMember(Name="back-page", EmitDefaultValue=false)]
        public int? BackPage { get; set; }

        /// <summary>
        /// Name if spot cut line ink.  Ink automatically detected when not specified
        /// </summary>
        /// <value>Name if spot cut line ink.  Ink automatically detected when not specified</value>
        [DataMember(Name="cut-ink", EmitDefaultValue=false)]
        public string CutInk { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AutosnapArtworkEntity {\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  FrontPage: ").Append(FrontPage).Append("\n");
            sb.Append("  BackPage: ").Append(BackPage).Append("\n");
            sb.Append("  CutInk: ").Append(CutInk).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AutosnapArtworkEntity);
        }

        /// <summary>
        /// Returns true if AutosnapArtworkEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of AutosnapArtworkEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AutosnapArtworkEntity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.FrontPage == input.FrontPage ||
                    (this.FrontPage != null &&
                    this.FrontPage.Equals(input.FrontPage))
                ) && 
                (
                    this.BackPage == input.BackPage ||
                    (this.BackPage != null &&
                    this.BackPage.Equals(input.BackPage))
                ) && 
                (
                    this.CutInk == input.CutInk ||
                    (this.CutInk != null &&
                    this.CutInk.Equals(input.CutInk))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.FrontPage != null)
                    hashCode = hashCode * 59 + this.FrontPage.GetHashCode();
                if (this.BackPage != null)
                    hashCode = hashCode * 59 + this.BackPage.GetHashCode();
                if (this.CutInk != null)
                    hashCode = hashCode * 59 + this.CutInk.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
