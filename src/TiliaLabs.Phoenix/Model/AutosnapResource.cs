/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Autosnap artwork action resource
    /// </summary>
    [DataContract]
        public partial class AutosnapResource :  IEquatable<AutosnapResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AutosnapResource" /> class.
        /// </summary>
        /// <param name="idref">ID of action resource is being applied to (Hot Folders only).</param>
        /// <param name="artworks">List of artworks and autosnap targets.</param>
        public AutosnapResource(int? idref = default(int?), List<AutosnapProductDiesEntity> artworks = default(List<AutosnapProductDiesEntity>))
        {
            this.Idref = idref;
            this.Artworks = artworks;
        }
        
        /// <summary>
        /// ID of action resource is being applied to (Hot Folders only)
        /// </summary>
        /// <value>ID of action resource is being applied to (Hot Folders only)</value>
        [DataMember(Name="idref", EmitDefaultValue=false)]
        public int? Idref { get; set; }

        /// <summary>
        /// List of artworks and autosnap targets
        /// </summary>
        /// <value>List of artworks and autosnap targets</value>
        [DataMember(Name="artworks", EmitDefaultValue=false)]
        public List<AutosnapProductDiesEntity> Artworks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AutosnapResource {\n");
            sb.Append("  Idref: ").Append(Idref).Append("\n");
            sb.Append("  Artworks: ").Append(Artworks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AutosnapResource);
        }

        /// <summary>
        /// Returns true if AutosnapResource instances are equal
        /// </summary>
        /// <param name="input">Instance of AutosnapResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AutosnapResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Idref == input.Idref ||
                    (this.Idref != null &&
                    this.Idref.Equals(input.Idref))
                ) && 
                (
                    this.Artworks == input.Artworks ||
                    this.Artworks != null &&
                    input.Artworks != null &&
                    this.Artworks.SequenceEqual(input.Artworks)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Idref != null)
                    hashCode = hashCode * 59 + this.Idref.GetHashCode();
                if (this.Artworks != null)
                    hashCode = hashCode * 59 + this.Artworks.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
