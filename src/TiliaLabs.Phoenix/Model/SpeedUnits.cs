/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Speed Units
    /// </summary>
    [DataContract]
        public partial class SpeedUnits :  IEquatable<SpeedUnits>, IValidatableObject
    {
        /// <summary>
        /// Units
        /// </summary>
        /// <value>Units</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum UnitsEnum
        {
            /// <summary>
            /// Enum Sheets for value: Sheets
            /// </summary>
            [EnumMember(Value = "Sheets")]
            Sheets = 1,
            /// <summary>
            /// Enum FEET for value: FEET
            /// </summary>
            [EnumMember(Value = "FEET")]
            FEET = 2,
            /// <summary>
            /// Enum Inches for value: Inches
            /// </summary>
            [EnumMember(Value = "Inches")]
            Inches = 3,
            /// <summary>
            /// Enum Meters for value: Meters
            /// </summary>
            [EnumMember(Value = "Meters")]
            Meters = 4,
            /// <summary>
            /// Enum Centimeters for value: Centimeters
            /// </summary>
            [EnumMember(Value = "Centimeters")]
            Centimeters = 5,
            /// <summary>
            /// Enum Millimeters for value: Millimeters
            /// </summary>
            [EnumMember(Value = "Millimeters")]
            Millimeters = 6,
            /// <summary>
            /// Enum MSI for value: MSI
            /// </summary>
            [EnumMember(Value = "MSI")]
            MSI = 7,
            /// <summary>
            /// Enum Feet for value: Feet²
            /// </summary>
            [EnumMember(Value = "Feet²")]
            Feet = 8,
            /// <summary>
            /// Enum Inches_8 for value: Inches²
            /// </summary>
            [EnumMember(Value = "Inches²")]
            Inches_8 = 9,
            /// <summary>
            /// Enum Meters_9 for value: Meters²
            /// </summary>
            [EnumMember(Value = "Meters²")]
            Meters_9 = 10,
            /// <summary>
            /// Enum Centimeters_10 for value: Centimeters²
            /// </summary>
            [EnumMember(Value = "Centimeters²")]
            Centimeters_10 = 11,
            /// <summary>
            /// Enum Millimeters_11 for value: Millimeters²
            /// </summary>
            [EnumMember(Value = "Millimeters²")]
            Millimeters_11 = 12        }
        /// <summary>
        /// Units
        /// </summary>
        /// <value>Units</value>
        [DataMember(Name="units", EmitDefaultValue=false)]
        public UnitsEnum Units { get; set; }
        /// <summary>
        /// Time
        /// </summary>
        /// <value>Time</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TimeEnum
        {
            /// <summary>
            /// Enum Milliseconds for value: Milliseconds
            /// </summary>
            [EnumMember(Value = "Milliseconds")]
            Milliseconds = 1,
            /// <summary>
            /// Enum Seconds for value: Seconds
            /// </summary>
            [EnumMember(Value = "Seconds")]
            Seconds = 2,
            /// <summary>
            /// Enum Minutes for value: Minutes
            /// </summary>
            [EnumMember(Value = "Minutes")]
            Minutes = 3,
            /// <summary>
            /// Enum Hours for value: Hours
            /// </summary>
            [EnumMember(Value = "Hours")]
            Hours = 4,
            /// <summary>
            /// Enum Days for value: Days
            /// </summary>
            [EnumMember(Value = "Days")]
            Days = 5        }
        /// <summary>
        /// Time
        /// </summary>
        /// <value>Time</value>
        [DataMember(Name="time", EmitDefaultValue=false)]
        public TimeEnum Time { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SpeedUnits" /> class.
        /// </summary>
        /// <param name="units">Units (required).</param>
        /// <param name="time">Time (required).</param>
        public SpeedUnits(UnitsEnum units = default(UnitsEnum), TimeEnum time = default(TimeEnum))
        {
            // to ensure "units" is required (not null)
            if (units == null)
            {
                throw new InvalidDataException("units is a required property for SpeedUnits and cannot be null");
            }
            else
            {
                this.Units = units;
            }
            // to ensure "time" is required (not null)
            if (time == null)
            {
                throw new InvalidDataException("time is a required property for SpeedUnits and cannot be null");
            }
            else
            {
                this.Time = time;
            }
        }
        


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SpeedUnits {\n");
            sb.Append("  Units: ").Append(Units).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SpeedUnits);
        }

        /// <summary>
        /// Returns true if SpeedUnits instances are equal
        /// </summary>
        /// <param name="input">Instance of SpeedUnits to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SpeedUnits input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Units == input.Units ||
                    (this.Units != null &&
                    this.Units.Equals(input.Units))
                ) && 
                (
                    this.Time == input.Time ||
                    (this.Time != null &&
                    this.Time.Equals(input.Time))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Units != null)
                    hashCode = hashCode * 59 + this.Units.GetHashCode();
                if (this.Time != null)
                    hashCode = hashCode * 59 + this.Time.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
