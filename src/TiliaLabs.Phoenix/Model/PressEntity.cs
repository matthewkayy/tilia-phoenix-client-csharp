/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Press library item
    /// </summary>
    [DataContract]
        public partial class PressEntity :  IEquatable<PressEntity>, IValidatableObject
    {
        /// <summary>
        /// Speed units
        /// </summary>
        /// <value>Speed units</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum SpeedUnitsEnum
        {
            /// <summary>
            /// Enum SheetsPerMinute for value: SheetsPerMinute
            /// </summary>
            [EnumMember(Value = "SheetsPerMinute")]
            SheetsPerMinute = 1,
            /// <summary>
            /// Enum SheetsPerHour for value: SheetsPerHour
            /// </summary>
            [EnumMember(Value = "SheetsPerHour")]
            SheetsPerHour = 2,
            /// <summary>
            /// Enum FeetPerMinute for value: FeetPerMinute
            /// </summary>
            [EnumMember(Value = "FeetPerMinute")]
            FeetPerMinute = 3,
            /// <summary>
            /// Enum MetersPerMinute for value: MetersPerMinute
            /// </summary>
            [EnumMember(Value = "MetersPerMinute")]
            MetersPerMinute = 4,
            /// <summary>
            /// Enum FeetPerHour for value: FeetPerHour
            /// </summary>
            [EnumMember(Value = "FeetPerHour")]
            FeetPerHour = 5,
            /// <summary>
            /// Enum MetersPerHour for value: MetersPerHour
            /// </summary>
            [EnumMember(Value = "MetersPerHour")]
            MetersPerHour = 6,
            /// <summary>
            /// Enum SquareFeetPerHour for value: SquareFeetPerHour
            /// </summary>
            [EnumMember(Value = "SquareFeetPerHour")]
            SquareFeetPerHour = 7,
            /// <summary>
            /// Enum SquareMetersPerHour for value: SquareMetersPerHour
            /// </summary>
            [EnumMember(Value = "SquareMetersPerHour")]
            SquareMetersPerHour = 8        }
        /// <summary>
        /// Speed units
        /// </summary>
        /// <value>Speed units</value>
        [DataMember(Name="speed-units", EmitDefaultValue=false)]
        public SpeedUnitsEnum? SpeedUnits { get; set; }
        /// <summary>
        /// Workstyle of single-pass double sided printing unit
        /// </summary>
        /// <value>Workstyle of single-pass double sided printing unit</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum WorkstyleEnum
        {
            /// <summary>
            /// Enum FlatWork for value: FlatWork
            /// </summary>
            [EnumMember(Value = "FlatWork")]
            FlatWork = 1,
            /// <summary>
            /// Enum Sheetwise for value: Sheetwise
            /// </summary>
            [EnumMember(Value = "Sheetwise")]
            Sheetwise = 2,
            /// <summary>
            /// Enum Perfecting for value: Perfecting
            /// </summary>
            [EnumMember(Value = "Perfecting")]
            Perfecting = 3        }
        /// <summary>
        /// Workstyle of single-pass double sided printing unit
        /// </summary>
        /// <value>Workstyle of single-pass double sided printing unit</value>
        [DataMember(Name="workstyle", EmitDefaultValue=false)]
        public WorkstyleEnum? Workstyle { get; set; }
        /// <summary>
        /// Units of min/max stock weight defined for this press.  Defaults to GSM when not specified.
        /// </summary>
        /// <value>Units of min/max stock weight defined for this press.  Defaults to GSM when not specified.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum WeightUnitsEnum
        {
            /// <summary>
            /// Enum GSM for value: GSM
            /// </summary>
            [EnumMember(Value = "GSM")]
            GSM = 1,
            /// <summary>
            /// Enum Lb for value: Lb
            /// </summary>
            [EnumMember(Value = "Lb")]
            Lb = 2        }
        /// <summary>
        /// Units of min/max stock weight defined for this press.  Defaults to GSM when not specified.
        /// </summary>
        /// <value>Units of min/max stock weight defined for this press.  Defaults to GSM when not specified.</value>
        [DataMember(Name="weight-units", EmitDefaultValue=false)]
        public WeightUnitsEnum? WeightUnits { get; set; }
        /// <summary>
        /// Weight type for American standard stock weight system for min/max stock weight defined for this press.  Defaults to Text when not specified.
        /// </summary>
        /// <value>Weight type for American standard stock weight system for min/max stock weight defined for this press.  Defaults to Text when not specified.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum WeightTypeEnum
        {
            /// <summary>
            /// Enum Text for value: Text
            /// </summary>
            [EnumMember(Value = "Text")]
            Text = 1,
            /// <summary>
            /// Enum Book for value: Book
            /// </summary>
            [EnumMember(Value = "Book")]
            Book = 2,
            /// <summary>
            /// Enum Bond for value: Bond
            /// </summary>
            [EnumMember(Value = "Bond")]
            Bond = 3,
            /// <summary>
            /// Enum Offset for value: Offset
            /// </summary>
            [EnumMember(Value = "Offset")]
            Offset = 4,
            /// <summary>
            /// Enum Cover for value: Cover
            /// </summary>
            [EnumMember(Value = "Cover")]
            Cover = 5,
            /// <summary>
            /// Enum Bristol for value: Bristol
            /// </summary>
            [EnumMember(Value = "Bristol")]
            Bristol = 6,
            /// <summary>
            /// Enum Index for value: Index
            /// </summary>
            [EnumMember(Value = "Index")]
            Index = 7,
            /// <summary>
            /// Enum Tag for value: Tag
            /// </summary>
            [EnumMember(Value = "Tag")]
            Tag = 8,
            /// <summary>
            /// Enum Card for value: Card
            /// </summary>
            [EnumMember(Value = "Card")]
            Card = 9        }
        /// <summary>
        /// Weight type for American standard stock weight system for min/max stock weight defined for this press.  Defaults to Text when not specified.
        /// </summary>
        /// <value>Weight type for American standard stock weight system for min/max stock weight defined for this press.  Defaults to Text when not specified.</value>
        [DataMember(Name="weight-type", EmitDefaultValue=false)]
        public WeightTypeEnum? WeightType { get; set; }
        /// <summary>
        /// Sheet handling option for sheet orientation on this press.  Defaults to None when not specified.
        /// </summary>
        /// <value>Sheet handling option for sheet orientation on this press.  Defaults to None when not specified.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum SheetHandlingEnum
        {
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,
            /// <summary>
            /// Enum LongEdgeHorizontal for value: LongEdgeHorizontal
            /// </summary>
            [EnumMember(Value = "LongEdgeHorizontal")]
            LongEdgeHorizontal = 2,
            /// <summary>
            /// Enum LongEdgeVertical for value: LongEdgeVertical
            /// </summary>
            [EnumMember(Value = "LongEdgeVertical")]
            LongEdgeVertical = 3        }
        /// <summary>
        /// Sheet handling option for sheet orientation on this press.  Defaults to None when not specified.
        /// </summary>
        /// <value>Sheet handling option for sheet orientation on this press.  Defaults to None when not specified.</value>
        [DataMember(Name="sheet-handling", EmitDefaultValue=false)]
        public SheetHandlingEnum? SheetHandling { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PressEntity" /> class.
        /// </summary>
        /// <param name="name">Name of library item (required).</param>
        /// <param name="id">Unique ID of this item (auto-generated, read-only).</param>
        /// <param name="externalId">Optional external ID of media item.</param>
        /// <param name="description">Press description.</param>
        /// <param name="manufacturer">Press manufacturer.</param>
        /// <param name="speed">Speed of press in speed units.</param>
        /// <param name="speedUnits">Speed units.</param>
        /// <param name="costPerHour">Cost to operate this press per hour.</param>
        /// <param name="makeReadyTime">Per-color make ready time in minutes.</param>
        /// <param name="numberOfColors">Maximum number of colors supported on this press.</param>
        /// <param name="minRunLength">Minimum run length allowed for layouts.</param>
        /// <param name="backSinglePass">Whether this press supports single-pass double sided printing.</param>
        /// <param name="workstyle">Workstyle of single-pass double sided printing unit.</param>
        /// <param name="backNumberOfColors">Maximum number of colors supported on back side when doing single-pass double sided printing.</param>
        /// <param name="backSpeedReduction">Percentage of speed reduction when doing single-pass double sided printing.</param>
        /// <param name="multiPass">Whether to allow multiple passes through this press.</param>
        /// <param name="minSheetWidth">Minumum sheet width supported by this press.</param>
        /// <param name="maxSheetWidth">Maximum sheet width supported by this press.</param>
        /// <param name="minSheetHeight">Minumum sheet height supported by this press.</param>
        /// <param name="maxSheetHeight">Minumum sheet width supported by this press.</param>
        /// <param name="minStockThickness">Minimum stock thickness supported by this press.</param>
        /// <param name="maxStockThickness">Maximum stock thickness supported by this press.</param>
        /// <param name="minStockWeight">Minimum stock weight supported by this press.</param>
        /// <param name="maxStockWeight">Maximum stock weight supported by this press.</param>
        /// <param name="weightUnits">Units of min/max stock weight defined for this press.  Defaults to GSM when not specified..</param>
        /// <param name="weightType">Weight type for American standard stock weight system for min/max stock weight defined for this press.  Defaults to Text when not specified..</param>
        /// <param name="sheetHandling">Sheet handling option for sheet orientation on this press.  Defaults to None when not specified..</param>
        /// <param name="imageMargins">imageMargins.</param>
        /// <param name="contentMargins">contentMargins.</param>
        /// <param name="gripper">Gripper distance from bottom of sheet.</param>
        /// <param name="defaultPlate">Optional default plate to use when applying this press to a layout.</param>
        public PressEntity(string name = default(string), string id = default(string), string externalId = default(string), string description = default(string), string manufacturer = default(string), double? speed = default(double?), SpeedUnitsEnum? speedUnits = default(SpeedUnitsEnum?), double? costPerHour = default(double?), double? makeReadyTime = default(double?), int? numberOfColors = default(int?), int? minRunLength = default(int?), bool? backSinglePass = default(bool?), WorkstyleEnum? workstyle = default(WorkstyleEnum?), int? backNumberOfColors = default(int?), double? backSpeedReduction = default(double?), bool? multiPass = default(bool?), string minSheetWidth = default(string), string maxSheetWidth = default(string), string minSheetHeight = default(string), string maxSheetHeight = default(string), string minStockThickness = default(string), string maxStockThickness = default(string), double? minStockWeight = default(double?), double? maxStockWeight = default(double?), WeightUnitsEnum? weightUnits = default(WeightUnitsEnum?), WeightTypeEnum? weightType = default(WeightTypeEnum?), SheetHandlingEnum? sheetHandling = default(SheetHandlingEnum?), MarginsEntity imageMargins = default(MarginsEntity), MarginsEntity contentMargins = default(MarginsEntity), string gripper = default(string), string defaultPlate = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for PressEntity and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            this.Id = id;
            this.ExternalId = externalId;
            this.Description = description;
            this.Manufacturer = manufacturer;
            this.Speed = speed;
            this.SpeedUnits = speedUnits;
            this.CostPerHour = costPerHour;
            this.MakeReadyTime = makeReadyTime;
            this.NumberOfColors = numberOfColors;
            this.MinRunLength = minRunLength;
            this.BackSinglePass = backSinglePass;
            this.Workstyle = workstyle;
            this.BackNumberOfColors = backNumberOfColors;
            this.BackSpeedReduction = backSpeedReduction;
            this.MultiPass = multiPass;
            this.MinSheetWidth = minSheetWidth;
            this.MaxSheetWidth = maxSheetWidth;
            this.MinSheetHeight = minSheetHeight;
            this.MaxSheetHeight = maxSheetHeight;
            this.MinStockThickness = minStockThickness;
            this.MaxStockThickness = maxStockThickness;
            this.MinStockWeight = minStockWeight;
            this.MaxStockWeight = maxStockWeight;
            this.WeightUnits = weightUnits;
            this.WeightType = weightType;
            this.SheetHandling = sheetHandling;
            this.ImageMargins = imageMargins;
            this.ContentMargins = contentMargins;
            this.Gripper = gripper;
            this.DefaultPlate = defaultPlate;
        }
        
        /// <summary>
        /// Name of library item
        /// </summary>
        /// <value>Name of library item</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Unique ID of this item (auto-generated, read-only)
        /// </summary>
        /// <value>Unique ID of this item (auto-generated, read-only)</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Optional external ID of media item
        /// </summary>
        /// <value>Optional external ID of media item</value>
        [DataMember(Name="external-id", EmitDefaultValue=false)]
        public string ExternalId { get; set; }

        /// <summary>
        /// Press description
        /// </summary>
        /// <value>Press description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Press manufacturer
        /// </summary>
        /// <value>Press manufacturer</value>
        [DataMember(Name="manufacturer", EmitDefaultValue=false)]
        public string Manufacturer { get; set; }

        /// <summary>
        /// Speed of press in speed units
        /// </summary>
        /// <value>Speed of press in speed units</value>
        [DataMember(Name="speed", EmitDefaultValue=false)]
        public double? Speed { get; set; }


        /// <summary>
        /// Cost to operate this press per hour
        /// </summary>
        /// <value>Cost to operate this press per hour</value>
        [DataMember(Name="cost-per-hour", EmitDefaultValue=false)]
        public double? CostPerHour { get; set; }

        /// <summary>
        /// Per-color make ready time in minutes
        /// </summary>
        /// <value>Per-color make ready time in minutes</value>
        [DataMember(Name="make-ready-time", EmitDefaultValue=false)]
        public double? MakeReadyTime { get; set; }

        /// <summary>
        /// Maximum number of colors supported on this press
        /// </summary>
        /// <value>Maximum number of colors supported on this press</value>
        [DataMember(Name="number-of-colors", EmitDefaultValue=false)]
        public int? NumberOfColors { get; set; }

        /// <summary>
        /// Minimum run length allowed for layouts
        /// </summary>
        /// <value>Minimum run length allowed for layouts</value>
        [DataMember(Name="min-run-length", EmitDefaultValue=false)]
        public int? MinRunLength { get; set; }

        /// <summary>
        /// Whether this press supports single-pass double sided printing
        /// </summary>
        /// <value>Whether this press supports single-pass double sided printing</value>
        [DataMember(Name="back-single-pass", EmitDefaultValue=false)]
        public bool? BackSinglePass { get; set; }


        /// <summary>
        /// Maximum number of colors supported on back side when doing single-pass double sided printing
        /// </summary>
        /// <value>Maximum number of colors supported on back side when doing single-pass double sided printing</value>
        [DataMember(Name="back-number-of-colors", EmitDefaultValue=false)]
        public int? BackNumberOfColors { get; set; }

        /// <summary>
        /// Percentage of speed reduction when doing single-pass double sided printing
        /// </summary>
        /// <value>Percentage of speed reduction when doing single-pass double sided printing</value>
        [DataMember(Name="back-speed-reduction", EmitDefaultValue=false)]
        public double? BackSpeedReduction { get; set; }

        /// <summary>
        /// Whether to allow multiple passes through this press
        /// </summary>
        /// <value>Whether to allow multiple passes through this press</value>
        [DataMember(Name="multi-pass", EmitDefaultValue=false)]
        public bool? MultiPass { get; set; }

        /// <summary>
        /// Minumum sheet width supported by this press
        /// </summary>
        /// <value>Minumum sheet width supported by this press</value>
        [DataMember(Name="min-sheet-width", EmitDefaultValue=false)]
        public string MinSheetWidth { get; set; }

        /// <summary>
        /// Maximum sheet width supported by this press
        /// </summary>
        /// <value>Maximum sheet width supported by this press</value>
        [DataMember(Name="max-sheet-width", EmitDefaultValue=false)]
        public string MaxSheetWidth { get; set; }

        /// <summary>
        /// Minumum sheet height supported by this press
        /// </summary>
        /// <value>Minumum sheet height supported by this press</value>
        [DataMember(Name="min-sheet-height", EmitDefaultValue=false)]
        public string MinSheetHeight { get; set; }

        /// <summary>
        /// Minumum sheet width supported by this press
        /// </summary>
        /// <value>Minumum sheet width supported by this press</value>
        [DataMember(Name="max-sheet-height", EmitDefaultValue=false)]
        public string MaxSheetHeight { get; set; }

        /// <summary>
        /// Minimum stock thickness supported by this press
        /// </summary>
        /// <value>Minimum stock thickness supported by this press</value>
        [DataMember(Name="min-stock-thickness", EmitDefaultValue=false)]
        public string MinStockThickness { get; set; }

        /// <summary>
        /// Maximum stock thickness supported by this press
        /// </summary>
        /// <value>Maximum stock thickness supported by this press</value>
        [DataMember(Name="max-stock-thickness", EmitDefaultValue=false)]
        public string MaxStockThickness { get; set; }

        /// <summary>
        /// Minimum stock weight supported by this press
        /// </summary>
        /// <value>Minimum stock weight supported by this press</value>
        [DataMember(Name="min-stock-weight", EmitDefaultValue=false)]
        public double? MinStockWeight { get; set; }

        /// <summary>
        /// Maximum stock weight supported by this press
        /// </summary>
        /// <value>Maximum stock weight supported by this press</value>
        [DataMember(Name="max-stock-weight", EmitDefaultValue=false)]
        public double? MaxStockWeight { get; set; }




        /// <summary>
        /// Gets or Sets ImageMargins
        /// </summary>
        [DataMember(Name="image-margins", EmitDefaultValue=false)]
        public MarginsEntity ImageMargins { get; set; }

        /// <summary>
        /// Gets or Sets ContentMargins
        /// </summary>
        [DataMember(Name="content-margins", EmitDefaultValue=false)]
        public MarginsEntity ContentMargins { get; set; }

        /// <summary>
        /// Gripper distance from bottom of sheet
        /// </summary>
        /// <value>Gripper distance from bottom of sheet</value>
        [DataMember(Name="gripper", EmitDefaultValue=false)]
        public string Gripper { get; set; }

        /// <summary>
        /// Optional default plate to use when applying this press to a layout
        /// </summary>
        /// <value>Optional default plate to use when applying this press to a layout</value>
        [DataMember(Name="default-plate", EmitDefaultValue=false)]
        public string DefaultPlate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PressEntity {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Manufacturer: ").Append(Manufacturer).Append("\n");
            sb.Append("  Speed: ").Append(Speed).Append("\n");
            sb.Append("  SpeedUnits: ").Append(SpeedUnits).Append("\n");
            sb.Append("  CostPerHour: ").Append(CostPerHour).Append("\n");
            sb.Append("  MakeReadyTime: ").Append(MakeReadyTime).Append("\n");
            sb.Append("  NumberOfColors: ").Append(NumberOfColors).Append("\n");
            sb.Append("  MinRunLength: ").Append(MinRunLength).Append("\n");
            sb.Append("  BackSinglePass: ").Append(BackSinglePass).Append("\n");
            sb.Append("  Workstyle: ").Append(Workstyle).Append("\n");
            sb.Append("  BackNumberOfColors: ").Append(BackNumberOfColors).Append("\n");
            sb.Append("  BackSpeedReduction: ").Append(BackSpeedReduction).Append("\n");
            sb.Append("  MultiPass: ").Append(MultiPass).Append("\n");
            sb.Append("  MinSheetWidth: ").Append(MinSheetWidth).Append("\n");
            sb.Append("  MaxSheetWidth: ").Append(MaxSheetWidth).Append("\n");
            sb.Append("  MinSheetHeight: ").Append(MinSheetHeight).Append("\n");
            sb.Append("  MaxSheetHeight: ").Append(MaxSheetHeight).Append("\n");
            sb.Append("  MinStockThickness: ").Append(MinStockThickness).Append("\n");
            sb.Append("  MaxStockThickness: ").Append(MaxStockThickness).Append("\n");
            sb.Append("  MinStockWeight: ").Append(MinStockWeight).Append("\n");
            sb.Append("  MaxStockWeight: ").Append(MaxStockWeight).Append("\n");
            sb.Append("  WeightUnits: ").Append(WeightUnits).Append("\n");
            sb.Append("  WeightType: ").Append(WeightType).Append("\n");
            sb.Append("  SheetHandling: ").Append(SheetHandling).Append("\n");
            sb.Append("  ImageMargins: ").Append(ImageMargins).Append("\n");
            sb.Append("  ContentMargins: ").Append(ContentMargins).Append("\n");
            sb.Append("  Gripper: ").Append(Gripper).Append("\n");
            sb.Append("  DefaultPlate: ").Append(DefaultPlate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PressEntity);
        }

        /// <summary>
        /// Returns true if PressEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of PressEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PressEntity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Manufacturer == input.Manufacturer ||
                    (this.Manufacturer != null &&
                    this.Manufacturer.Equals(input.Manufacturer))
                ) && 
                (
                    this.Speed == input.Speed ||
                    (this.Speed != null &&
                    this.Speed.Equals(input.Speed))
                ) && 
                (
                    this.SpeedUnits == input.SpeedUnits ||
                    (this.SpeedUnits != null &&
                    this.SpeedUnits.Equals(input.SpeedUnits))
                ) && 
                (
                    this.CostPerHour == input.CostPerHour ||
                    (this.CostPerHour != null &&
                    this.CostPerHour.Equals(input.CostPerHour))
                ) && 
                (
                    this.MakeReadyTime == input.MakeReadyTime ||
                    (this.MakeReadyTime != null &&
                    this.MakeReadyTime.Equals(input.MakeReadyTime))
                ) && 
                (
                    this.NumberOfColors == input.NumberOfColors ||
                    (this.NumberOfColors != null &&
                    this.NumberOfColors.Equals(input.NumberOfColors))
                ) && 
                (
                    this.MinRunLength == input.MinRunLength ||
                    (this.MinRunLength != null &&
                    this.MinRunLength.Equals(input.MinRunLength))
                ) && 
                (
                    this.BackSinglePass == input.BackSinglePass ||
                    (this.BackSinglePass != null &&
                    this.BackSinglePass.Equals(input.BackSinglePass))
                ) && 
                (
                    this.Workstyle == input.Workstyle ||
                    (this.Workstyle != null &&
                    this.Workstyle.Equals(input.Workstyle))
                ) && 
                (
                    this.BackNumberOfColors == input.BackNumberOfColors ||
                    (this.BackNumberOfColors != null &&
                    this.BackNumberOfColors.Equals(input.BackNumberOfColors))
                ) && 
                (
                    this.BackSpeedReduction == input.BackSpeedReduction ||
                    (this.BackSpeedReduction != null &&
                    this.BackSpeedReduction.Equals(input.BackSpeedReduction))
                ) && 
                (
                    this.MultiPass == input.MultiPass ||
                    (this.MultiPass != null &&
                    this.MultiPass.Equals(input.MultiPass))
                ) && 
                (
                    this.MinSheetWidth == input.MinSheetWidth ||
                    (this.MinSheetWidth != null &&
                    this.MinSheetWidth.Equals(input.MinSheetWidth))
                ) && 
                (
                    this.MaxSheetWidth == input.MaxSheetWidth ||
                    (this.MaxSheetWidth != null &&
                    this.MaxSheetWidth.Equals(input.MaxSheetWidth))
                ) && 
                (
                    this.MinSheetHeight == input.MinSheetHeight ||
                    (this.MinSheetHeight != null &&
                    this.MinSheetHeight.Equals(input.MinSheetHeight))
                ) && 
                (
                    this.MaxSheetHeight == input.MaxSheetHeight ||
                    (this.MaxSheetHeight != null &&
                    this.MaxSheetHeight.Equals(input.MaxSheetHeight))
                ) && 
                (
                    this.MinStockThickness == input.MinStockThickness ||
                    (this.MinStockThickness != null &&
                    this.MinStockThickness.Equals(input.MinStockThickness))
                ) && 
                (
                    this.MaxStockThickness == input.MaxStockThickness ||
                    (this.MaxStockThickness != null &&
                    this.MaxStockThickness.Equals(input.MaxStockThickness))
                ) && 
                (
                    this.MinStockWeight == input.MinStockWeight ||
                    (this.MinStockWeight != null &&
                    this.MinStockWeight.Equals(input.MinStockWeight))
                ) && 
                (
                    this.MaxStockWeight == input.MaxStockWeight ||
                    (this.MaxStockWeight != null &&
                    this.MaxStockWeight.Equals(input.MaxStockWeight))
                ) && 
                (
                    this.WeightUnits == input.WeightUnits ||
                    (this.WeightUnits != null &&
                    this.WeightUnits.Equals(input.WeightUnits))
                ) && 
                (
                    this.WeightType == input.WeightType ||
                    (this.WeightType != null &&
                    this.WeightType.Equals(input.WeightType))
                ) && 
                (
                    this.SheetHandling == input.SheetHandling ||
                    (this.SheetHandling != null &&
                    this.SheetHandling.Equals(input.SheetHandling))
                ) && 
                (
                    this.ImageMargins == input.ImageMargins ||
                    (this.ImageMargins != null &&
                    this.ImageMargins.Equals(input.ImageMargins))
                ) && 
                (
                    this.ContentMargins == input.ContentMargins ||
                    (this.ContentMargins != null &&
                    this.ContentMargins.Equals(input.ContentMargins))
                ) && 
                (
                    this.Gripper == input.Gripper ||
                    (this.Gripper != null &&
                    this.Gripper.Equals(input.Gripper))
                ) && 
                (
                    this.DefaultPlate == input.DefaultPlate ||
                    (this.DefaultPlate != null &&
                    this.DefaultPlate.Equals(input.DefaultPlate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ExternalId != null)
                    hashCode = hashCode * 59 + this.ExternalId.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Manufacturer != null)
                    hashCode = hashCode * 59 + this.Manufacturer.GetHashCode();
                if (this.Speed != null)
                    hashCode = hashCode * 59 + this.Speed.GetHashCode();
                if (this.SpeedUnits != null)
                    hashCode = hashCode * 59 + this.SpeedUnits.GetHashCode();
                if (this.CostPerHour != null)
                    hashCode = hashCode * 59 + this.CostPerHour.GetHashCode();
                if (this.MakeReadyTime != null)
                    hashCode = hashCode * 59 + this.MakeReadyTime.GetHashCode();
                if (this.NumberOfColors != null)
                    hashCode = hashCode * 59 + this.NumberOfColors.GetHashCode();
                if (this.MinRunLength != null)
                    hashCode = hashCode * 59 + this.MinRunLength.GetHashCode();
                if (this.BackSinglePass != null)
                    hashCode = hashCode * 59 + this.BackSinglePass.GetHashCode();
                if (this.Workstyle != null)
                    hashCode = hashCode * 59 + this.Workstyle.GetHashCode();
                if (this.BackNumberOfColors != null)
                    hashCode = hashCode * 59 + this.BackNumberOfColors.GetHashCode();
                if (this.BackSpeedReduction != null)
                    hashCode = hashCode * 59 + this.BackSpeedReduction.GetHashCode();
                if (this.MultiPass != null)
                    hashCode = hashCode * 59 + this.MultiPass.GetHashCode();
                if (this.MinSheetWidth != null)
                    hashCode = hashCode * 59 + this.MinSheetWidth.GetHashCode();
                if (this.MaxSheetWidth != null)
                    hashCode = hashCode * 59 + this.MaxSheetWidth.GetHashCode();
                if (this.MinSheetHeight != null)
                    hashCode = hashCode * 59 + this.MinSheetHeight.GetHashCode();
                if (this.MaxSheetHeight != null)
                    hashCode = hashCode * 59 + this.MaxSheetHeight.GetHashCode();
                if (this.MinStockThickness != null)
                    hashCode = hashCode * 59 + this.MinStockThickness.GetHashCode();
                if (this.MaxStockThickness != null)
                    hashCode = hashCode * 59 + this.MaxStockThickness.GetHashCode();
                if (this.MinStockWeight != null)
                    hashCode = hashCode * 59 + this.MinStockWeight.GetHashCode();
                if (this.MaxStockWeight != null)
                    hashCode = hashCode * 59 + this.MaxStockWeight.GetHashCode();
                if (this.WeightUnits != null)
                    hashCode = hashCode * 59 + this.WeightUnits.GetHashCode();
                if (this.WeightType != null)
                    hashCode = hashCode * 59 + this.WeightType.GetHashCode();
                if (this.SheetHandling != null)
                    hashCode = hashCode * 59 + this.SheetHandling.GetHashCode();
                if (this.ImageMargins != null)
                    hashCode = hashCode * 59 + this.ImageMargins.GetHashCode();
                if (this.ContentMargins != null)
                    hashCode = hashCode * 59 + this.ContentMargins.GetHashCode();
                if (this.Gripper != null)
                    hashCode = hashCode * 59 + this.Gripper.GetHashCode();
                if (this.DefaultPlate != null)
                    hashCode = hashCode * 59 + this.DefaultPlate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
