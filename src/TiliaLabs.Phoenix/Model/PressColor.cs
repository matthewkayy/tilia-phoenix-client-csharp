/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Press color
    /// </summary>
    [DataContract]
        public partial class PressColor :  IEquatable<PressColor>, IValidatableObject
    {
        /// <summary>
        /// Side of color being printed
        /// </summary>
        /// <value>Side of color being printed</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum SideEnum
        {
            /// <summary>
            /// Enum Front for value: Front
            /// </summary>
            [EnumMember(Value = "Front")]
            Front = 1,
            /// <summary>
            /// Enum Back for value: Back
            /// </summary>
            [EnumMember(Value = "Back")]
            Back = 2        }
        /// <summary>
        /// Side of color being printed
        /// </summary>
        /// <value>Side of color being printed</value>
        [DataMember(Name="side", EmitDefaultValue=false)]
        public SideEnum? Side { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PressColor" /> class.
        /// </summary>
        /// <param name="name">Color name.</param>
        /// <param name="process">Color process.</param>
        /// <param name="side">Side of color being printed.</param>
        public PressColor(string name = default(string), string process = default(string), SideEnum? side = default(SideEnum?))
        {
            this.Name = name;
            this.Process = process;
            this.Side = side;
        }
        
        /// <summary>
        /// Color name
        /// </summary>
        /// <value>Color name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Color process
        /// </summary>
        /// <value>Color process</value>
        [DataMember(Name="process", EmitDefaultValue=false)]
        public string Process { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PressColor {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Process: ").Append(Process).Append("\n");
            sb.Append("  Side: ").Append(Side).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PressColor);
        }

        /// <summary>
        /// Returns true if PressColor instances are equal
        /// </summary>
        /// <param name="input">Instance of PressColor to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PressColor input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Process == input.Process ||
                    (this.Process != null &&
                    this.Process.Equals(input.Process))
                ) && 
                (
                    this.Side == input.Side ||
                    (this.Side != null &&
                    this.Side.Equals(input.Side))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Process != null)
                    hashCode = hashCode * 59 + this.Process.GetHashCode();
                if (this.Side != null)
                    hashCode = hashCode * 59 + this.Side.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
