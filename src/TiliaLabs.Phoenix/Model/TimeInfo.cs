/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Time info
    /// </summary>
    [DataContract]
        public partial class TimeInfo :  IEquatable<TimeInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeInfo" /> class.
        /// </summary>
        /// <param name="seconds">Time in seconds.</param>
        /// <param name="display">Time in display format with hours, minutes, and seconds.</param>
        public TimeInfo(double? seconds = default(double?), string display = default(string))
        {
            this.Seconds = seconds;
            this.Display = display;
        }
        
        /// <summary>
        /// Time in seconds
        /// </summary>
        /// <value>Time in seconds</value>
        [DataMember(Name="seconds", EmitDefaultValue=false)]
        public double? Seconds { get; set; }

        /// <summary>
        /// Time in display format with hours, minutes, and seconds
        /// </summary>
        /// <value>Time in display format with hours, minutes, and seconds</value>
        [DataMember(Name="display", EmitDefaultValue=false)]
        public string Display { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TimeInfo {\n");
            sb.Append("  Seconds: ").Append(Seconds).Append("\n");
            sb.Append("  Display: ").Append(Display).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TimeInfo);
        }

        /// <summary>
        /// Returns true if TimeInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of TimeInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimeInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Seconds == input.Seconds ||
                    (this.Seconds != null &&
                    this.Seconds.Equals(input.Seconds))
                ) && 
                (
                    this.Display == input.Display ||
                    (this.Display != null &&
                    this.Display.Equals(input.Display))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Seconds != null)
                    hashCode = hashCode * 59 + this.Seconds.GetHashCode();
                if (this.Display != null)
                    hashCode = hashCode * 59 + this.Display.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
