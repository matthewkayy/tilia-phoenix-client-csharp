/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Job layout
    /// </summary>
    [DataContract]
        public partial class PhoenixLayoutEntity :  IEquatable<PhoenixLayoutEntity>, IValidatableObject
    {
        /// <summary>
        /// Workstyle of layout
        /// </summary>
        /// <value>Workstyle of layout</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum WorkstyleEnum
        {
            /// <summary>
            /// Enum FlatWork for value: FlatWork
            /// </summary>
            [EnumMember(Value = "FlatWork")]
            FlatWork = 1,
            /// <summary>
            /// Enum Sheetwise for value: Sheetwise
            /// </summary>
            [EnumMember(Value = "Sheetwise")]
            Sheetwise = 2,
            /// <summary>
            /// Enum Perfecting for value: Perfecting
            /// </summary>
            [EnumMember(Value = "Perfecting")]
            Perfecting = 3        }
        /// <summary>
        /// Workstyle of layout
        /// </summary>
        /// <value>Workstyle of layout</value>
        [DataMember(Name="workstyle", EmitDefaultValue=false)]
        public WorkstyleEnum? Workstyle { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PhoenixLayoutEntity" /> class.
        /// </summary>
        /// <param name="id">Layout id.</param>
        /// <param name="index">Layout index.</param>
        /// <param name="name">Layout name.</param>
        /// <param name="workstyle">Workstyle of layout.</param>
        /// <param name="trails">Facility job trails processing this layout.</param>
        /// <param name="runLength">Required run length of layout.</param>
        /// <param name="pressMinutes">Estimated press time in minutes.</param>
        /// <param name="plates">Number of plates needed (print inks).</param>
        /// <param name="plateCost">Estimated plate cost in layout.</param>
        /// <param name="stockCost">Estimated stock cost in layout.</param>
        /// <param name="pressCost">Estimated press run cost in layout.</param>
        /// <param name="dieCost">Estimated die creation cost in layout.</param>
        /// <param name="totalCost">Estimated total layout cost.</param>
        /// <param name="waste">Total sheet waste percentage.</param>
        /// <param name="sheetUsage">Sheet usage percentage per sheet.</param>
        /// <param name="underrun">Product underrun percentage in layout.</param>
        /// <param name="overrun">Product overrun percentage in layout.</param>
        /// <param name="placed">Total number of pieces placed in layout.</param>
        /// <param name="productCount">Total number of unique products in layout.</param>
        /// <param name="random">Random unique layout identifier.</param>
        /// <param name="templates">All templates being used in layout.</param>
        /// <param name="toolStats">toolStats.</param>
        /// <param name="priorityStats">Product priority-based stats.</param>
        /// <param name="surfaces">Surfaces in layout.</param>
        /// <param name="front">front.</param>
        /// <param name="back">back.</param>
        public PhoenixLayoutEntity(string id = default(string), int? index = default(int?), string name = default(string), WorkstyleEnum? workstyle = default(WorkstyleEnum?), List<JobTrail> trails = default(List<JobTrail>), int? runLength = default(int?), float? pressMinutes = default(float?), int? plates = default(int?), double? plateCost = default(double?), double? stockCost = default(double?), double? pressCost = default(double?), double? dieCost = default(double?), double? totalCost = default(double?), double? waste = default(double?), double? sheetUsage = default(double?), double? underrun = default(double?), double? overrun = default(double?), int? placed = default(int?), int? productCount = default(int?), string random = default(string), List<PlacedTemplateEntity> templates = default(List<PlacedTemplateEntity>), ToolStatsEntity toolStats = default(ToolStatsEntity), List<PriorityStatsEntity> priorityStats = default(List<PriorityStatsEntity>), List<SurfaceEntity> surfaces = default(List<SurfaceEntity>), SurfaceEntity front = default(SurfaceEntity), SurfaceEntity back = default(SurfaceEntity))
        {
            this.Id = id;
            this.Index = index;
            this.Name = name;
            this.Workstyle = workstyle;
            this.Trails = trails;
            this.RunLength = runLength;
            this.PressMinutes = pressMinutes;
            this.Plates = plates;
            this.PlateCost = plateCost;
            this.StockCost = stockCost;
            this.PressCost = pressCost;
            this.DieCost = dieCost;
            this.TotalCost = totalCost;
            this.Waste = waste;
            this.SheetUsage = sheetUsage;
            this.Underrun = underrun;
            this.Overrun = overrun;
            this.Placed = placed;
            this.ProductCount = productCount;
            this.Random = random;
            this.Templates = templates;
            this.ToolStats = toolStats;
            this.PriorityStats = priorityStats;
            this.Surfaces = surfaces;
            this.Front = front;
            this.Back = back;
        }
        
        /// <summary>
        /// Layout id
        /// </summary>
        /// <value>Layout id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Layout index
        /// </summary>
        /// <value>Layout index</value>
        [DataMember(Name="index", EmitDefaultValue=false)]
        public int? Index { get; set; }

        /// <summary>
        /// Layout name
        /// </summary>
        /// <value>Layout name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }


        /// <summary>
        /// Facility job trails processing this layout
        /// </summary>
        /// <value>Facility job trails processing this layout</value>
        [DataMember(Name="trails", EmitDefaultValue=false)]
        public List<JobTrail> Trails { get; set; }

        /// <summary>
        /// Required run length of layout
        /// </summary>
        /// <value>Required run length of layout</value>
        [DataMember(Name="run-length", EmitDefaultValue=false)]
        public int? RunLength { get; set; }

        /// <summary>
        /// Estimated press time in minutes
        /// </summary>
        /// <value>Estimated press time in minutes</value>
        [DataMember(Name="press-minutes", EmitDefaultValue=false)]
        public float? PressMinutes { get; set; }

        /// <summary>
        /// Number of plates needed (print inks)
        /// </summary>
        /// <value>Number of plates needed (print inks)</value>
        [DataMember(Name="plates", EmitDefaultValue=false)]
        public int? Plates { get; set; }

        /// <summary>
        /// Estimated plate cost in layout
        /// </summary>
        /// <value>Estimated plate cost in layout</value>
        [DataMember(Name="plate-cost", EmitDefaultValue=false)]
        public double? PlateCost { get; set; }

        /// <summary>
        /// Estimated stock cost in layout
        /// </summary>
        /// <value>Estimated stock cost in layout</value>
        [DataMember(Name="stock-cost", EmitDefaultValue=false)]
        public double? StockCost { get; set; }

        /// <summary>
        /// Estimated press run cost in layout
        /// </summary>
        /// <value>Estimated press run cost in layout</value>
        [DataMember(Name="press-cost", EmitDefaultValue=false)]
        public double? PressCost { get; set; }

        /// <summary>
        /// Estimated die creation cost in layout
        /// </summary>
        /// <value>Estimated die creation cost in layout</value>
        [DataMember(Name="die-cost", EmitDefaultValue=false)]
        public double? DieCost { get; set; }

        /// <summary>
        /// Estimated total layout cost
        /// </summary>
        /// <value>Estimated total layout cost</value>
        [DataMember(Name="total-cost", EmitDefaultValue=false)]
        public double? TotalCost { get; set; }

        /// <summary>
        /// Total sheet waste percentage
        /// </summary>
        /// <value>Total sheet waste percentage</value>
        [DataMember(Name="waste", EmitDefaultValue=false)]
        public double? Waste { get; set; }

        /// <summary>
        /// Sheet usage percentage per sheet
        /// </summary>
        /// <value>Sheet usage percentage per sheet</value>
        [DataMember(Name="sheet-usage", EmitDefaultValue=false)]
        public double? SheetUsage { get; set; }

        /// <summary>
        /// Product underrun percentage in layout
        /// </summary>
        /// <value>Product underrun percentage in layout</value>
        [DataMember(Name="underrun", EmitDefaultValue=false)]
        public double? Underrun { get; set; }

        /// <summary>
        /// Product overrun percentage in layout
        /// </summary>
        /// <value>Product overrun percentage in layout</value>
        [DataMember(Name="overrun", EmitDefaultValue=false)]
        public double? Overrun { get; set; }

        /// <summary>
        /// Total number of pieces placed in layout
        /// </summary>
        /// <value>Total number of pieces placed in layout</value>
        [DataMember(Name="placed", EmitDefaultValue=false)]
        public int? Placed { get; set; }

        /// <summary>
        /// Total number of unique products in layout
        /// </summary>
        /// <value>Total number of unique products in layout</value>
        [DataMember(Name="product-count", EmitDefaultValue=false)]
        public int? ProductCount { get; set; }

        /// <summary>
        /// Random unique layout identifier
        /// </summary>
        /// <value>Random unique layout identifier</value>
        [DataMember(Name="random", EmitDefaultValue=false)]
        public string Random { get; set; }

        /// <summary>
        /// All templates being used in layout
        /// </summary>
        /// <value>All templates being used in layout</value>
        [DataMember(Name="templates", EmitDefaultValue=false)]
        public List<PlacedTemplateEntity> Templates { get; set; }

        /// <summary>
        /// Gets or Sets ToolStats
        /// </summary>
        [DataMember(Name="tool-stats", EmitDefaultValue=false)]
        public ToolStatsEntity ToolStats { get; set; }

        /// <summary>
        /// Product priority-based stats
        /// </summary>
        /// <value>Product priority-based stats</value>
        [DataMember(Name="priority-stats", EmitDefaultValue=false)]
        public List<PriorityStatsEntity> PriorityStats { get; set; }

        /// <summary>
        /// Surfaces in layout
        /// </summary>
        /// <value>Surfaces in layout</value>
        [DataMember(Name="surfaces", EmitDefaultValue=false)]
        public List<SurfaceEntity> Surfaces { get; set; }

        /// <summary>
        /// Gets or Sets Front
        /// </summary>
        [DataMember(Name="front", EmitDefaultValue=false)]
        public SurfaceEntity Front { get; set; }

        /// <summary>
        /// Gets or Sets Back
        /// </summary>
        [DataMember(Name="back", EmitDefaultValue=false)]
        public SurfaceEntity Back { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PhoenixLayoutEntity {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Workstyle: ").Append(Workstyle).Append("\n");
            sb.Append("  Trails: ").Append(Trails).Append("\n");
            sb.Append("  RunLength: ").Append(RunLength).Append("\n");
            sb.Append("  PressMinutes: ").Append(PressMinutes).Append("\n");
            sb.Append("  Plates: ").Append(Plates).Append("\n");
            sb.Append("  PlateCost: ").Append(PlateCost).Append("\n");
            sb.Append("  StockCost: ").Append(StockCost).Append("\n");
            sb.Append("  PressCost: ").Append(PressCost).Append("\n");
            sb.Append("  DieCost: ").Append(DieCost).Append("\n");
            sb.Append("  TotalCost: ").Append(TotalCost).Append("\n");
            sb.Append("  Waste: ").Append(Waste).Append("\n");
            sb.Append("  SheetUsage: ").Append(SheetUsage).Append("\n");
            sb.Append("  Underrun: ").Append(Underrun).Append("\n");
            sb.Append("  Overrun: ").Append(Overrun).Append("\n");
            sb.Append("  Placed: ").Append(Placed).Append("\n");
            sb.Append("  ProductCount: ").Append(ProductCount).Append("\n");
            sb.Append("  Random: ").Append(Random).Append("\n");
            sb.Append("  Templates: ").Append(Templates).Append("\n");
            sb.Append("  ToolStats: ").Append(ToolStats).Append("\n");
            sb.Append("  PriorityStats: ").Append(PriorityStats).Append("\n");
            sb.Append("  Surfaces: ").Append(Surfaces).Append("\n");
            sb.Append("  Front: ").Append(Front).Append("\n");
            sb.Append("  Back: ").Append(Back).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PhoenixLayoutEntity);
        }

        /// <summary>
        /// Returns true if PhoenixLayoutEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of PhoenixLayoutEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PhoenixLayoutEntity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Index == input.Index ||
                    (this.Index != null &&
                    this.Index.Equals(input.Index))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Workstyle == input.Workstyle ||
                    (this.Workstyle != null &&
                    this.Workstyle.Equals(input.Workstyle))
                ) && 
                (
                    this.Trails == input.Trails ||
                    this.Trails != null &&
                    input.Trails != null &&
                    this.Trails.SequenceEqual(input.Trails)
                ) && 
                (
                    this.RunLength == input.RunLength ||
                    (this.RunLength != null &&
                    this.RunLength.Equals(input.RunLength))
                ) && 
                (
                    this.PressMinutes == input.PressMinutes ||
                    (this.PressMinutes != null &&
                    this.PressMinutes.Equals(input.PressMinutes))
                ) && 
                (
                    this.Plates == input.Plates ||
                    (this.Plates != null &&
                    this.Plates.Equals(input.Plates))
                ) && 
                (
                    this.PlateCost == input.PlateCost ||
                    (this.PlateCost != null &&
                    this.PlateCost.Equals(input.PlateCost))
                ) && 
                (
                    this.StockCost == input.StockCost ||
                    (this.StockCost != null &&
                    this.StockCost.Equals(input.StockCost))
                ) && 
                (
                    this.PressCost == input.PressCost ||
                    (this.PressCost != null &&
                    this.PressCost.Equals(input.PressCost))
                ) && 
                (
                    this.DieCost == input.DieCost ||
                    (this.DieCost != null &&
                    this.DieCost.Equals(input.DieCost))
                ) && 
                (
                    this.TotalCost == input.TotalCost ||
                    (this.TotalCost != null &&
                    this.TotalCost.Equals(input.TotalCost))
                ) && 
                (
                    this.Waste == input.Waste ||
                    (this.Waste != null &&
                    this.Waste.Equals(input.Waste))
                ) && 
                (
                    this.SheetUsage == input.SheetUsage ||
                    (this.SheetUsage != null &&
                    this.SheetUsage.Equals(input.SheetUsage))
                ) && 
                (
                    this.Underrun == input.Underrun ||
                    (this.Underrun != null &&
                    this.Underrun.Equals(input.Underrun))
                ) && 
                (
                    this.Overrun == input.Overrun ||
                    (this.Overrun != null &&
                    this.Overrun.Equals(input.Overrun))
                ) && 
                (
                    this.Placed == input.Placed ||
                    (this.Placed != null &&
                    this.Placed.Equals(input.Placed))
                ) && 
                (
                    this.ProductCount == input.ProductCount ||
                    (this.ProductCount != null &&
                    this.ProductCount.Equals(input.ProductCount))
                ) && 
                (
                    this.Random == input.Random ||
                    (this.Random != null &&
                    this.Random.Equals(input.Random))
                ) && 
                (
                    this.Templates == input.Templates ||
                    this.Templates != null &&
                    input.Templates != null &&
                    this.Templates.SequenceEqual(input.Templates)
                ) && 
                (
                    this.ToolStats == input.ToolStats ||
                    (this.ToolStats != null &&
                    this.ToolStats.Equals(input.ToolStats))
                ) && 
                (
                    this.PriorityStats == input.PriorityStats ||
                    this.PriorityStats != null &&
                    input.PriorityStats != null &&
                    this.PriorityStats.SequenceEqual(input.PriorityStats)
                ) && 
                (
                    this.Surfaces == input.Surfaces ||
                    this.Surfaces != null &&
                    input.Surfaces != null &&
                    this.Surfaces.SequenceEqual(input.Surfaces)
                ) && 
                (
                    this.Front == input.Front ||
                    (this.Front != null &&
                    this.Front.Equals(input.Front))
                ) && 
                (
                    this.Back == input.Back ||
                    (this.Back != null &&
                    this.Back.Equals(input.Back))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Index != null)
                    hashCode = hashCode * 59 + this.Index.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Workstyle != null)
                    hashCode = hashCode * 59 + this.Workstyle.GetHashCode();
                if (this.Trails != null)
                    hashCode = hashCode * 59 + this.Trails.GetHashCode();
                if (this.RunLength != null)
                    hashCode = hashCode * 59 + this.RunLength.GetHashCode();
                if (this.PressMinutes != null)
                    hashCode = hashCode * 59 + this.PressMinutes.GetHashCode();
                if (this.Plates != null)
                    hashCode = hashCode * 59 + this.Plates.GetHashCode();
                if (this.PlateCost != null)
                    hashCode = hashCode * 59 + this.PlateCost.GetHashCode();
                if (this.StockCost != null)
                    hashCode = hashCode * 59 + this.StockCost.GetHashCode();
                if (this.PressCost != null)
                    hashCode = hashCode * 59 + this.PressCost.GetHashCode();
                if (this.DieCost != null)
                    hashCode = hashCode * 59 + this.DieCost.GetHashCode();
                if (this.TotalCost != null)
                    hashCode = hashCode * 59 + this.TotalCost.GetHashCode();
                if (this.Waste != null)
                    hashCode = hashCode * 59 + this.Waste.GetHashCode();
                if (this.SheetUsage != null)
                    hashCode = hashCode * 59 + this.SheetUsage.GetHashCode();
                if (this.Underrun != null)
                    hashCode = hashCode * 59 + this.Underrun.GetHashCode();
                if (this.Overrun != null)
                    hashCode = hashCode * 59 + this.Overrun.GetHashCode();
                if (this.Placed != null)
                    hashCode = hashCode * 59 + this.Placed.GetHashCode();
                if (this.ProductCount != null)
                    hashCode = hashCode * 59 + this.ProductCount.GetHashCode();
                if (this.Random != null)
                    hashCode = hashCode * 59 + this.Random.GetHashCode();
                if (this.Templates != null)
                    hashCode = hashCode * 59 + this.Templates.GetHashCode();
                if (this.ToolStats != null)
                    hashCode = hashCode * 59 + this.ToolStats.GetHashCode();
                if (this.PriorityStats != null)
                    hashCode = hashCode * 59 + this.PriorityStats.GetHashCode();
                if (this.Surfaces != null)
                    hashCode = hashCode * 59 + this.Surfaces.GetHashCode();
                if (this.Front != null)
                    hashCode = hashCode * 59 + this.Front.GetHashCode();
                if (this.Back != null)
                    hashCode = hashCode * 59 + this.Back.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
