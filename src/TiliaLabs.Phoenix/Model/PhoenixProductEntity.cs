/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// (Deprecated) Product in a job
    /// </summary>
    [DataContract]
        public partial class PhoenixProductEntity :  IEquatable<PhoenixProductEntity>, IValidatableObject
    {
        /// <summary>
        /// (Deprecated) Grain direction of stock
        /// </summary>
        /// <value>(Deprecated) Grain direction of stock</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum GrainEnum
        {
            /// <summary>
            /// Enum Horizontal for value: Horizontal
            /// </summary>
            [EnumMember(Value = "Horizontal")]
            Horizontal = 1,
            /// <summary>
            /// Enum Vertical for value: Vertical
            /// </summary>
            [EnumMember(Value = "Vertical")]
            Vertical = 2,
            /// <summary>
            /// Enum Consistent for value: Consistent
            /// </summary>
            [EnumMember(Value = "Consistent")]
            Consistent = 3,
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 4        }
        /// <summary>
        /// (Deprecated) Grain direction of stock
        /// </summary>
        /// <value>(Deprecated) Grain direction of stock</value>
        [DataMember(Name="grain", EmitDefaultValue=false)]
        public GrainEnum? Grain { get; set; }
        /// <summary>
        /// (Deprecated) Spacing type of product
        /// </summary>
        /// <value>(Deprecated) Spacing type of product</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum SpacingTypeEnum
        {
            /// <summary>
            /// Enum Margins for value: Margins
            /// </summary>
            [EnumMember(Value = "Margins")]
            Margins = 1,
            /// <summary>
            /// Enum Uniform for value: Uniform
            /// </summary>
            [EnumMember(Value = "Uniform")]
            Uniform = 2,
            /// <summary>
            /// Enum Bleed for value: Bleed
            /// </summary>
            [EnumMember(Value = "Bleed")]
            Bleed = 3,
            /// <summary>
            /// Enum Tool for value: Tool
            /// </summary>
            [EnumMember(Value = "Tool")]
            Tool = 4        }
        /// <summary>
        /// (Deprecated) Spacing type of product
        /// </summary>
        /// <value>(Deprecated) Spacing type of product</value>
        [DataMember(Name="spacing-type", EmitDefaultValue=false)]
        public SpacingTypeEnum? SpacingType { get; set; }
        /// <summary>
        /// Rotation type of product
        /// </summary>
        /// <value>Rotation type of product</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum RotationEnum
        {
            /// <summary>
            /// Enum Any for value: Any
            /// </summary>
            [EnumMember(Value = "Any")]
            Any = 1,
            /// <summary>
            /// Enum Orthogonal for value: Orthogonal
            /// </summary>
            [EnumMember(Value = "Orthogonal")]
            Orthogonal = 2,
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 3,
            /// <summary>
            /// Enum Custom for value: Custom
            /// </summary>
            [EnumMember(Value = "Custom")]
            Custom = 4        }
        /// <summary>
        /// Rotation type of product
        /// </summary>
        /// <value>Rotation type of product</value>
        [DataMember(Name="rotation", EmitDefaultValue=false)]
        public RotationEnum? Rotation { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PhoenixProductEntity" /> class.
        /// </summary>
        /// <param name="index">Unique item index.</param>
        /// <param name="name">Unique name of the product (required).</param>
        /// <param name="color">Product color as ARGB hex string.</param>
        /// <param name="ordered">Ordered amount.</param>
        /// <param name="description">Product description.</param>
        /// <param name="notes">Product notes.</param>
        /// <param name="dieName">(Deprecated) Product die name.</param>
        /// <param name="dieSource">(Deprecated) Product die source.</param>
        /// <param name="diePath">(Deprecated) Product die source full path.</param>
        /// <param name="stock">(Deprecated) Product stock.</param>
        /// <param name="grade">(Deprecated) Product grade.</param>
        /// <param name="grain">(Deprecated) Grain direction of stock.</param>
        /// <param name="width">(Deprecated) Width of product die.</param>
        /// <param name="height">(Deprecated) Height of product die.</param>
        /// <param name="spacingType">(Deprecated) Spacing type of product.</param>
        /// <param name="group">Product group.</param>
        /// <param name="priority">Product priority.</param>
        /// <param name="rotation">Rotation type of product.</param>
        /// <param name="templates">List of templates this product can be used with.</param>
        /// <param name="placed">Total number of products placed across layouts in the job.</param>
        /// <param name="total">Total number of products to be printed.</param>
        /// <param name="overrun">Total number of overruns above ordered quantity.</param>
        /// <param name="properties">Product custom properties.</param>
        /// <param name="layouts">Number of products placed in each layout.</param>
        /// <param name="thumbnail">thumbnail.</param>
        public PhoenixProductEntity(int? index = default(int?), string name = default(string), string color = default(string), int? ordered = default(int?), string description = default(string), string notes = default(string), string dieName = default(string), string dieSource = default(string), string diePath = default(string), string stock = default(string), string grade = default(string), GrainEnum? grain = default(GrainEnum?), string width = default(string), string height = default(string), SpacingTypeEnum? spacingType = default(SpacingTypeEnum?), string group = default(string), int? priority = default(int?), RotationEnum? rotation = default(RotationEnum?), List<string> templates = default(List<string>), int? placed = default(int?), int? total = default(int?), int? overrun = default(int?), List<PropertyEntity> properties = default(List<PropertyEntity>), List<LayoutPlacedEntity> layouts = default(List<LayoutPlacedEntity>), ThumbnailEntity thumbnail = default(ThumbnailEntity))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for PhoenixProductEntity and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            this.Index = index;
            this.Color = color;
            this.Ordered = ordered;
            this.Description = description;
            this.Notes = notes;
            this.DieName = dieName;
            this.DieSource = dieSource;
            this.DiePath = diePath;
            this.Stock = stock;
            this.Grade = grade;
            this.Grain = grain;
            this.Width = width;
            this.Height = height;
            this.SpacingType = spacingType;
            this.Group = group;
            this.Priority = priority;
            this.Rotation = rotation;
            this.Templates = templates;
            this.Placed = placed;
            this.Total = total;
            this.Overrun = overrun;
            this.Properties = properties;
            this.Layouts = layouts;
            this.Thumbnail = thumbnail;
        }
        
        /// <summary>
        /// Unique item index
        /// </summary>
        /// <value>Unique item index</value>
        [DataMember(Name="index", EmitDefaultValue=false)]
        public int? Index { get; set; }

        /// <summary>
        /// Unique name of the product
        /// </summary>
        /// <value>Unique name of the product</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Product color as ARGB hex string
        /// </summary>
        /// <value>Product color as ARGB hex string</value>
        [DataMember(Name="color", EmitDefaultValue=false)]
        public string Color { get; set; }

        /// <summary>
        /// Ordered amount
        /// </summary>
        /// <value>Ordered amount</value>
        [DataMember(Name="ordered", EmitDefaultValue=false)]
        public int? Ordered { get; set; }

        /// <summary>
        /// Product description
        /// </summary>
        /// <value>Product description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Product notes
        /// </summary>
        /// <value>Product notes</value>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// (Deprecated) Product die name
        /// </summary>
        /// <value>(Deprecated) Product die name</value>
        [DataMember(Name="die-name", EmitDefaultValue=false)]
        public string DieName { get; set; }

        /// <summary>
        /// (Deprecated) Product die source
        /// </summary>
        /// <value>(Deprecated) Product die source</value>
        [DataMember(Name="die-source", EmitDefaultValue=false)]
        public string DieSource { get; set; }

        /// <summary>
        /// (Deprecated) Product die source full path
        /// </summary>
        /// <value>(Deprecated) Product die source full path</value>
        [DataMember(Name="die-path", EmitDefaultValue=false)]
        public string DiePath { get; set; }

        /// <summary>
        /// (Deprecated) Product stock
        /// </summary>
        /// <value>(Deprecated) Product stock</value>
        [DataMember(Name="stock", EmitDefaultValue=false)]
        public string Stock { get; set; }

        /// <summary>
        /// (Deprecated) Product grade
        /// </summary>
        /// <value>(Deprecated) Product grade</value>
        [DataMember(Name="grade", EmitDefaultValue=false)]
        public string Grade { get; set; }


        /// <summary>
        /// (Deprecated) Width of product die
        /// </summary>
        /// <value>(Deprecated) Width of product die</value>
        [DataMember(Name="width", EmitDefaultValue=false)]
        public string Width { get; set; }

        /// <summary>
        /// (Deprecated) Height of product die
        /// </summary>
        /// <value>(Deprecated) Height of product die</value>
        [DataMember(Name="height", EmitDefaultValue=false)]
        public string Height { get; set; }


        /// <summary>
        /// Product group
        /// </summary>
        /// <value>Product group</value>
        [DataMember(Name="group", EmitDefaultValue=false)]
        public string Group { get; set; }

        /// <summary>
        /// Product priority
        /// </summary>
        /// <value>Product priority</value>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public int? Priority { get; set; }


        /// <summary>
        /// List of templates this product can be used with
        /// </summary>
        /// <value>List of templates this product can be used with</value>
        [DataMember(Name="templates", EmitDefaultValue=false)]
        public List<string> Templates { get; set; }

        /// <summary>
        /// Total number of products placed across layouts in the job
        /// </summary>
        /// <value>Total number of products placed across layouts in the job</value>
        [DataMember(Name="placed", EmitDefaultValue=false)]
        public int? Placed { get; set; }

        /// <summary>
        /// Total number of products to be printed
        /// </summary>
        /// <value>Total number of products to be printed</value>
        [DataMember(Name="total", EmitDefaultValue=false)]
        public int? Total { get; set; }

        /// <summary>
        /// Total number of overruns above ordered quantity
        /// </summary>
        /// <value>Total number of overruns above ordered quantity</value>
        [DataMember(Name="overrun", EmitDefaultValue=false)]
        public int? Overrun { get; set; }

        /// <summary>
        /// Product custom properties
        /// </summary>
        /// <value>Product custom properties</value>
        [DataMember(Name="properties", EmitDefaultValue=false)]
        public List<PropertyEntity> Properties { get; set; }

        /// <summary>
        /// Number of products placed in each layout
        /// </summary>
        /// <value>Number of products placed in each layout</value>
        [DataMember(Name="layouts", EmitDefaultValue=false)]
        public List<LayoutPlacedEntity> Layouts { get; set; }

        /// <summary>
        /// Gets or Sets Thumbnail
        /// </summary>
        [DataMember(Name="thumbnail", EmitDefaultValue=false)]
        public ThumbnailEntity Thumbnail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PhoenixProductEntity {\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  Ordered: ").Append(Ordered).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  DieName: ").Append(DieName).Append("\n");
            sb.Append("  DieSource: ").Append(DieSource).Append("\n");
            sb.Append("  DiePath: ").Append(DiePath).Append("\n");
            sb.Append("  Stock: ").Append(Stock).Append("\n");
            sb.Append("  Grade: ").Append(Grade).Append("\n");
            sb.Append("  Grain: ").Append(Grain).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  SpacingType: ").Append(SpacingType).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Rotation: ").Append(Rotation).Append("\n");
            sb.Append("  Templates: ").Append(Templates).Append("\n");
            sb.Append("  Placed: ").Append(Placed).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Overrun: ").Append(Overrun).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  Layouts: ").Append(Layouts).Append("\n");
            sb.Append("  Thumbnail: ").Append(Thumbnail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PhoenixProductEntity);
        }

        /// <summary>
        /// Returns true if PhoenixProductEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of PhoenixProductEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PhoenixProductEntity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Index == input.Index ||
                    (this.Index != null &&
                    this.Index.Equals(input.Index))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Color == input.Color ||
                    (this.Color != null &&
                    this.Color.Equals(input.Color))
                ) && 
                (
                    this.Ordered == input.Ordered ||
                    (this.Ordered != null &&
                    this.Ordered.Equals(input.Ordered))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.DieName == input.DieName ||
                    (this.DieName != null &&
                    this.DieName.Equals(input.DieName))
                ) && 
                (
                    this.DieSource == input.DieSource ||
                    (this.DieSource != null &&
                    this.DieSource.Equals(input.DieSource))
                ) && 
                (
                    this.DiePath == input.DiePath ||
                    (this.DiePath != null &&
                    this.DiePath.Equals(input.DiePath))
                ) && 
                (
                    this.Stock == input.Stock ||
                    (this.Stock != null &&
                    this.Stock.Equals(input.Stock))
                ) && 
                (
                    this.Grade == input.Grade ||
                    (this.Grade != null &&
                    this.Grade.Equals(input.Grade))
                ) && 
                (
                    this.Grain == input.Grain ||
                    (this.Grain != null &&
                    this.Grain.Equals(input.Grain))
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                ) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && 
                (
                    this.SpacingType == input.SpacingType ||
                    (this.SpacingType != null &&
                    this.SpacingType.Equals(input.SpacingType))
                ) && 
                (
                    this.Group == input.Group ||
                    (this.Group != null &&
                    this.Group.Equals(input.Group))
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && 
                (
                    this.Rotation == input.Rotation ||
                    (this.Rotation != null &&
                    this.Rotation.Equals(input.Rotation))
                ) && 
                (
                    this.Templates == input.Templates ||
                    this.Templates != null &&
                    input.Templates != null &&
                    this.Templates.SequenceEqual(input.Templates)
                ) && 
                (
                    this.Placed == input.Placed ||
                    (this.Placed != null &&
                    this.Placed.Equals(input.Placed))
                ) && 
                (
                    this.Total == input.Total ||
                    (this.Total != null &&
                    this.Total.Equals(input.Total))
                ) && 
                (
                    this.Overrun == input.Overrun ||
                    (this.Overrun != null &&
                    this.Overrun.Equals(input.Overrun))
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.Layouts == input.Layouts ||
                    this.Layouts != null &&
                    input.Layouts != null &&
                    this.Layouts.SequenceEqual(input.Layouts)
                ) && 
                (
                    this.Thumbnail == input.Thumbnail ||
                    (this.Thumbnail != null &&
                    this.Thumbnail.Equals(input.Thumbnail))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Index != null)
                    hashCode = hashCode * 59 + this.Index.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Color != null)
                    hashCode = hashCode * 59 + this.Color.GetHashCode();
                if (this.Ordered != null)
                    hashCode = hashCode * 59 + this.Ordered.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                if (this.DieName != null)
                    hashCode = hashCode * 59 + this.DieName.GetHashCode();
                if (this.DieSource != null)
                    hashCode = hashCode * 59 + this.DieSource.GetHashCode();
                if (this.DiePath != null)
                    hashCode = hashCode * 59 + this.DiePath.GetHashCode();
                if (this.Stock != null)
                    hashCode = hashCode * 59 + this.Stock.GetHashCode();
                if (this.Grade != null)
                    hashCode = hashCode * 59 + this.Grade.GetHashCode();
                if (this.Grain != null)
                    hashCode = hashCode * 59 + this.Grain.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.SpacingType != null)
                    hashCode = hashCode * 59 + this.SpacingType.GetHashCode();
                if (this.Group != null)
                    hashCode = hashCode * 59 + this.Group.GetHashCode();
                if (this.Priority != null)
                    hashCode = hashCode * 59 + this.Priority.GetHashCode();
                if (this.Rotation != null)
                    hashCode = hashCode * 59 + this.Rotation.GetHashCode();
                if (this.Templates != null)
                    hashCode = hashCode * 59 + this.Templates.GetHashCode();
                if (this.Placed != null)
                    hashCode = hashCode * 59 + this.Placed.GetHashCode();
                if (this.Total != null)
                    hashCode = hashCode * 59 + this.Total.GetHashCode();
                if (this.Overrun != null)
                    hashCode = hashCode * 59 + this.Overrun.GetHashCode();
                if (this.Properties != null)
                    hashCode = hashCode * 59 + this.Properties.GetHashCode();
                if (this.Layouts != null)
                    hashCode = hashCode * 59 + this.Layouts.GetHashCode();
                if (this.Thumbnail != null)
                    hashCode = hashCode * 59 + this.Thumbnail.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
