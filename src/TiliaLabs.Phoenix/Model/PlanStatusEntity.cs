/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Live stats on current or most recent plan run performed on the current job
    /// </summary>
    [DataContract]
        public partial class PlanStatusEntity :  IEquatable<PlanStatusEntity>, IValidatableObject
    {
        /// <summary>
        /// Current state of the given tool in the job
        /// </summary>
        /// <value>Current state of the given tool in the job</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StateEnum
        {
            /// <summary>
            /// Enum NotStarted for value: NotStarted
            /// </summary>
            [EnumMember(Value = "NotStarted")]
            NotStarted = 1,
            /// <summary>
            /// Enum Running for value: Running
            /// </summary>
            [EnumMember(Value = "Running")]
            Running = 2,
            /// <summary>
            /// Enum Stopping for value: Stopping
            /// </summary>
            [EnumMember(Value = "Stopping")]
            Stopping = 3,
            /// <summary>
            /// Enum Stopped for value: Stopped
            /// </summary>
            [EnumMember(Value = "Stopped")]
            Stopped = 4,
            /// <summary>
            /// Enum Finished for value: Finished
            /// </summary>
            [EnumMember(Value = "Finished")]
            Finished = 5,
            /// <summary>
            /// Enum Error for value: Error
            /// </summary>
            [EnumMember(Value = "Error")]
            Error = 6        }
        /// <summary>
        /// Current state of the given tool in the job
        /// </summary>
        /// <value>Current state of the given tool in the job</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PlanStatusEntity" /> class.
        /// </summary>
        /// <param name="state">Current state of the given tool in the job.</param>
        /// <param name="runningTime">Number of seconds the given tool has been running or was last run.</param>
        /// <param name="errors">Any errors that have occurred during the current or last run of the given tool.</param>
        /// <param name="warnings">Any warnings that have occurred during the current or last run of the given tool.</param>
        /// <param name="results">Number of results generated (required).</param>
        /// <param name="lowestCost">Lowest total cost across all plan results so far.</param>
        /// <param name="lowestWaste">Lowest overall waste across all plan results so far.</param>
        /// <param name="lowestLayouts">Lowest number of layouts across all plan results so far.</param>
        public PlanStatusEntity(StateEnum? state = default(StateEnum?), float? runningTime = default(float?), List<MessageEntity> errors = default(List<MessageEntity>), List<MessageEntity> warnings = default(List<MessageEntity>), int? results = default(int?), float? lowestCost = default(float?), float? lowestWaste = default(float?), int? lowestLayouts = default(int?))
        {
            // to ensure "results" is required (not null)
            if (results == null)
            {
                throw new InvalidDataException("results is a required property for PlanStatusEntity and cannot be null");
            }
            else
            {
                this.Results = results;
            }
            this.State = state;
            this.RunningTime = runningTime;
            this.Errors = errors;
            this.Warnings = warnings;
            this.LowestCost = lowestCost;
            this.LowestWaste = lowestWaste;
            this.LowestLayouts = lowestLayouts;
        }
        

        /// <summary>
        /// Number of seconds the given tool has been running or was last run
        /// </summary>
        /// <value>Number of seconds the given tool has been running or was last run</value>
        [DataMember(Name="running-time", EmitDefaultValue=false)]
        public float? RunningTime { get; set; }

        /// <summary>
        /// Any errors that have occurred during the current or last run of the given tool
        /// </summary>
        /// <value>Any errors that have occurred during the current or last run of the given tool</value>
        [DataMember(Name="errors", EmitDefaultValue=false)]
        public List<MessageEntity> Errors { get; set; }

        /// <summary>
        /// Any warnings that have occurred during the current or last run of the given tool
        /// </summary>
        /// <value>Any warnings that have occurred during the current or last run of the given tool</value>
        [DataMember(Name="warnings", EmitDefaultValue=false)]
        public List<MessageEntity> Warnings { get; set; }

        /// <summary>
        /// Number of results generated
        /// </summary>
        /// <value>Number of results generated</value>
        [DataMember(Name="results", EmitDefaultValue=false)]
        public int? Results { get; set; }

        /// <summary>
        /// Lowest total cost across all plan results so far
        /// </summary>
        /// <value>Lowest total cost across all plan results so far</value>
        [DataMember(Name="lowest-cost", EmitDefaultValue=false)]
        public float? LowestCost { get; set; }

        /// <summary>
        /// Lowest overall waste across all plan results so far
        /// </summary>
        /// <value>Lowest overall waste across all plan results so far</value>
        [DataMember(Name="lowest-waste", EmitDefaultValue=false)]
        public float? LowestWaste { get; set; }

        /// <summary>
        /// Lowest number of layouts across all plan results so far
        /// </summary>
        /// <value>Lowest number of layouts across all plan results so far</value>
        [DataMember(Name="lowest-layouts", EmitDefaultValue=false)]
        public int? LowestLayouts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlanStatusEntity {\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  RunningTime: ").Append(RunningTime).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("  LowestCost: ").Append(LowestCost).Append("\n");
            sb.Append("  LowestWaste: ").Append(LowestWaste).Append("\n");
            sb.Append("  LowestLayouts: ").Append(LowestLayouts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PlanStatusEntity);
        }

        /// <summary>
        /// Returns true if PlanStatusEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of PlanStatusEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlanStatusEntity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.RunningTime == input.RunningTime ||
                    (this.RunningTime != null &&
                    this.RunningTime.Equals(input.RunningTime))
                ) && 
                (
                    this.Errors == input.Errors ||
                    this.Errors != null &&
                    input.Errors != null &&
                    this.Errors.SequenceEqual(input.Errors)
                ) && 
                (
                    this.Warnings == input.Warnings ||
                    this.Warnings != null &&
                    input.Warnings != null &&
                    this.Warnings.SequenceEqual(input.Warnings)
                ) && 
                (
                    this.Results == input.Results ||
                    (this.Results != null &&
                    this.Results.Equals(input.Results))
                ) && 
                (
                    this.LowestCost == input.LowestCost ||
                    (this.LowestCost != null &&
                    this.LowestCost.Equals(input.LowestCost))
                ) && 
                (
                    this.LowestWaste == input.LowestWaste ||
                    (this.LowestWaste != null &&
                    this.LowestWaste.Equals(input.LowestWaste))
                ) && 
                (
                    this.LowestLayouts == input.LowestLayouts ||
                    (this.LowestLayouts != null &&
                    this.LowestLayouts.Equals(input.LowestLayouts))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.RunningTime != null)
                    hashCode = hashCode * 59 + this.RunningTime.GetHashCode();
                if (this.Errors != null)
                    hashCode = hashCode * 59 + this.Errors.GetHashCode();
                if (this.Warnings != null)
                    hashCode = hashCode * 59 + this.Warnings.GetHashCode();
                if (this.Results != null)
                    hashCode = hashCode * 59 + this.Results.GetHashCode();
                if (this.LowestCost != null)
                    hashCode = hashCode * 59 + this.LowestCost.GetHashCode();
                if (this.LowestWaste != null)
                    hashCode = hashCode * 59 + this.LowestWaste.GetHashCode();
                if (this.LowestLayouts != null)
                    hashCode = hashCode * 59 + this.LowestLayouts.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
