/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Imposition AI layout result
    /// </summary>
    [DataContract]
        public partial class LayoutResultEntity :  IEquatable<LayoutResultEntity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LayoutResultEntity" /> class.
        /// </summary>
        /// <param name="id">ID of result.</param>
        /// <param name="timestamp">Time this result was generated as measured in seconds since the start of this run.</param>
        /// <param name="pendingEstimations">Whether this result has one or more pending estimations that have not been performed and could lead to more accurate cost and time estimates.</param>
        /// <param name="layoutType">Type of layout generated.</param>
        /// <param name="sheet">Sheet size used in layout result.</param>
        /// <param name="things">Things used to process this layout.</param>
        /// <param name="runLength">Required run length of layout.</param>
        /// <param name="pressMinutes">Estimated press time in minutes.</param>
        /// <param name="cuttingTime">Estimated cutting time in seconds.</param>
        /// <param name="totalCost">Total estimated cost for the layout including all material and device costs.</param>
        /// <param name="plateCost">Estimated plate cost.</param>
        /// <param name="stockCost">Estimated stock cost.</param>
        /// <param name="pressCost">Estimated press run cost.</param>
        /// <param name="cuttingCost">Estimated cutting cost.</param>
        /// <param name="waste">Total sheet waste percentage.</param>
        /// <param name="sheetUsage">Sheet usage percentage per sheet.</param>
        /// <param name="maxOverrun">Maximum overrun percentage across products in the layout.</param>
        /// <param name="totalOverruns">Total number of overrun items.</param>
        /// <param name="placed">(Deprecated, use items.count) Total number of component items placed in layout.</param>
        /// <param name="items">items.</param>
        /// <param name="cutComplexity">Estimated cutting complexity of layout.</param>
        /// <param name="templates">All templates being used in layout.</param>
        /// <param name="thumbnail">thumbnail.</param>
        /// <param name="press">(Deprecated) Press used in layout result.</param>
        public LayoutResultEntity(int? id = default(int?), float? timestamp = default(float?), bool? pendingEstimations = default(bool?), string layoutType = default(string), string sheet = default(string), List<string> things = default(List<string>), int? runLength = default(int?), float? pressMinutes = default(float?), float? cuttingTime = default(float?), float? totalCost = default(float?), float? plateCost = default(float?), float? stockCost = default(float?), float? pressCost = default(float?), float? cuttingCost = default(float?), float? waste = default(float?), float? sheetUsage = default(float?), float? maxOverrun = default(float?), int? totalOverruns = default(int?), int? placed = default(int?), ItemStatsEntity items = default(ItemStatsEntity), int? cutComplexity = default(int?), List<PlacedTemplateEntity> templates = default(List<PlacedTemplateEntity>), ThumbnailEntity thumbnail = default(ThumbnailEntity), string press = default(string))
        {
            this.Id = id;
            this.Timestamp = timestamp;
            this.PendingEstimations = pendingEstimations;
            this.LayoutType = layoutType;
            this.Sheet = sheet;
            this.Things = things;
            this.RunLength = runLength;
            this.PressMinutes = pressMinutes;
            this.CuttingTime = cuttingTime;
            this.TotalCost = totalCost;
            this.PlateCost = plateCost;
            this.StockCost = stockCost;
            this.PressCost = pressCost;
            this.CuttingCost = cuttingCost;
            this.Waste = waste;
            this.SheetUsage = sheetUsage;
            this.MaxOverrun = maxOverrun;
            this.TotalOverruns = totalOverruns;
            this.Placed = placed;
            this.Items = items;
            this.CutComplexity = cutComplexity;
            this.Templates = templates;
            this.Thumbnail = thumbnail;
            this.Press = press;
        }
        
        /// <summary>
        /// ID of result
        /// </summary>
        /// <value>ID of result</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Time this result was generated as measured in seconds since the start of this run
        /// </summary>
        /// <value>Time this result was generated as measured in seconds since the start of this run</value>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public float? Timestamp { get; set; }

        /// <summary>
        /// Whether this result has one or more pending estimations that have not been performed and could lead to more accurate cost and time estimates
        /// </summary>
        /// <value>Whether this result has one or more pending estimations that have not been performed and could lead to more accurate cost and time estimates</value>
        [DataMember(Name="pending-estimations", EmitDefaultValue=false)]
        public bool? PendingEstimations { get; set; }

        /// <summary>
        /// Type of layout generated
        /// </summary>
        /// <value>Type of layout generated</value>
        [DataMember(Name="layout-type", EmitDefaultValue=false)]
        public string LayoutType { get; set; }

        /// <summary>
        /// Sheet size used in layout result
        /// </summary>
        /// <value>Sheet size used in layout result</value>
        [DataMember(Name="sheet", EmitDefaultValue=false)]
        public string Sheet { get; set; }

        /// <summary>
        /// Things used to process this layout
        /// </summary>
        /// <value>Things used to process this layout</value>
        [DataMember(Name="things", EmitDefaultValue=false)]
        public List<string> Things { get; set; }

        /// <summary>
        /// Required run length of layout
        /// </summary>
        /// <value>Required run length of layout</value>
        [DataMember(Name="run-length", EmitDefaultValue=false)]
        public int? RunLength { get; set; }

        /// <summary>
        /// Estimated press time in minutes
        /// </summary>
        /// <value>Estimated press time in minutes</value>
        [DataMember(Name="press-minutes", EmitDefaultValue=false)]
        public float? PressMinutes { get; set; }

        /// <summary>
        /// Estimated cutting time in seconds
        /// </summary>
        /// <value>Estimated cutting time in seconds</value>
        [DataMember(Name="cutting-time", EmitDefaultValue=false)]
        public float? CuttingTime { get; set; }

        /// <summary>
        /// Total estimated cost for the layout including all material and device costs
        /// </summary>
        /// <value>Total estimated cost for the layout including all material and device costs</value>
        [DataMember(Name="total-cost", EmitDefaultValue=false)]
        public float? TotalCost { get; set; }

        /// <summary>
        /// Estimated plate cost
        /// </summary>
        /// <value>Estimated plate cost</value>
        [DataMember(Name="plate-cost", EmitDefaultValue=false)]
        public float? PlateCost { get; set; }

        /// <summary>
        /// Estimated stock cost
        /// </summary>
        /// <value>Estimated stock cost</value>
        [DataMember(Name="stock-cost", EmitDefaultValue=false)]
        public float? StockCost { get; set; }

        /// <summary>
        /// Estimated press run cost
        /// </summary>
        /// <value>Estimated press run cost</value>
        [DataMember(Name="press-cost", EmitDefaultValue=false)]
        public float? PressCost { get; set; }

        /// <summary>
        /// Estimated cutting cost
        /// </summary>
        /// <value>Estimated cutting cost</value>
        [DataMember(Name="cutting-cost", EmitDefaultValue=false)]
        public float? CuttingCost { get; set; }

        /// <summary>
        /// Total sheet waste percentage
        /// </summary>
        /// <value>Total sheet waste percentage</value>
        [DataMember(Name="waste", EmitDefaultValue=false)]
        public float? Waste { get; set; }

        /// <summary>
        /// Sheet usage percentage per sheet
        /// </summary>
        /// <value>Sheet usage percentage per sheet</value>
        [DataMember(Name="sheet-usage", EmitDefaultValue=false)]
        public float? SheetUsage { get; set; }

        /// <summary>
        /// Maximum overrun percentage across products in the layout
        /// </summary>
        /// <value>Maximum overrun percentage across products in the layout</value>
        [DataMember(Name="max-overrun", EmitDefaultValue=false)]
        public float? MaxOverrun { get; set; }

        /// <summary>
        /// Total number of overrun items
        /// </summary>
        /// <value>Total number of overrun items</value>
        [DataMember(Name="total-overruns", EmitDefaultValue=false)]
        public int? TotalOverruns { get; set; }

        /// <summary>
        /// (Deprecated, use items.count) Total number of component items placed in layout
        /// </summary>
        /// <value>(Deprecated, use items.count) Total number of component items placed in layout</value>
        [DataMember(Name="placed", EmitDefaultValue=false)]
        public int? Placed { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name="items", EmitDefaultValue=false)]
        public ItemStatsEntity Items { get; set; }

        /// <summary>
        /// Estimated cutting complexity of layout
        /// </summary>
        /// <value>Estimated cutting complexity of layout</value>
        [DataMember(Name="cut-complexity", EmitDefaultValue=false)]
        public int? CutComplexity { get; set; }

        /// <summary>
        /// All templates being used in layout
        /// </summary>
        /// <value>All templates being used in layout</value>
        [DataMember(Name="templates", EmitDefaultValue=false)]
        public List<PlacedTemplateEntity> Templates { get; set; }

        /// <summary>
        /// Gets or Sets Thumbnail
        /// </summary>
        [DataMember(Name="thumbnail", EmitDefaultValue=false)]
        public ThumbnailEntity Thumbnail { get; set; }

        /// <summary>
        /// (Deprecated) Press used in layout result
        /// </summary>
        /// <value>(Deprecated) Press used in layout result</value>
        [DataMember(Name="press", EmitDefaultValue=false)]
        public string Press { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LayoutResultEntity {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  PendingEstimations: ").Append(PendingEstimations).Append("\n");
            sb.Append("  LayoutType: ").Append(LayoutType).Append("\n");
            sb.Append("  Sheet: ").Append(Sheet).Append("\n");
            sb.Append("  Things: ").Append(Things).Append("\n");
            sb.Append("  RunLength: ").Append(RunLength).Append("\n");
            sb.Append("  PressMinutes: ").Append(PressMinutes).Append("\n");
            sb.Append("  CuttingTime: ").Append(CuttingTime).Append("\n");
            sb.Append("  TotalCost: ").Append(TotalCost).Append("\n");
            sb.Append("  PlateCost: ").Append(PlateCost).Append("\n");
            sb.Append("  StockCost: ").Append(StockCost).Append("\n");
            sb.Append("  PressCost: ").Append(PressCost).Append("\n");
            sb.Append("  CuttingCost: ").Append(CuttingCost).Append("\n");
            sb.Append("  Waste: ").Append(Waste).Append("\n");
            sb.Append("  SheetUsage: ").Append(SheetUsage).Append("\n");
            sb.Append("  MaxOverrun: ").Append(MaxOverrun).Append("\n");
            sb.Append("  TotalOverruns: ").Append(TotalOverruns).Append("\n");
            sb.Append("  Placed: ").Append(Placed).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  CutComplexity: ").Append(CutComplexity).Append("\n");
            sb.Append("  Templates: ").Append(Templates).Append("\n");
            sb.Append("  Thumbnail: ").Append(Thumbnail).Append("\n");
            sb.Append("  Press: ").Append(Press).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LayoutResultEntity);
        }

        /// <summary>
        /// Returns true if LayoutResultEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of LayoutResultEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LayoutResultEntity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.PendingEstimations == input.PendingEstimations ||
                    (this.PendingEstimations != null &&
                    this.PendingEstimations.Equals(input.PendingEstimations))
                ) && 
                (
                    this.LayoutType == input.LayoutType ||
                    (this.LayoutType != null &&
                    this.LayoutType.Equals(input.LayoutType))
                ) && 
                (
                    this.Sheet == input.Sheet ||
                    (this.Sheet != null &&
                    this.Sheet.Equals(input.Sheet))
                ) && 
                (
                    this.Things == input.Things ||
                    this.Things != null &&
                    input.Things != null &&
                    this.Things.SequenceEqual(input.Things)
                ) && 
                (
                    this.RunLength == input.RunLength ||
                    (this.RunLength != null &&
                    this.RunLength.Equals(input.RunLength))
                ) && 
                (
                    this.PressMinutes == input.PressMinutes ||
                    (this.PressMinutes != null &&
                    this.PressMinutes.Equals(input.PressMinutes))
                ) && 
                (
                    this.CuttingTime == input.CuttingTime ||
                    (this.CuttingTime != null &&
                    this.CuttingTime.Equals(input.CuttingTime))
                ) && 
                (
                    this.TotalCost == input.TotalCost ||
                    (this.TotalCost != null &&
                    this.TotalCost.Equals(input.TotalCost))
                ) && 
                (
                    this.PlateCost == input.PlateCost ||
                    (this.PlateCost != null &&
                    this.PlateCost.Equals(input.PlateCost))
                ) && 
                (
                    this.StockCost == input.StockCost ||
                    (this.StockCost != null &&
                    this.StockCost.Equals(input.StockCost))
                ) && 
                (
                    this.PressCost == input.PressCost ||
                    (this.PressCost != null &&
                    this.PressCost.Equals(input.PressCost))
                ) && 
                (
                    this.CuttingCost == input.CuttingCost ||
                    (this.CuttingCost != null &&
                    this.CuttingCost.Equals(input.CuttingCost))
                ) && 
                (
                    this.Waste == input.Waste ||
                    (this.Waste != null &&
                    this.Waste.Equals(input.Waste))
                ) && 
                (
                    this.SheetUsage == input.SheetUsage ||
                    (this.SheetUsage != null &&
                    this.SheetUsage.Equals(input.SheetUsage))
                ) && 
                (
                    this.MaxOverrun == input.MaxOverrun ||
                    (this.MaxOverrun != null &&
                    this.MaxOverrun.Equals(input.MaxOverrun))
                ) && 
                (
                    this.TotalOverruns == input.TotalOverruns ||
                    (this.TotalOverruns != null &&
                    this.TotalOverruns.Equals(input.TotalOverruns))
                ) && 
                (
                    this.Placed == input.Placed ||
                    (this.Placed != null &&
                    this.Placed.Equals(input.Placed))
                ) && 
                (
                    this.Items == input.Items ||
                    (this.Items != null &&
                    this.Items.Equals(input.Items))
                ) && 
                (
                    this.CutComplexity == input.CutComplexity ||
                    (this.CutComplexity != null &&
                    this.CutComplexity.Equals(input.CutComplexity))
                ) && 
                (
                    this.Templates == input.Templates ||
                    this.Templates != null &&
                    input.Templates != null &&
                    this.Templates.SequenceEqual(input.Templates)
                ) && 
                (
                    this.Thumbnail == input.Thumbnail ||
                    (this.Thumbnail != null &&
                    this.Thumbnail.Equals(input.Thumbnail))
                ) && 
                (
                    this.Press == input.Press ||
                    (this.Press != null &&
                    this.Press.Equals(input.Press))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.PendingEstimations != null)
                    hashCode = hashCode * 59 + this.PendingEstimations.GetHashCode();
                if (this.LayoutType != null)
                    hashCode = hashCode * 59 + this.LayoutType.GetHashCode();
                if (this.Sheet != null)
                    hashCode = hashCode * 59 + this.Sheet.GetHashCode();
                if (this.Things != null)
                    hashCode = hashCode * 59 + this.Things.GetHashCode();
                if (this.RunLength != null)
                    hashCode = hashCode * 59 + this.RunLength.GetHashCode();
                if (this.PressMinutes != null)
                    hashCode = hashCode * 59 + this.PressMinutes.GetHashCode();
                if (this.CuttingTime != null)
                    hashCode = hashCode * 59 + this.CuttingTime.GetHashCode();
                if (this.TotalCost != null)
                    hashCode = hashCode * 59 + this.TotalCost.GetHashCode();
                if (this.PlateCost != null)
                    hashCode = hashCode * 59 + this.PlateCost.GetHashCode();
                if (this.StockCost != null)
                    hashCode = hashCode * 59 + this.StockCost.GetHashCode();
                if (this.PressCost != null)
                    hashCode = hashCode * 59 + this.PressCost.GetHashCode();
                if (this.CuttingCost != null)
                    hashCode = hashCode * 59 + this.CuttingCost.GetHashCode();
                if (this.Waste != null)
                    hashCode = hashCode * 59 + this.Waste.GetHashCode();
                if (this.SheetUsage != null)
                    hashCode = hashCode * 59 + this.SheetUsage.GetHashCode();
                if (this.MaxOverrun != null)
                    hashCode = hashCode * 59 + this.MaxOverrun.GetHashCode();
                if (this.TotalOverruns != null)
                    hashCode = hashCode * 59 + this.TotalOverruns.GetHashCode();
                if (this.Placed != null)
                    hashCode = hashCode * 59 + this.Placed.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                if (this.CutComplexity != null)
                    hashCode = hashCode * 59 + this.CutComplexity.GetHashCode();
                if (this.Templates != null)
                    hashCode = hashCode * 59 + this.Templates.GetHashCode();
                if (this.Thumbnail != null)
                    hashCode = hashCode * 59 + this.Thumbnail.GetHashCode();
                if (this.Press != null)
                    hashCode = hashCode * 59 + this.Press.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
