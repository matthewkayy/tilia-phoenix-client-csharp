/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Grade library item
    /// </summary>
    [DataContract]
        public partial class Grade :  IEquatable<Grade>, IValidatableObject
    {
        /// <summary>
        /// Grade display
        /// </summary>
        /// <value>Grade display</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum GradeDisplayEnum
        {
            /// <summary>
            /// Enum Weight for value: Weight
            /// </summary>
            [EnumMember(Value = "Weight")]
            Weight = 1,
            /// <summary>
            /// Enum Caliper for value: Caliper
            /// </summary>
            [EnumMember(Value = "Caliper")]
            Caliper = 2,
            /// <summary>
            /// Enum Both for value: Both
            /// </summary>
            [EnumMember(Value = "Both")]
            Both = 3        }
        /// <summary>
        /// Grade display
        /// </summary>
        /// <value>Grade display</value>
        [DataMember(Name="grade-display", EmitDefaultValue=false)]
        public GradeDisplayEnum? GradeDisplay { get; set; }
        /// <summary>
        /// Grade weight units
        /// </summary>
        /// <value>Grade weight units</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum WeightUnitsEnum
        {
            /// <summary>
            /// Enum Gsm for value: gsm
            /// </summary>
            [EnumMember(Value = "gsm")]
            Gsm = 1,
            /// <summary>
            /// Enum Lb for value: lb
            /// </summary>
            [EnumMember(Value = "lb")]
            Lb = 2        }
        /// <summary>
        /// Grade weight units
        /// </summary>
        /// <value>Grade weight units</value>
        [DataMember(Name="weight-units", EmitDefaultValue=false)]
        public WeightUnitsEnum? WeightUnits { get; set; }
        /// <summary>
        /// Grade weight type for pound (Lb) standard weights
        /// </summary>
        /// <value>Grade weight type for pound (Lb) standard weights</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum WeightTypeEnum
        {
            /// <summary>
            /// Enum Text for value: Text
            /// </summary>
            [EnumMember(Value = "Text")]
            Text = 1,
            /// <summary>
            /// Enum Book for value: Book
            /// </summary>
            [EnumMember(Value = "Book")]
            Book = 2,
            /// <summary>
            /// Enum Bond for value: Bond
            /// </summary>
            [EnumMember(Value = "Bond")]
            Bond = 3,
            /// <summary>
            /// Enum Offset for value: Offset
            /// </summary>
            [EnumMember(Value = "Offset")]
            Offset = 4,
            /// <summary>
            /// Enum Cover for value: Cover
            /// </summary>
            [EnumMember(Value = "Cover")]
            Cover = 5,
            /// <summary>
            /// Enum Bristol for value: Bristol
            /// </summary>
            [EnumMember(Value = "Bristol")]
            Bristol = 6,
            /// <summary>
            /// Enum Index for value: Index
            /// </summary>
            [EnumMember(Value = "Index")]
            Index = 7,
            /// <summary>
            /// Enum Tag for value: Tag
            /// </summary>
            [EnumMember(Value = "Tag")]
            Tag = 8,
            /// <summary>
            /// Enum Card for value: Card
            /// </summary>
            [EnumMember(Value = "Card")]
            Card = 9        }
        /// <summary>
        /// Grade weight type for pound (Lb) standard weights
        /// </summary>
        /// <value>Grade weight type for pound (Lb) standard weights</value>
        [DataMember(Name="weight-type", EmitDefaultValue=false)]
        public WeightTypeEnum? WeightType { get; set; }
        /// <summary>
        /// Cost unit type of grade
        /// </summary>
        /// <value>Cost unit type of grade</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum CostUnitsEnum
        {
            /// <summary>
            /// Enum FromGrade for value: From Grade
            /// </summary>
            [EnumMember(Value = "From Grade")]
            FromGrade = 1,
            /// <summary>
            /// Enum PerSheet for value: Per Sheet
            /// </summary>
            [EnumMember(Value = "Per Sheet")]
            PerSheet = 2,
            /// <summary>
            /// Enum Per500Sheets for value: Per 500 Sheets
            /// </summary>
            [EnumMember(Value = "Per 500 Sheets")]
            Per500Sheets = 3,
            /// <summary>
            /// Enum Per1000Sheets for value: Per 1000 Sheets
            /// </summary>
            [EnumMember(Value = "Per 1000 Sheets")]
            Per1000Sheets = 4,
            /// <summary>
            /// Enum Perlb for value: Per lb
            /// </summary>
            [EnumMember(Value = "Per lb")]
            Perlb = 5,
            /// <summary>
            /// Enum Per500lb for value: Per 500 lb
            /// </summary>
            [EnumMember(Value = "Per 500 lb")]
            Per500lb = 6,
            /// <summary>
            /// Enum Per1000lb for value: Per 1000 lb
            /// </summary>
            [EnumMember(Value = "Per 1000 lb")]
            Per1000lb = 7,
            /// <summary>
            /// Enum Perkg for value: Per kg
            /// </summary>
            [EnumMember(Value = "Per kg")]
            Perkg = 8,
            /// <summary>
            /// Enum Per1000kg for value: Per 1000 kg
            /// </summary>
            [EnumMember(Value = "Per 1000 kg")]
            Per1000kg = 9,
            /// <summary>
            /// Enum Perft for value: Per ft²
            /// </summary>
            [EnumMember(Value = "Per ft²")]
            Perft = 10,
            /// <summary>
            /// Enum Perm for value: Per m²
            /// </summary>
            [EnumMember(Value = "Per m²")]
            Perm = 11,
            /// <summary>
            /// Enum Perft_11 for value: Per ft
            /// </summary>
            [EnumMember(Value = "Per ft")]
            Perft_11 = 12,
            /// <summary>
            /// Enum Perm_12 for value: Per m
            /// </summary>
            [EnumMember(Value = "Per m")]
            Perm_12 = 13        }
        /// <summary>
        /// Cost unit type of grade
        /// </summary>
        /// <value>Cost unit type of grade</value>
        [DataMember(Name="cost-units", EmitDefaultValue=false)]
        public CostUnitsEnum? CostUnits { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Grade" /> class.
        /// </summary>
        /// <param name="description">Description.</param>
        /// <param name="notes">Notes.</param>
        /// <param name="externalId">External ID.</param>
        /// <param name="gradeDisplay">Grade display.</param>
        /// <param name="weight">Grade weight value (required).</param>
        /// <param name="weightUnits">Grade weight units.</param>
        /// <param name="weightType">Grade weight type for pound (Lb) standard weights.</param>
        /// <param name="caliper">Caliper value (required).</param>
        /// <param name="cost">Cost of grade.</param>
        /// <param name="costUnits">Cost unit type of grade.</param>
        /// <param name="anySheetSize">When true, any sheet size that can fit on a given press is assumed available via a sheet converter, custom order, etc..</param>
        /// <param name="sheets">List of sheets specified for this grade.</param>
        /// <param name="rolls">List of rolls specified for this grade.</param>
        /// <param name="properties">Custom properties.</param>
        /// <param name="path">Path.</param>
        public Grade(string description = default(string), string notes = default(string), string externalId = default(string), GradeDisplayEnum? gradeDisplay = default(GradeDisplayEnum?), double? weight = default(double?), WeightUnitsEnum? weightUnits = default(WeightUnitsEnum?), WeightTypeEnum? weightType = default(WeightTypeEnum?), string caliper = default(string), double? cost = default(double?), CostUnitsEnum? costUnits = default(CostUnitsEnum?), bool? anySheetSize = default(bool?), List<Sheet> sheets = default(List<Sheet>), List<Roll> rolls = default(List<Roll>), List<PropertyObject> properties = default(List<PropertyObject>), string path = default(string))
        {
            // to ensure "weight" is required (not null)
            if (weight == null)
            {
                throw new InvalidDataException("weight is a required property for Grade and cannot be null");
            }
            else
            {
                this.Weight = weight;
            }
            // to ensure "caliper" is required (not null)
            if (caliper == null)
            {
                throw new InvalidDataException("caliper is a required property for Grade and cannot be null");
            }
            else
            {
                this.Caliper = caliper;
            }
            this.Description = description;
            this.Notes = notes;
            this.ExternalId = externalId;
            this.GradeDisplay = gradeDisplay;
            this.WeightUnits = weightUnits;
            this.WeightType = weightType;
            this.Cost = cost;
            this.CostUnits = costUnits;
            this.AnySheetSize = anySheetSize;
            this.Sheets = sheets;
            this.Rolls = rolls;
            this.Properties = properties;
            this.Path = path;
        }
        
        /// <summary>
        /// Unique ID
        /// </summary>
        /// <value>Unique ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; private set; }

        /// <summary>
        /// Read-only grade name derived from weight and/or caliper of the grade depending on grade display
        /// </summary>
        /// <value>Read-only grade name derived from weight and/or caliper of the grade depending on grade display</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; private set; }

        /// <summary>
        /// Created On
        /// </summary>
        /// <value>Created On</value>
        [DataMember(Name="created-on", EmitDefaultValue=false)]
        public DateTime? CreatedOn { get; private set; }

        /// <summary>
        /// Modified On
        /// </summary>
        /// <value>Modified On</value>
        [DataMember(Name="modified-on", EmitDefaultValue=false)]
        public DateTime? ModifiedOn { get; private set; }

        /// <summary>
        /// Version
        /// </summary>
        /// <value>Version</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; private set; }

        /// <summary>
        /// Description
        /// </summary>
        /// <value>Description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Notes
        /// </summary>
        /// <value>Notes</value>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// External ID
        /// </summary>
        /// <value>External ID</value>
        [DataMember(Name="external-id", EmitDefaultValue=false)]
        public string ExternalId { get; set; }


        /// <summary>
        /// Grade weight value
        /// </summary>
        /// <value>Grade weight value</value>
        [DataMember(Name="weight", EmitDefaultValue=false)]
        public double? Weight { get; set; }



        /// <summary>
        /// Caliper value
        /// </summary>
        /// <value>Caliper value</value>
        [DataMember(Name="caliper", EmitDefaultValue=false)]
        public string Caliper { get; set; }

        /// <summary>
        /// Cost of grade
        /// </summary>
        /// <value>Cost of grade</value>
        [DataMember(Name="cost", EmitDefaultValue=false)]
        public double? Cost { get; set; }


        /// <summary>
        /// When true, any sheet size that can fit on a given press is assumed available via a sheet converter, custom order, etc.
        /// </summary>
        /// <value>When true, any sheet size that can fit on a given press is assumed available via a sheet converter, custom order, etc.</value>
        [DataMember(Name="any-sheet-size", EmitDefaultValue=false)]
        public bool? AnySheetSize { get; set; }

        /// <summary>
        /// List of sheets specified for this grade
        /// </summary>
        /// <value>List of sheets specified for this grade</value>
        [DataMember(Name="sheets", EmitDefaultValue=false)]
        public List<Sheet> Sheets { get; set; }

        /// <summary>
        /// List of rolls specified for this grade
        /// </summary>
        /// <value>List of rolls specified for this grade</value>
        [DataMember(Name="rolls", EmitDefaultValue=false)]
        public List<Roll> Rolls { get; set; }

        /// <summary>
        /// Custom properties
        /// </summary>
        /// <value>Custom properties</value>
        [DataMember(Name="properties", EmitDefaultValue=false)]
        public List<PropertyObject> Properties { get; set; }

        /// <summary>
        /// Path
        /// </summary>
        /// <value>Path</value>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Grade {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  ModifiedOn: ").Append(ModifiedOn).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  GradeDisplay: ").Append(GradeDisplay).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  WeightUnits: ").Append(WeightUnits).Append("\n");
            sb.Append("  WeightType: ").Append(WeightType).Append("\n");
            sb.Append("  Caliper: ").Append(Caliper).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  CostUnits: ").Append(CostUnits).Append("\n");
            sb.Append("  AnySheetSize: ").Append(AnySheetSize).Append("\n");
            sb.Append("  Sheets: ").Append(Sheets).Append("\n");
            sb.Append("  Rolls: ").Append(Rolls).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Grade);
        }

        /// <summary>
        /// Returns true if Grade instances are equal
        /// </summary>
        /// <param name="input">Instance of Grade to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Grade input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CreatedOn == input.CreatedOn ||
                    (this.CreatedOn != null &&
                    this.CreatedOn.Equals(input.CreatedOn))
                ) && 
                (
                    this.ModifiedOn == input.ModifiedOn ||
                    (this.ModifiedOn != null &&
                    this.ModifiedOn.Equals(input.ModifiedOn))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                ) && 
                (
                    this.GradeDisplay == input.GradeDisplay ||
                    (this.GradeDisplay != null &&
                    this.GradeDisplay.Equals(input.GradeDisplay))
                ) && 
                (
                    this.Weight == input.Weight ||
                    (this.Weight != null &&
                    this.Weight.Equals(input.Weight))
                ) && 
                (
                    this.WeightUnits == input.WeightUnits ||
                    (this.WeightUnits != null &&
                    this.WeightUnits.Equals(input.WeightUnits))
                ) && 
                (
                    this.WeightType == input.WeightType ||
                    (this.WeightType != null &&
                    this.WeightType.Equals(input.WeightType))
                ) && 
                (
                    this.Caliper == input.Caliper ||
                    (this.Caliper != null &&
                    this.Caliper.Equals(input.Caliper))
                ) && 
                (
                    this.Cost == input.Cost ||
                    (this.Cost != null &&
                    this.Cost.Equals(input.Cost))
                ) && 
                (
                    this.CostUnits == input.CostUnits ||
                    (this.CostUnits != null &&
                    this.CostUnits.Equals(input.CostUnits))
                ) && 
                (
                    this.AnySheetSize == input.AnySheetSize ||
                    (this.AnySheetSize != null &&
                    this.AnySheetSize.Equals(input.AnySheetSize))
                ) && 
                (
                    this.Sheets == input.Sheets ||
                    this.Sheets != null &&
                    input.Sheets != null &&
                    this.Sheets.SequenceEqual(input.Sheets)
                ) && 
                (
                    this.Rolls == input.Rolls ||
                    this.Rolls != null &&
                    input.Rolls != null &&
                    this.Rolls.SequenceEqual(input.Rolls)
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.CreatedOn != null)
                    hashCode = hashCode * 59 + this.CreatedOn.GetHashCode();
                if (this.ModifiedOn != null)
                    hashCode = hashCode * 59 + this.ModifiedOn.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                if (this.ExternalId != null)
                    hashCode = hashCode * 59 + this.ExternalId.GetHashCode();
                if (this.GradeDisplay != null)
                    hashCode = hashCode * 59 + this.GradeDisplay.GetHashCode();
                if (this.Weight != null)
                    hashCode = hashCode * 59 + this.Weight.GetHashCode();
                if (this.WeightUnits != null)
                    hashCode = hashCode * 59 + this.WeightUnits.GetHashCode();
                if (this.WeightType != null)
                    hashCode = hashCode * 59 + this.WeightType.GetHashCode();
                if (this.Caliper != null)
                    hashCode = hashCode * 59 + this.Caliper.GetHashCode();
                if (this.Cost != null)
                    hashCode = hashCode * 59 + this.Cost.GetHashCode();
                if (this.CostUnits != null)
                    hashCode = hashCode * 59 + this.CostUnits.GetHashCode();
                if (this.AnySheetSize != null)
                    hashCode = hashCode * 59 + this.AnySheetSize.GetHashCode();
                if (this.Sheets != null)
                    hashCode = hashCode * 59 + this.Sheets.GetHashCode();
                if (this.Rolls != null)
                    hashCode = hashCode * 59 + this.Rolls.GetHashCode();
                if (this.Properties != null)
                    hashCode = hashCode * 59 + this.Properties.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
