/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Import template into Template Library
    /// </summary>
    [DataContract]
        public partial class ImportTemplateEntity :  IEquatable<ImportTemplateEntity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImportTemplateEntity" /> class.
        /// </summary>
        /// <param name="name">Name of template asset to create including folders if desired.  If name is not specified, file name minus extension will be used as the name..</param>
        /// <param name="id">ID of asset to use.  If not specified a unique ID will be generated..</param>
        /// <param name="createFolder">Boolean controlling whether to create a folder when folder or parent folder(s) does not exist.  By default non-existent folders are not created automatically..</param>
        /// <param name="path">Full path of template file to import (required).</param>
        /// <param name="preset">Name of preset to use during import.</param>
        /// <param name="importDieDesigns">Whether or not to import individual die designs from this template into the Die Designs library.</param>
        /// <param name="dieDesignsFolder">Optional folder in Die Designs library to import die designs from this template into.  Ignored if import die designs is disabled and defaults to root folder if not set..</param>
        public ImportTemplateEntity(string name = default(string), string id = default(string), bool? createFolder = default(bool?), string path = default(string), string preset = default(string), bool? importDieDesigns = default(bool?), string dieDesignsFolder = default(string))
        {
            // to ensure "path" is required (not null)
            if (path == null)
            {
                throw new InvalidDataException("path is a required property for ImportTemplateEntity and cannot be null");
            }
            else
            {
                this.Path = path;
            }
            this.Name = name;
            this.Id = id;
            this.CreateFolder = createFolder;
            this.Preset = preset;
            this.ImportDieDesigns = importDieDesigns;
            this.DieDesignsFolder = dieDesignsFolder;
        }
        
        /// <summary>
        /// Name of template asset to create including folders if desired.  If name is not specified, file name minus extension will be used as the name.
        /// </summary>
        /// <value>Name of template asset to create including folders if desired.  If name is not specified, file name minus extension will be used as the name.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// ID of asset to use.  If not specified a unique ID will be generated.
        /// </summary>
        /// <value>ID of asset to use.  If not specified a unique ID will be generated.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Boolean controlling whether to create a folder when folder or parent folder(s) does not exist.  By default non-existent folders are not created automatically.
        /// </summary>
        /// <value>Boolean controlling whether to create a folder when folder or parent folder(s) does not exist.  By default non-existent folders are not created automatically.</value>
        [DataMember(Name="create-folder", EmitDefaultValue=false)]
        public bool? CreateFolder { get; set; }

        /// <summary>
        /// Full path of template file to import
        /// </summary>
        /// <value>Full path of template file to import</value>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// Name of preset to use during import
        /// </summary>
        /// <value>Name of preset to use during import</value>
        [DataMember(Name="preset", EmitDefaultValue=false)]
        public string Preset { get; set; }

        /// <summary>
        /// Whether or not to import individual die designs from this template into the Die Designs library
        /// </summary>
        /// <value>Whether or not to import individual die designs from this template into the Die Designs library</value>
        [DataMember(Name="import-die-designs", EmitDefaultValue=false)]
        public bool? ImportDieDesigns { get; set; }

        /// <summary>
        /// Optional folder in Die Designs library to import die designs from this template into.  Ignored if import die designs is disabled and defaults to root folder if not set.
        /// </summary>
        /// <value>Optional folder in Die Designs library to import die designs from this template into.  Ignored if import die designs is disabled and defaults to root folder if not set.</value>
        [DataMember(Name="die-designs-folder", EmitDefaultValue=false)]
        public string DieDesignsFolder { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImportTemplateEntity {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreateFolder: ").Append(CreateFolder).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Preset: ").Append(Preset).Append("\n");
            sb.Append("  ImportDieDesigns: ").Append(ImportDieDesigns).Append("\n");
            sb.Append("  DieDesignsFolder: ").Append(DieDesignsFolder).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ImportTemplateEntity);
        }

        /// <summary>
        /// Returns true if ImportTemplateEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of ImportTemplateEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportTemplateEntity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CreateFolder == input.CreateFolder ||
                    (this.CreateFolder != null &&
                    this.CreateFolder.Equals(input.CreateFolder))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.Preset == input.Preset ||
                    (this.Preset != null &&
                    this.Preset.Equals(input.Preset))
                ) && 
                (
                    this.ImportDieDesigns == input.ImportDieDesigns ||
                    (this.ImportDieDesigns != null &&
                    this.ImportDieDesigns.Equals(input.ImportDieDesigns))
                ) && 
                (
                    this.DieDesignsFolder == input.DieDesignsFolder ||
                    (this.DieDesignsFolder != null &&
                    this.DieDesignsFolder.Equals(input.DieDesignsFolder))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CreateFolder != null)
                    hashCode = hashCode * 59 + this.CreateFolder.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.Preset != null)
                    hashCode = hashCode * 59 + this.Preset.GetHashCode();
                if (this.ImportDieDesigns != null)
                    hashCode = hashCode * 59 + this.ImportDieDesigns.GetHashCode();
                if (this.DieDesignsFolder != null)
                    hashCode = hashCode * 59 + this.DieDesignsFolder.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
