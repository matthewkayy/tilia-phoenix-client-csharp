/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Overlap tiling method creates overlaps between tiles in the given direction
    /// </summary>
    [DataContract]
        public partial class OverlapTiling :  IEquatable<OverlapTiling>, IValidatableObject
    {
        /// <summary>
        /// Rule defining what edge(s) of tiles overlap is applied to in teh given direction
        /// </summary>
        /// <value>Rule defining what edge(s) of tiles overlap is applied to in teh given direction</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum OverlapRuleEnum
        {
            /// <summary>
            /// Enum Top for value: Top
            /// </summary>
            [EnumMember(Value = "Top")]
            Top = 1,
            /// <summary>
            /// Enum Bottom for value: Bottom
            /// </summary>
            [EnumMember(Value = "Bottom")]
            Bottom = 2,
            /// <summary>
            /// Enum Both for value: Both
            /// </summary>
            [EnumMember(Value = "Both")]
            Both = 3        }
        /// <summary>
        /// Rule defining what edge(s) of tiles overlap is applied to in teh given direction
        /// </summary>
        /// <value>Rule defining what edge(s) of tiles overlap is applied to in teh given direction</value>
        [DataMember(Name="overlap-rule", EmitDefaultValue=false)]
        public OverlapRuleEnum? OverlapRule { get; set; }
        /// <summary>
        /// Tiling method type.  &#x27;Gap&#x27; for tile gap rule and &#x27;Overlap&#x27; for tile overlap rule type
        /// </summary>
        /// <value>Tiling method type.  &#x27;Gap&#x27; for tile gap rule and &#x27;Overlap&#x27; for tile overlap rule type</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,
            /// <summary>
            /// Enum Gap for value: Gap
            /// </summary>
            [EnumMember(Value = "Gap")]
            Gap = 2,
            /// <summary>
            /// Enum Overlap for value: Overlap
            /// </summary>
            [EnumMember(Value = "Overlap")]
            Overlap = 3        }
        /// <summary>
        /// Tiling method type.  &#x27;Gap&#x27; for tile gap rule and &#x27;Overlap&#x27; for tile overlap rule type
        /// </summary>
        /// <value>Tiling method type.  &#x27;Gap&#x27; for tile gap rule and &#x27;Overlap&#x27; for tile overlap rule type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OverlapTiling" /> class.
        /// </summary>
        /// <param name="overlapRule">Rule defining what edge(s) of tiles overlap is applied to in teh given direction.</param>
        /// <param name="overlap">Distance beyond tile edge to extend the tile to create overlap in the given direction (required).</param>
        /// <param name="noImage">Distance of the section at the end of the overlap where artwork content is to be clipped.</param>
        /// <param name="type">Tiling method type.  &#x27;Gap&#x27; for tile gap rule and &#x27;Overlap&#x27; for tile overlap rule type (required).</param>
        public OverlapTiling(OverlapRuleEnum? overlapRule = default(OverlapRuleEnum?), double? overlap = default(double?), double? noImage = default(double?), TypeEnum type = default(TypeEnum))
        {
            // to ensure "overlap" is required (not null)
            if (overlap == null)
            {
                throw new InvalidDataException("overlap is a required property for OverlapTiling and cannot be null");
            }
            else
            {
                this.Overlap = overlap;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for OverlapTiling and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.OverlapRule = overlapRule;
            this.NoImage = noImage;
        }
        

        /// <summary>
        /// Distance beyond tile edge to extend the tile to create overlap in the given direction
        /// </summary>
        /// <value>Distance beyond tile edge to extend the tile to create overlap in the given direction</value>
        [DataMember(Name="overlap", EmitDefaultValue=false)]
        public double? Overlap { get; set; }

        /// <summary>
        /// Distance of the section at the end of the overlap where artwork content is to be clipped
        /// </summary>
        /// <value>Distance of the section at the end of the overlap where artwork content is to be clipped</value>
        [DataMember(Name="no-image", EmitDefaultValue=false)]
        public double? NoImage { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OverlapTiling {\n");
            sb.Append("  OverlapRule: ").Append(OverlapRule).Append("\n");
            sb.Append("  Overlap: ").Append(Overlap).Append("\n");
            sb.Append("  NoImage: ").Append(NoImage).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OverlapTiling);
        }

        /// <summary>
        /// Returns true if OverlapTiling instances are equal
        /// </summary>
        /// <param name="input">Instance of OverlapTiling to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OverlapTiling input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OverlapRule == input.OverlapRule ||
                    (this.OverlapRule != null &&
                    this.OverlapRule.Equals(input.OverlapRule))
                ) && 
                (
                    this.Overlap == input.Overlap ||
                    (this.Overlap != null &&
                    this.Overlap.Equals(input.Overlap))
                ) && 
                (
                    this.NoImage == input.NoImage ||
                    (this.NoImage != null &&
                    this.NoImage.Equals(input.NoImage))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OverlapRule != null)
                    hashCode = hashCode * 59 + this.OverlapRule.GetHashCode();
                if (this.Overlap != null)
                    hashCode = hashCode * 59 + this.Overlap.GetHashCode();
                if (this.NoImage != null)
                    hashCode = hashCode * 59 + this.NoImage.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
