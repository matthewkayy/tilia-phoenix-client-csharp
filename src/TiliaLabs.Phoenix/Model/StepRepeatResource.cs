/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Step and Repeat action resource
    /// </summary>
    [DataContract]
        public partial class StepRepeatResource :  IEquatable<StepRepeatResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StepRepeatResource" /> class.
        /// </summary>
        /// <param name="idref">ID of action resource is being applied to (Hot Folders only).</param>
        /// <param name="productName">Name of product to step and repeat (required).</param>
        /// <param name="x">Optional X position to place repeat group in sheet.  This value is ignored if an auto-fill option is defined in settings in horizontal direction..</param>
        /// <param name="y">Optional Y position to place repeat group in sheet.  This value is ignored if an auto-fill option is defined in settings in vertical direction..</param>
        /// <param name="settings">settings (required).</param>
        public StepRepeatResource(int? idref = default(int?), string productName = default(string), string x = default(string), string y = default(string), StepRepeatEntity settings = default(StepRepeatEntity))
        {
            // to ensure "productName" is required (not null)
            if (productName == null)
            {
                throw new InvalidDataException("productName is a required property for StepRepeatResource and cannot be null");
            }
            else
            {
                this.ProductName = productName;
            }
            // to ensure "settings" is required (not null)
            if (settings == null)
            {
                throw new InvalidDataException("settings is a required property for StepRepeatResource and cannot be null");
            }
            else
            {
                this.Settings = settings;
            }
            this.Idref = idref;
            this.X = x;
            this.Y = y;
        }
        
        /// <summary>
        /// ID of action resource is being applied to (Hot Folders only)
        /// </summary>
        /// <value>ID of action resource is being applied to (Hot Folders only)</value>
        [DataMember(Name="idref", EmitDefaultValue=false)]
        public int? Idref { get; set; }

        /// <summary>
        /// Name of product to step and repeat
        /// </summary>
        /// <value>Name of product to step and repeat</value>
        [DataMember(Name="product-name", EmitDefaultValue=false)]
        public string ProductName { get; set; }

        /// <summary>
        /// Optional X position to place repeat group in sheet.  This value is ignored if an auto-fill option is defined in settings in horizontal direction.
        /// </summary>
        /// <value>Optional X position to place repeat group in sheet.  This value is ignored if an auto-fill option is defined in settings in horizontal direction.</value>
        [DataMember(Name="x", EmitDefaultValue=false)]
        public string X { get; set; }

        /// <summary>
        /// Optional Y position to place repeat group in sheet.  This value is ignored if an auto-fill option is defined in settings in vertical direction.
        /// </summary>
        /// <value>Optional Y position to place repeat group in sheet.  This value is ignored if an auto-fill option is defined in settings in vertical direction.</value>
        [DataMember(Name="y", EmitDefaultValue=false)]
        public string Y { get; set; }

        /// <summary>
        /// Gets or Sets Settings
        /// </summary>
        [DataMember(Name="settings", EmitDefaultValue=false)]
        public StepRepeatEntity Settings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StepRepeatResource {\n");
            sb.Append("  Idref: ").Append(Idref).Append("\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  X: ").Append(X).Append("\n");
            sb.Append("  Y: ").Append(Y).Append("\n");
            sb.Append("  Settings: ").Append(Settings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StepRepeatResource);
        }

        /// <summary>
        /// Returns true if StepRepeatResource instances are equal
        /// </summary>
        /// <param name="input">Instance of StepRepeatResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StepRepeatResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Idref == input.Idref ||
                    (this.Idref != null &&
                    this.Idref.Equals(input.Idref))
                ) && 
                (
                    this.ProductName == input.ProductName ||
                    (this.ProductName != null &&
                    this.ProductName.Equals(input.ProductName))
                ) && 
                (
                    this.X == input.X ||
                    (this.X != null &&
                    this.X.Equals(input.X))
                ) && 
                (
                    this.Y == input.Y ||
                    (this.Y != null &&
                    this.Y.Equals(input.Y))
                ) && 
                (
                    this.Settings == input.Settings ||
                    (this.Settings != null &&
                    this.Settings.Equals(input.Settings))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Idref != null)
                    hashCode = hashCode * 59 + this.Idref.GetHashCode();
                if (this.ProductName != null)
                    hashCode = hashCode * 59 + this.ProductName.GetHashCode();
                if (this.X != null)
                    hashCode = hashCode * 59 + this.X.GetHashCode();
                if (this.Y != null)
                    hashCode = hashCode * 59 + this.Y.GetHashCode();
                if (this.Settings != null)
                    hashCode = hashCode * 59 + this.Settings.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
