/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Flat part for creating flats
    /// </summary>
    [DataContract]
        public partial class FlatPart : PartObject, IEquatable<FlatPart>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        public override TypeEnum Type { get; } = TypeEnum.Flat;
        /// <summary>
        /// Initializes a new instance of the <see cref="FlatPart" /> class.
        /// </summary>
        /// <param name="name">Name (required).</param>
        /// <param name="grain">Part grain (required).</param>
        /// <param name="pages">Part pages (required).</param>
        /// <param name="processSettings">Part process settings (required).</param>
        /// <param name="rotation">rotation (required).</param>
        /// <param name="flat">flat (required).</param>
        /// <param name="templates">Die templates this flatmust use.</param>
        /// <param name="material">material.</param>
        /// <param name="processes">Part processes.</param>
        public FlatPart(string name = default(string), GrainEnum grain = default(GrainEnum), List<Page> pages = default(List<Page>), List<ProcessSetting> processSettings = default(List<ProcessSetting>), Rotation rotation = default(Rotation), Flat flat = default(Flat), List<string> templates = default(List<string>), Material material = default(Material), List<Process> processes = default(List<Process>))
            : base(name, grain, pages, processSettings, rotation, material, processes)
        {
            // to ensure "flat" is required (not null)
            if (flat == null)
            {
                throw new InvalidDataException("flat is a required property for FlatPart and cannot be null");
            }
            else
            {
                this.Flat = flat;
            }
            this.Templates = templates;
        }

        /// <summary>
        /// Gets or Sets Flat
        /// </summary>
        [DataMember(Name="flat", EmitDefaultValue=false)]
        public Flat Flat { get; set; }

        /// <summary>
        /// Die templates this flatmust use
        /// </summary>
        /// <value>Die templates this flatmust use</value>
        [DataMember(Name="templates", EmitDefaultValue=false)]
        public List<string> Templates { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlatPart {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Grain: ").Append(Grain).Append("\n");
            sb.Append("  Pages: ").Append(Pages).Append("\n");
            sb.Append("  ProcessSettings: ").Append(ProcessSettings).Append("\n");
            sb.Append("  Rotation: ").Append(Rotation).Append("\n");
            sb.Append("  Flat: ").Append(Flat).Append("\n");
            sb.Append("  Templates: ").Append(Templates).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Material: ").Append(Material).Append("\n");
            sb.Append("  Processes: ").Append(Processes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FlatPart);
        }

        /// <summary>
        /// Returns true if FlatPart instances are equal
        /// </summary>
        /// <param name="input">Instance of FlatPart to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlatPart input)
        {
            if (input == null)
                return false;
            
            return
                base.Equals(input) &&
                (
                    this.Flat == input.Flat ||
                    (this.Flat != null &&
                    this.Flat.Equals(input.Flat))
                ) && 
                (
                    this.Templates == input.Templates ||
                    this.Templates != null &&
                    input.Templates != null &&
                    this.Templates.SequenceEqual(input.Templates)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Flat != null)
                    hashCode = hashCode * 59 + this.Flat.GetHashCode();
                if (this.Templates != null)
                    hashCode = hashCode * 59 + this.Templates.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
