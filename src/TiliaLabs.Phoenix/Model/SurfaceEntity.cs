/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Job layout surface
    /// </summary>
    [DataContract]
        public partial class SurfaceEntity :  IEquatable<SurfaceEntity>, IValidatableObject
    {
        /// <summary>
        /// Side of this surface: Front or Back
        /// </summary>
        /// <value>Side of this surface: Front or Back</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum SideEnum
        {
            /// <summary>
            /// Enum Front for value: Front
            /// </summary>
            [EnumMember(Value = "Front")]
            Front = 1,
            /// <summary>
            /// Enum Back for value: Back
            /// </summary>
            [EnumMember(Value = "Back")]
            Back = 2        }
        /// <summary>
        /// Side of this surface: Front or Back
        /// </summary>
        /// <value>Side of this surface: Front or Back</value>
        [DataMember(Name="side", EmitDefaultValue=false)]
        public SideEnum Side { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SurfaceEntity" /> class.
        /// </summary>
        /// <param name="side">Side of this surface: Front or Back (required).</param>
        /// <param name="press">press.</param>
        /// <param name="stock">stock.</param>
        /// <param name="grade">grade.</param>
        /// <param name="sheet">sheet.</param>
        /// <param name="plate">plate.</param>
        /// <param name="items">items.</param>
        /// <param name="inks">List of all inks on this surface.</param>
        /// <param name="thumbnail">thumbnail.</param>
        public SurfaceEntity(SideEnum side = default(SideEnum), LibraryItemEntity press = default(LibraryItemEntity), LibraryItemEntity stock = default(LibraryItemEntity), GradeInfoEntity grade = default(GradeInfoEntity), MediaDimensionsEntity sheet = default(MediaDimensionsEntity), MediaDimensionsEntity plate = default(MediaDimensionsEntity), ItemStatsEntity items = default(ItemStatsEntity), List<InkEntity> inks = default(List<InkEntity>), ThumbnailEntity thumbnail = default(ThumbnailEntity))
        {
            // to ensure "side" is required (not null)
            if (side == null)
            {
                throw new InvalidDataException("side is a required property for SurfaceEntity and cannot be null");
            }
            else
            {
                this.Side = side;
            }
            this.Press = press;
            this.Stock = stock;
            this.Grade = grade;
            this.Sheet = sheet;
            this.Plate = plate;
            this.Items = items;
            this.Inks = inks;
            this.Thumbnail = thumbnail;
        }
        

        /// <summary>
        /// Gets or Sets Press
        /// </summary>
        [DataMember(Name="press", EmitDefaultValue=false)]
        public LibraryItemEntity Press { get; set; }

        /// <summary>
        /// Gets or Sets Stock
        /// </summary>
        [DataMember(Name="stock", EmitDefaultValue=false)]
        public LibraryItemEntity Stock { get; set; }

        /// <summary>
        /// Gets or Sets Grade
        /// </summary>
        [DataMember(Name="grade", EmitDefaultValue=false)]
        public GradeInfoEntity Grade { get; set; }

        /// <summary>
        /// Gets or Sets Sheet
        /// </summary>
        [DataMember(Name="sheet", EmitDefaultValue=false)]
        public MediaDimensionsEntity Sheet { get; set; }

        /// <summary>
        /// Gets or Sets Plate
        /// </summary>
        [DataMember(Name="plate", EmitDefaultValue=false)]
        public MediaDimensionsEntity Plate { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name="items", EmitDefaultValue=false)]
        public ItemStatsEntity Items { get; set; }

        /// <summary>
        /// List of all inks on this surface
        /// </summary>
        /// <value>List of all inks on this surface</value>
        [DataMember(Name="inks", EmitDefaultValue=false)]
        public List<InkEntity> Inks { get; set; }

        /// <summary>
        /// Gets or Sets Thumbnail
        /// </summary>
        [DataMember(Name="thumbnail", EmitDefaultValue=false)]
        public ThumbnailEntity Thumbnail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SurfaceEntity {\n");
            sb.Append("  Side: ").Append(Side).Append("\n");
            sb.Append("  Press: ").Append(Press).Append("\n");
            sb.Append("  Stock: ").Append(Stock).Append("\n");
            sb.Append("  Grade: ").Append(Grade).Append("\n");
            sb.Append("  Sheet: ").Append(Sheet).Append("\n");
            sb.Append("  Plate: ").Append(Plate).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  Inks: ").Append(Inks).Append("\n");
            sb.Append("  Thumbnail: ").Append(Thumbnail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SurfaceEntity);
        }

        /// <summary>
        /// Returns true if SurfaceEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of SurfaceEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SurfaceEntity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Side == input.Side ||
                    (this.Side != null &&
                    this.Side.Equals(input.Side))
                ) && 
                (
                    this.Press == input.Press ||
                    (this.Press != null &&
                    this.Press.Equals(input.Press))
                ) && 
                (
                    this.Stock == input.Stock ||
                    (this.Stock != null &&
                    this.Stock.Equals(input.Stock))
                ) && 
                (
                    this.Grade == input.Grade ||
                    (this.Grade != null &&
                    this.Grade.Equals(input.Grade))
                ) && 
                (
                    this.Sheet == input.Sheet ||
                    (this.Sheet != null &&
                    this.Sheet.Equals(input.Sheet))
                ) && 
                (
                    this.Plate == input.Plate ||
                    (this.Plate != null &&
                    this.Plate.Equals(input.Plate))
                ) && 
                (
                    this.Items == input.Items ||
                    (this.Items != null &&
                    this.Items.Equals(input.Items))
                ) && 
                (
                    this.Inks == input.Inks ||
                    this.Inks != null &&
                    input.Inks != null &&
                    this.Inks.SequenceEqual(input.Inks)
                ) && 
                (
                    this.Thumbnail == input.Thumbnail ||
                    (this.Thumbnail != null &&
                    this.Thumbnail.Equals(input.Thumbnail))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Side != null)
                    hashCode = hashCode * 59 + this.Side.GetHashCode();
                if (this.Press != null)
                    hashCode = hashCode * 59 + this.Press.GetHashCode();
                if (this.Stock != null)
                    hashCode = hashCode * 59 + this.Stock.GetHashCode();
                if (this.Grade != null)
                    hashCode = hashCode * 59 + this.Grade.GetHashCode();
                if (this.Sheet != null)
                    hashCode = hashCode * 59 + this.Sheet.GetHashCode();
                if (this.Plate != null)
                    hashCode = hashCode * 59 + this.Plate.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                if (this.Inks != null)
                    hashCode = hashCode * 59 + this.Inks.GetHashCode();
                if (this.Thumbnail != null)
                    hashCode = hashCode * 59 + this.Thumbnail.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
