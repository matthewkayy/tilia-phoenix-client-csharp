/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Custom tiling where each tile is explicitly defined
    /// </summary>
    [DataContract]
    public partial class CustomTiling : Tiling, IEquatable<CustomTiling>, IValidatableObject
    {
        /// <summary>
        /// Tiling entity type.  &#x27;StandardTiling&#x27; for standard tiling and &#x27;CustomTiling&#x27; for custom tiling types
        /// </summary>
        /// <value>Tiling entity type.  &#x27;StandardTiling&#x27; for standard tiling and &#x27;CustomTiling&#x27; for custom tiling types</value>
        public override TypeEnum Type { get; } = TypeEnum.CustomTiling;
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomTiling" /> class.
        /// </summary>
        /// <param name="name">Name (required).</param>
        /// <param name="description">Description.</param>
        /// <param name="notes">Notes.</param>
        /// <param name="tile">Custom tiles.</param>
        /// <param name="properties">Custom properties.</param>
        /// <param name="path">Path.</param>
        public CustomTiling(string name = default(string), string description = default(string), string notes = default(string), List<Tile> tile = default(List<Tile>), List<PropertyObject> properties = default(List<PropertyObject>), string path = default(string))
            : base(name, description, notes, properties, path)
        {
            this.Tile = tile;
        }
        /// <summary>
        /// Custom tiles
        /// </summary>
        /// <value>Custom tiles</value>
        [DataMember(Name="tile", EmitDefaultValue=false)]
        public List<Tile> Tile { get; set; }
        
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomTiling {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  ModifiedOn: ").Append(ModifiedOn).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Tile: ").Append(Tile).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomTiling);
        }

        /// <summary>
        /// Returns true if CustomTiling instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomTiling to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomTiling input)
        {
            if (input == null)
                return false;

            return base.Equals(input) &&
                (
                    this.Tile == input.Tile ||
                    this.Tile != null &&
                    input.Tile != null &&
                    this.Tile.SequenceEqual(input.Tile)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Tile != null)
                    hashCode = hashCode * 59 + this.Tile.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
