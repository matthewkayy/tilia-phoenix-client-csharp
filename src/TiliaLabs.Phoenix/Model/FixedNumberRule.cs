/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Fixed number of tiles rule
    /// </summary>
    [DataContract]
        public partial class FixedNumberRule : TilingRule, IEquatable<FixedNumberRule>, IValidatableObject
    {
        /// <summary>
        /// Tiling rule type.  &#x27;FixedNumber&#x27; for fixed number rule, &#x27;FixedSize&#x27; for fixed size rule and &#x27;VariableSizes&#x27; for variable sizes rule
        /// </summary>
        /// <value>Tiling rule type.  &#x27;FixedNumber&#x27; for fixed number rule, &#x27;FixedSize&#x27; for fixed size rule and &#x27;VariableSizes&#x27; for variable sizes rule</value>
        public override TypeEnum Type { get; } = TypeEnum.FixedNumber;
        /// <summary>
        /// Initializes a new instance of the <see cref="FixedNumberRule" /> class.
        /// </summary>
        /// <param name="number">Fixed number of tiles to create in the given dimension (required).</param>
        /// <param name="uniformFinalSize">If enabled, tile sizes will be uniform after applying overlap or gap methods to the tile, otherwise tile sizes are uniform before overlap or gap methods are applied.</param>
        public FixedNumberRule(int? number = default(int?), bool? uniformFinalSize = default(bool?))
        {
            // to ensure "number" is required (not null)
            if (number == null)
            {
                throw new InvalidDataException("number is a required property for FixedNumberRule and cannot be null");
            }
            else
            {
                this.Number = number;
            }
            this.UniformFinalSize = uniformFinalSize;
        }
        
        /// <summary>
        /// Fixed number of tiles to create in the given dimension
        /// </summary>
        /// <value>Fixed number of tiles to create in the given dimension</value>
        [DataMember(Name="number", EmitDefaultValue=false)]
        public int? Number { get; set; }

        /// <summary>
        /// If enabled, tile sizes will be uniform after applying overlap or gap methods to the tile, otherwise tile sizes are uniform before overlap or gap methods are applied
        /// </summary>
        /// <value>If enabled, tile sizes will be uniform after applying overlap or gap methods to the tile, otherwise tile sizes are uniform before overlap or gap methods are applied</value>
        [DataMember(Name="uniform-final-size", EmitDefaultValue=false)]
        public bool? UniformFinalSize { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FixedNumberRule {\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  UniformFinalSize: ").Append(UniformFinalSize).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FixedNumberRule);
        }

        /// <summary>
        /// Returns true if FixedNumberRule instances are equal
        /// </summary>
        /// <param name="input">Instance of FixedNumberRule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FixedNumberRule input)
        {
            if (input == null)
                return false;

            return base.Equals(input) &&
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.UniformFinalSize == input.UniformFinalSize ||
                    (this.UniformFinalSize != null &&
                    this.UniformFinalSize.Equals(input.UniformFinalSize))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Number != null)
                    hashCode = hashCode * 59 + this.Number.GetHashCode();
                if (this.UniformFinalSize != null)
                    hashCode = hashCode * 59 + this.UniformFinalSize.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
