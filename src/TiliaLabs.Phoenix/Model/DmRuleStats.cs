/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Die making rule stats
    /// </summary>
    [DataContract]
        public partial class DmRuleStats :  IEquatable<DmRuleStats>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DmRuleStats" /> class.
        /// </summary>
        /// <param name="tool">Tool name (required).</param>
        /// <param name="cost">cost (required).</param>
        /// <param name="length">Total linear tool length (required).</param>
        public DmRuleStats(string tool = default(string), CostInfo cost = default(CostInfo), double? length = default(double?))
        {
            // to ensure "tool" is required (not null)
            if (tool == null)
            {
                throw new InvalidDataException("tool is a required property for DmRuleStats and cannot be null");
            }
            else
            {
                this.Tool = tool;
            }
            // to ensure "cost" is required (not null)
            if (cost == null)
            {
                throw new InvalidDataException("cost is a required property for DmRuleStats and cannot be null");
            }
            else
            {
                this.Cost = cost;
            }
            // to ensure "length" is required (not null)
            if (length == null)
            {
                throw new InvalidDataException("length is a required property for DmRuleStats and cannot be null");
            }
            else
            {
                this.Length = length;
            }
        }
        
        /// <summary>
        /// Tool name
        /// </summary>
        /// <value>Tool name</value>
        [DataMember(Name="tool", EmitDefaultValue=false)]
        public string Tool { get; set; }

        /// <summary>
        /// Gets or Sets Cost
        /// </summary>
        [DataMember(Name="cost", EmitDefaultValue=false)]
        public CostInfo Cost { get; set; }

        /// <summary>
        /// Total linear tool length
        /// </summary>
        /// <value>Total linear tool length</value>
        [DataMember(Name="length", EmitDefaultValue=false)]
        public double? Length { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DmRuleStats {\n");
            sb.Append("  Tool: ").Append(Tool).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DmRuleStats);
        }

        /// <summary>
        /// Returns true if DmRuleStats instances are equal
        /// </summary>
        /// <param name="input">Instance of DmRuleStats to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DmRuleStats input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Tool == input.Tool ||
                    (this.Tool != null &&
                    this.Tool.Equals(input.Tool))
                ) && 
                (
                    this.Cost == input.Cost ||
                    (this.Cost != null &&
                    this.Cost.Equals(input.Cost))
                ) && 
                (
                    this.Length == input.Length ||
                    (this.Length != null &&
                    this.Length.Equals(input.Length))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Tool != null)
                    hashCode = hashCode * 59 + this.Tool.GetHashCode();
                if (this.Cost != null)
                    hashCode = hashCode * 59 + this.Cost.GetHashCode();
                if (this.Length != null)
                    hashCode = hashCode * 59 + this.Length.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
