/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Thing being utilized in the facility and its list of current jobs
    /// </summary>
    [DataContract]
        public partial class FacilityThingObjectObject :  IEquatable<FacilityThingObjectObject>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FacilityThingObjectObject" /> class.
        /// </summary>
        /// <param name="thing">thing.</param>
        /// <param name="jobs">List of all jobs currently queued for processing by this thing.</param>
        public FacilityThingObjectObject(Thing thing = default(Thing), List<ThingJob> jobs = default(List<ThingJob>))
        {
            this.Thing = thing;
            this.Jobs = jobs;
        }
        
        /// <summary>
        /// Gets or Sets Thing
        /// </summary>
        [DataMember(Name="thing", EmitDefaultValue=false)]
        public Thing Thing { get; set; }

        /// <summary>
        /// List of all jobs currently queued for processing by this thing
        /// </summary>
        /// <value>List of all jobs currently queued for processing by this thing</value>
        [DataMember(Name="jobs", EmitDefaultValue=false)]
        public List<ThingJob> Jobs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FacilityThingObjectObject {\n");
            sb.Append("  Thing: ").Append(Thing).Append("\n");
            sb.Append("  Jobs: ").Append(Jobs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FacilityThingObjectObject);
        }

        /// <summary>
        /// Returns true if FacilityThingObjectObject instances are equal
        /// </summary>
        /// <param name="input">Instance of FacilityThingObjectObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FacilityThingObjectObject input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Thing == input.Thing ||
                    (this.Thing != null &&
                    this.Thing.Equals(input.Thing))
                ) && 
                (
                    this.Jobs == input.Jobs ||
                    this.Jobs != null &&
                    input.Jobs != null &&
                    this.Jobs.SequenceEqual(input.Jobs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Thing != null)
                    hashCode = hashCode * 59 + this.Thing.GetHashCode();
                if (this.Jobs != null)
                    hashCode = hashCode * 59 + this.Jobs.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
