/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Thing processing result
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "Type")]
        public partial class Result :  IEquatable<Result>, IValidatableObject
    {
        /// <summary>
        /// Status
        /// </summary>
        /// <value>Status</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StatusEnum
        {
            /// <summary>
            /// Enum Pending for value: Pending
            /// </summary>
            [EnumMember(Value = "Pending")]
            Pending = 1,
            /// <summary>
            /// Enum Success for value: Success
            /// </summary>
            [EnumMember(Value = "Success")]
            Success = 2,
            /// <summary>
            /// Enum Error for value: Error
            /// </summary>
            [EnumMember(Value = "Error")]
            Error = 3        }
        /// <summary>
        /// Status
        /// </summary>
        /// <value>Status</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum SheetFedDigitalPress for value: SheetFedDigitalPress
            /// </summary>
            [EnumMember(Value = "SheetFedDigitalPress")]
            SheetFedDigitalPress = 1,
            /// <summary>
            /// Enum WebFedDigitalPress for value: WebFedDigitalPress
            /// </summary>
            [EnumMember(Value = "WebFedDigitalPress")]
            WebFedDigitalPress = 2,
            /// <summary>
            /// Enum SheetFedOffsetPress for value: SheetFedOffsetPress
            /// </summary>
            [EnumMember(Value = "SheetFedOffsetPress")]
            SheetFedOffsetPress = 3,
            /// <summary>
            /// Enum WebFedOffsetPress for value: WebFedOffsetPress
            /// </summary>
            [EnumMember(Value = "WebFedOffsetPress")]
            WebFedOffsetPress = 4,
            /// <summary>
            /// Enum FlatbedWideFormatPress for value: FlatbedWideFormatPress
            /// </summary>
            [EnumMember(Value = "FlatbedWideFormatPress")]
            FlatbedWideFormatPress = 5,
            /// <summary>
            /// Enum RollFedWideFormatPress for value: RollFedWideFormatPress
            /// </summary>
            [EnumMember(Value = "RollFedWideFormatPress")]
            RollFedWideFormatPress = 6,
            /// <summary>
            /// Enum GuillotineCutter for value: GuillotineCutter
            /// </summary>
            [EnumMember(Value = "GuillotineCutter")]
            GuillotineCutter = 7,
            /// <summary>
            /// Enum FlatbedDieCutter for value: FlatbedDieCutter
            /// </summary>
            [EnumMember(Value = "FlatbedDieCutter")]
            FlatbedDieCutter = 8,
            /// <summary>
            /// Enum DigitalCuttingTable for value: DigitalCuttingTable
            /// </summary>
            [EnumMember(Value = "DigitalCuttingTable")]
            DigitalCuttingTable = 9,
            /// <summary>
            /// Enum DieMaking for value: DieMaking
            /// </summary>
            [EnumMember(Value = "DieMaking")]
            DieMaking = 10        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Result" /> class.
        /// </summary>
        /// <param name="status">Status (required).</param>
        /// <param name="processes">Processes involved.</param>
        /// <param name="time">time.</param>
        /// <param name="cost">cost.</param>
        /// <param name="messages">Messages reported during processing.</param>
        /// <param name="externalMessages">Messages reported by a third-party external estimation engine during processing.</param>
        /// <param name="type">type (required).</param>
        public Result(StatusEnum status = default(StatusEnum), List<string> processes = default(List<string>), TimeInfo time = default(TimeInfo), CostInfo cost = default(CostInfo), List<Message> messages = default(List<Message>), List<Message> externalMessages = default(List<Message>), TypeEnum type = default(TypeEnum))
        {
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for Result and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for Result and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.Processes = processes;
            this.Time = time;
            this.Cost = cost;
            this.Messages = messages;
            this.ExternalMessages = externalMessages;
        }
        

        /// <summary>
        /// Processes involved
        /// </summary>
        /// <value>Processes involved</value>
        [DataMember(Name="processes", EmitDefaultValue=false)]
        public List<string> Processes { get; set; }

        /// <summary>
        /// Gets or Sets Time
        /// </summary>
        [DataMember(Name="time", EmitDefaultValue=false)]
        public TimeInfo Time { get; set; }

        /// <summary>
        /// Gets or Sets Cost
        /// </summary>
        [DataMember(Name="cost", EmitDefaultValue=false)]
        public CostInfo Cost { get; set; }

        /// <summary>
        /// Messages reported during processing
        /// </summary>
        /// <value>Messages reported during processing</value>
        [DataMember(Name="messages", EmitDefaultValue=false)]
        public List<Message> Messages { get; set; }

        /// <summary>
        /// Messages reported by a third-party external estimation engine during processing
        /// </summary>
        /// <value>Messages reported by a third-party external estimation engine during processing</value>
        [DataMember(Name="external-messages", EmitDefaultValue=false)]
        public List<Message> ExternalMessages { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Result {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Processes: ").Append(Processes).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  Messages: ").Append(Messages).Append("\n");
            sb.Append("  ExternalMessages: ").Append(ExternalMessages).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Result);
        }

        /// <summary>
        /// Returns true if Result instances are equal
        /// </summary>
        /// <param name="input">Instance of Result to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Result input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Processes == input.Processes ||
                    this.Processes != null &&
                    input.Processes != null &&
                    this.Processes.SequenceEqual(input.Processes)
                ) && 
                (
                    this.Time == input.Time ||
                    (this.Time != null &&
                    this.Time.Equals(input.Time))
                ) && 
                (
                    this.Cost == input.Cost ||
                    (this.Cost != null &&
                    this.Cost.Equals(input.Cost))
                ) && 
                (
                    this.Messages == input.Messages ||
                    this.Messages != null &&
                    input.Messages != null &&
                    this.Messages.SequenceEqual(input.Messages)
                ) && 
                (
                    this.ExternalMessages == input.ExternalMessages ||
                    this.ExternalMessages != null &&
                    input.ExternalMessages != null &&
                    this.ExternalMessages.SequenceEqual(input.ExternalMessages)
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Processes != null)
                    hashCode = hashCode * 59 + this.Processes.GetHashCode();
                if (this.Time != null)
                    hashCode = hashCode * 59 + this.Time.GetHashCode();
                if (this.Cost != null)
                    hashCode = hashCode * 59 + this.Cost.GetHashCode();
                if (this.Messages != null)
                    hashCode = hashCode * 59 + this.Messages.GetHashCode();
                if (this.ExternalMessages != null)
                    hashCode = hashCode * 59 + this.ExternalMessages.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
