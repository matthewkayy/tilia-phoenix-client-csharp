/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Settings used for creating each layout
    /// </summary>
    [DataContract]
        public partial class LayoutOptionsEntity :  IEquatable<LayoutOptionsEntity>, IValidatableObject
    {
        /// <summary>
        /// Sheet fill
        /// </summary>
        /// <value>Sheet fill</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum SheetFillEnum
        {
            /// <summary>
            /// Enum Balanced for value: Balanced
            /// </summary>
            [EnumMember(Value = "Balanced")]
            Balanced = 1,
            /// <summary>
            /// Enum Min for value: Min
            /// </summary>
            [EnumMember(Value = "Min")]
            Min = 2,
            /// <summary>
            /// Enum Max for value: Max
            /// </summary>
            [EnumMember(Value = "Max")]
            Max = 3        }
        /// <summary>
        /// Sheet fill
        /// </summary>
        /// <value>Sheet fill</value>
        [DataMember(Name="sheet-fill", EmitDefaultValue=false)]
        public SheetFillEnum? SheetFill { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LayoutOptionsEntity" /> class.
        /// </summary>
        /// <param name="sheetFill">Sheet fill.</param>
        /// <param name="limitUniqueProducts">Limit number of unique products per layout.</param>
        /// <param name="allowBleedInGripper">Allow bleed in gripper.</param>
        /// <param name="useDerivedSheets">Use derived sheets.</param>
        /// <param name="orderedPlacement">orderedPlacement.</param>
        public LayoutOptionsEntity(SheetFillEnum? sheetFill = default(SheetFillEnum?), int? limitUniqueProducts = default(int?), bool? allowBleedInGripper = default(bool?), bool? useDerivedSheets = default(bool?), OrderedPlacementEntity orderedPlacement = default(OrderedPlacementEntity))
        {
            this.SheetFill = sheetFill;
            this.LimitUniqueProducts = limitUniqueProducts;
            this.AllowBleedInGripper = allowBleedInGripper;
            this.UseDerivedSheets = useDerivedSheets;
            this.OrderedPlacement = orderedPlacement;
        }
        

        /// <summary>
        /// Limit number of unique products per layout
        /// </summary>
        /// <value>Limit number of unique products per layout</value>
        [DataMember(Name="limit-unique-products", EmitDefaultValue=false)]
        public int? LimitUniqueProducts { get; set; }

        /// <summary>
        /// Allow bleed in gripper
        /// </summary>
        /// <value>Allow bleed in gripper</value>
        [DataMember(Name="allow-bleed-in-gripper", EmitDefaultValue=false)]
        public bool? AllowBleedInGripper { get; set; }

        /// <summary>
        /// Use derived sheets
        /// </summary>
        /// <value>Use derived sheets</value>
        [DataMember(Name="use-derived-sheets", EmitDefaultValue=false)]
        public bool? UseDerivedSheets { get; set; }

        /// <summary>
        /// Gets or Sets OrderedPlacement
        /// </summary>
        [DataMember(Name="ordered-placement", EmitDefaultValue=false)]
        public OrderedPlacementEntity OrderedPlacement { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LayoutOptionsEntity {\n");
            sb.Append("  SheetFill: ").Append(SheetFill).Append("\n");
            sb.Append("  LimitUniqueProducts: ").Append(LimitUniqueProducts).Append("\n");
            sb.Append("  AllowBleedInGripper: ").Append(AllowBleedInGripper).Append("\n");
            sb.Append("  UseDerivedSheets: ").Append(UseDerivedSheets).Append("\n");
            sb.Append("  OrderedPlacement: ").Append(OrderedPlacement).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LayoutOptionsEntity);
        }

        /// <summary>
        /// Returns true if LayoutOptionsEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of LayoutOptionsEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LayoutOptionsEntity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SheetFill == input.SheetFill ||
                    (this.SheetFill != null &&
                    this.SheetFill.Equals(input.SheetFill))
                ) && 
                (
                    this.LimitUniqueProducts == input.LimitUniqueProducts ||
                    (this.LimitUniqueProducts != null &&
                    this.LimitUniqueProducts.Equals(input.LimitUniqueProducts))
                ) && 
                (
                    this.AllowBleedInGripper == input.AllowBleedInGripper ||
                    (this.AllowBleedInGripper != null &&
                    this.AllowBleedInGripper.Equals(input.AllowBleedInGripper))
                ) && 
                (
                    this.UseDerivedSheets == input.UseDerivedSheets ||
                    (this.UseDerivedSheets != null &&
                    this.UseDerivedSheets.Equals(input.UseDerivedSheets))
                ) && 
                (
                    this.OrderedPlacement == input.OrderedPlacement ||
                    (this.OrderedPlacement != null &&
                    this.OrderedPlacement.Equals(input.OrderedPlacement))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SheetFill != null)
                    hashCode = hashCode * 59 + this.SheetFill.GetHashCode();
                if (this.LimitUniqueProducts != null)
                    hashCode = hashCode * 59 + this.LimitUniqueProducts.GetHashCode();
                if (this.AllowBleedInGripper != null)
                    hashCode = hashCode * 59 + this.AllowBleedInGripper.GetHashCode();
                if (this.UseDerivedSheets != null)
                    hashCode = hashCode * 59 + this.UseDerivedSheets.GetHashCode();
                if (this.OrderedPlacement != null)
                    hashCode = hashCode * 59 + this.OrderedPlacement.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
