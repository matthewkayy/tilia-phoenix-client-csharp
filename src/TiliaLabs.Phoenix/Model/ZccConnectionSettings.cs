/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// ZCC connection settings
    /// </summary>
    [DataContract]
        public partial class ZccConnectionSettings :  IEquatable<ZccConnectionSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ZccConnectionSettings" /> class.
        /// </summary>
        /// <param name="hostname">Hostname (required).</param>
        /// <param name="port">Port (required).</param>
        /// <param name="timeout">Timeout (required).</param>
        public ZccConnectionSettings(string hostname = default(string), int? port = default(int?), int? timeout = default(int?))
        {
            // to ensure "hostname" is required (not null)
            if (hostname == null)
            {
                throw new InvalidDataException("hostname is a required property for ZccConnectionSettings and cannot be null");
            }
            else
            {
                this.Hostname = hostname;
            }
            // to ensure "port" is required (not null)
            if (port == null)
            {
                throw new InvalidDataException("port is a required property for ZccConnectionSettings and cannot be null");
            }
            else
            {
                this.Port = port;
            }
            // to ensure "timeout" is required (not null)
            if (timeout == null)
            {
                throw new InvalidDataException("timeout is a required property for ZccConnectionSettings and cannot be null");
            }
            else
            {
                this.Timeout = timeout;
            }
        }
        
        /// <summary>
        /// Hostname
        /// </summary>
        /// <value>Hostname</value>
        [DataMember(Name="hostname", EmitDefaultValue=false)]
        public string Hostname { get; set; }

        /// <summary>
        /// Port
        /// </summary>
        /// <value>Port</value>
        [DataMember(Name="port", EmitDefaultValue=false)]
        public int? Port { get; set; }

        /// <summary>
        /// Timeout
        /// </summary>
        /// <value>Timeout</value>
        [DataMember(Name="timeout", EmitDefaultValue=false)]
        public int? Timeout { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ZccConnectionSettings {\n");
            sb.Append("  Hostname: ").Append(Hostname).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ZccConnectionSettings);
        }

        /// <summary>
        /// Returns true if ZccConnectionSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of ZccConnectionSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ZccConnectionSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Hostname == input.Hostname ||
                    (this.Hostname != null &&
                    this.Hostname.Equals(input.Hostname))
                ) && 
                (
                    this.Port == input.Port ||
                    (this.Port != null &&
                    this.Port.Equals(input.Port))
                ) && 
                (
                    this.Timeout == input.Timeout ||
                    (this.Timeout != null &&
                    this.Timeout.Equals(input.Timeout))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Hostname != null)
                    hashCode = hashCode * 59 + this.Hostname.GetHashCode();
                if (this.Port != null)
                    hashCode = hashCode * 59 + this.Port.GetHashCode();
                if (this.Timeout != null)
                    hashCode = hashCode * 59 + this.Timeout.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
