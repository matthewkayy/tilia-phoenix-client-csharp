/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Project and associated properties, layouts and products
    /// </summary>
    [DataContract]
        public partial class PhoenixProject :  IEquatable<PhoenixProject>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PhoenixProject" /> class.
        /// </summary>
        /// <param name="id">Job ID (required).</param>
        /// <param name="name">Job name.</param>
        /// <param name="contact">Job contact person.</param>
        /// <param name="phone">Job phone number.</param>
        /// <param name="_client">Job client name.</param>
        /// <param name="notes">Job notes.</param>
        /// <param name="units">Job units.</param>
        /// <param name="templatePath">Job template path if job created from template.</param>
        /// <param name="runLength">Total required run length of all layouts in project.</param>
        /// <param name="pressMinutes">Total estimated press time across project.</param>
        /// <param name="plateCost">Total estimated plate costs across project.</param>
        /// <param name="stockCost">Total estimated stock costs across project.</param>
        /// <param name="pressCost">Total estimated press run costs across project.</param>
        /// <param name="dieCost">Total estimated die creation costs across project.</param>
        /// <param name="totalCost">Total project cost.</param>
        /// <param name="waste">Average sheet waste percentage across the project.</param>
        /// <param name="sheetUsage">Average sheet usage percentage across project.</param>
        /// <param name="underrun">Average product underrun percentage across project.</param>
        /// <param name="overrun">Average product overrun percentage across project.</param>
        /// <param name="layoutCount">Number of layouts in the job.</param>
        /// <param name="facility">facility.</param>
        /// <param name="layouts">Layouts in the project.</param>
        /// <param name="products">Products in the project in v1 format.</param>
        /// <param name="products2">Products in the project in v2 format.</param>
        public PhoenixProject(string id = default(string), string name = default(string), string contact = default(string), string phone = default(string), string _client = default(string), string notes = default(string), string units = default(string), string templatePath = default(string), int? runLength = default(int?), float? pressMinutes = default(float?), double? plateCost = default(double?), double? stockCost = default(double?), double? pressCost = default(double?), double? dieCost = default(double?), double? totalCost = default(double?), double? waste = default(double?), double? sheetUsage = default(double?), double? underrun = default(double?), double? overrun = default(double?), int? layoutCount = default(int?), Facility facility = default(Facility), List<PhoenixLayoutEntity> layouts = default(List<PhoenixLayoutEntity>), List<PhoenixProductEntity> products = default(List<PhoenixProductEntity>), List<Product> products2 = default(List<Product>))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for PhoenixProject and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            this.Name = name;
            this.Contact = contact;
            this.Phone = phone;
            this._Client = _client;
            this.Notes = notes;
            this.Units = units;
            this.TemplatePath = templatePath;
            this.RunLength = runLength;
            this.PressMinutes = pressMinutes;
            this.PlateCost = plateCost;
            this.StockCost = stockCost;
            this.PressCost = pressCost;
            this.DieCost = dieCost;
            this.TotalCost = totalCost;
            this.Waste = waste;
            this.SheetUsage = sheetUsage;
            this.Underrun = underrun;
            this.Overrun = overrun;
            this.LayoutCount = layoutCount;
            this.Facility = facility;
            this.Layouts = layouts;
            this.Products = products;
            this.Products2 = products2;
        }
        
        /// <summary>
        /// Job ID
        /// </summary>
        /// <value>Job ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Job name
        /// </summary>
        /// <value>Job name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Job contact person
        /// </summary>
        /// <value>Job contact person</value>
        [DataMember(Name="contact", EmitDefaultValue=false)]
        public string Contact { get; set; }

        /// <summary>
        /// Job phone number
        /// </summary>
        /// <value>Job phone number</value>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }

        /// <summary>
        /// Job client name
        /// </summary>
        /// <value>Job client name</value>
        [DataMember(Name="client", EmitDefaultValue=false)]
        public string _Client { get; set; }

        /// <summary>
        /// Job notes
        /// </summary>
        /// <value>Job notes</value>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// Job units
        /// </summary>
        /// <value>Job units</value>
        [DataMember(Name="units", EmitDefaultValue=false)]
        public string Units { get; set; }

        /// <summary>
        /// Job template path if job created from template
        /// </summary>
        /// <value>Job template path if job created from template</value>
        [DataMember(Name="template-path", EmitDefaultValue=false)]
        public string TemplatePath { get; set; }

        /// <summary>
        /// Total required run length of all layouts in project
        /// </summary>
        /// <value>Total required run length of all layouts in project</value>
        [DataMember(Name="run-length", EmitDefaultValue=false)]
        public int? RunLength { get; set; }

        /// <summary>
        /// Total estimated press time across project
        /// </summary>
        /// <value>Total estimated press time across project</value>
        [DataMember(Name="press-minutes", EmitDefaultValue=false)]
        public float? PressMinutes { get; set; }

        /// <summary>
        /// Total estimated plate costs across project
        /// </summary>
        /// <value>Total estimated plate costs across project</value>
        [DataMember(Name="plate-cost", EmitDefaultValue=false)]
        public double? PlateCost { get; set; }

        /// <summary>
        /// Total estimated stock costs across project
        /// </summary>
        /// <value>Total estimated stock costs across project</value>
        [DataMember(Name="stock-cost", EmitDefaultValue=false)]
        public double? StockCost { get; set; }

        /// <summary>
        /// Total estimated press run costs across project
        /// </summary>
        /// <value>Total estimated press run costs across project</value>
        [DataMember(Name="press-cost", EmitDefaultValue=false)]
        public double? PressCost { get; set; }

        /// <summary>
        /// Total estimated die creation costs across project
        /// </summary>
        /// <value>Total estimated die creation costs across project</value>
        [DataMember(Name="die-cost", EmitDefaultValue=false)]
        public double? DieCost { get; set; }

        /// <summary>
        /// Total project cost
        /// </summary>
        /// <value>Total project cost</value>
        [DataMember(Name="total-cost", EmitDefaultValue=false)]
        public double? TotalCost { get; set; }

        /// <summary>
        /// Average sheet waste percentage across the project
        /// </summary>
        /// <value>Average sheet waste percentage across the project</value>
        [DataMember(Name="waste", EmitDefaultValue=false)]
        public double? Waste { get; set; }

        /// <summary>
        /// Average sheet usage percentage across project
        /// </summary>
        /// <value>Average sheet usage percentage across project</value>
        [DataMember(Name="sheet-usage", EmitDefaultValue=false)]
        public double? SheetUsage { get; set; }

        /// <summary>
        /// Average product underrun percentage across project
        /// </summary>
        /// <value>Average product underrun percentage across project</value>
        [DataMember(Name="underrun", EmitDefaultValue=false)]
        public double? Underrun { get; set; }

        /// <summary>
        /// Average product overrun percentage across project
        /// </summary>
        /// <value>Average product overrun percentage across project</value>
        [DataMember(Name="overrun", EmitDefaultValue=false)]
        public double? Overrun { get; set; }

        /// <summary>
        /// Number of layouts in the job
        /// </summary>
        /// <value>Number of layouts in the job</value>
        [DataMember(Name="layout-count", EmitDefaultValue=false)]
        public int? LayoutCount { get; set; }

        /// <summary>
        /// Gets or Sets Facility
        /// </summary>
        [DataMember(Name="facility", EmitDefaultValue=false)]
        public Facility Facility { get; set; }

        /// <summary>
        /// Layouts in the project
        /// </summary>
        /// <value>Layouts in the project</value>
        [DataMember(Name="layouts", EmitDefaultValue=false)]
        public List<PhoenixLayoutEntity> Layouts { get; set; }

        /// <summary>
        /// Products in the project in v1 format
        /// </summary>
        /// <value>Products in the project in v1 format</value>
        [DataMember(Name="products", EmitDefaultValue=false)]
        public List<PhoenixProductEntity> Products { get; set; }

        /// <summary>
        /// Products in the project in v2 format
        /// </summary>
        /// <value>Products in the project in v2 format</value>
        [DataMember(Name="products2", EmitDefaultValue=false)]
        public List<Product> Products2 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PhoenixProject {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  _Client: ").Append(_Client).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Units: ").Append(Units).Append("\n");
            sb.Append("  TemplatePath: ").Append(TemplatePath).Append("\n");
            sb.Append("  RunLength: ").Append(RunLength).Append("\n");
            sb.Append("  PressMinutes: ").Append(PressMinutes).Append("\n");
            sb.Append("  PlateCost: ").Append(PlateCost).Append("\n");
            sb.Append("  StockCost: ").Append(StockCost).Append("\n");
            sb.Append("  PressCost: ").Append(PressCost).Append("\n");
            sb.Append("  DieCost: ").Append(DieCost).Append("\n");
            sb.Append("  TotalCost: ").Append(TotalCost).Append("\n");
            sb.Append("  Waste: ").Append(Waste).Append("\n");
            sb.Append("  SheetUsage: ").Append(SheetUsage).Append("\n");
            sb.Append("  Underrun: ").Append(Underrun).Append("\n");
            sb.Append("  Overrun: ").Append(Overrun).Append("\n");
            sb.Append("  LayoutCount: ").Append(LayoutCount).Append("\n");
            sb.Append("  Facility: ").Append(Facility).Append("\n");
            sb.Append("  Layouts: ").Append(Layouts).Append("\n");
            sb.Append("  Products: ").Append(Products).Append("\n");
            sb.Append("  Products2: ").Append(Products2).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PhoenixProject);
        }

        /// <summary>
        /// Returns true if PhoenixProject instances are equal
        /// </summary>
        /// <param name="input">Instance of PhoenixProject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PhoenixProject input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Contact == input.Contact ||
                    (this.Contact != null &&
                    this.Contact.Equals(input.Contact))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this._Client == input._Client ||
                    (this._Client != null &&
                    this._Client.Equals(input._Client))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.Units == input.Units ||
                    (this.Units != null &&
                    this.Units.Equals(input.Units))
                ) && 
                (
                    this.TemplatePath == input.TemplatePath ||
                    (this.TemplatePath != null &&
                    this.TemplatePath.Equals(input.TemplatePath))
                ) && 
                (
                    this.RunLength == input.RunLength ||
                    (this.RunLength != null &&
                    this.RunLength.Equals(input.RunLength))
                ) && 
                (
                    this.PressMinutes == input.PressMinutes ||
                    (this.PressMinutes != null &&
                    this.PressMinutes.Equals(input.PressMinutes))
                ) && 
                (
                    this.PlateCost == input.PlateCost ||
                    (this.PlateCost != null &&
                    this.PlateCost.Equals(input.PlateCost))
                ) && 
                (
                    this.StockCost == input.StockCost ||
                    (this.StockCost != null &&
                    this.StockCost.Equals(input.StockCost))
                ) && 
                (
                    this.PressCost == input.PressCost ||
                    (this.PressCost != null &&
                    this.PressCost.Equals(input.PressCost))
                ) && 
                (
                    this.DieCost == input.DieCost ||
                    (this.DieCost != null &&
                    this.DieCost.Equals(input.DieCost))
                ) && 
                (
                    this.TotalCost == input.TotalCost ||
                    (this.TotalCost != null &&
                    this.TotalCost.Equals(input.TotalCost))
                ) && 
                (
                    this.Waste == input.Waste ||
                    (this.Waste != null &&
                    this.Waste.Equals(input.Waste))
                ) && 
                (
                    this.SheetUsage == input.SheetUsage ||
                    (this.SheetUsage != null &&
                    this.SheetUsage.Equals(input.SheetUsage))
                ) && 
                (
                    this.Underrun == input.Underrun ||
                    (this.Underrun != null &&
                    this.Underrun.Equals(input.Underrun))
                ) && 
                (
                    this.Overrun == input.Overrun ||
                    (this.Overrun != null &&
                    this.Overrun.Equals(input.Overrun))
                ) && 
                (
                    this.LayoutCount == input.LayoutCount ||
                    (this.LayoutCount != null &&
                    this.LayoutCount.Equals(input.LayoutCount))
                ) && 
                (
                    this.Facility == input.Facility ||
                    (this.Facility != null &&
                    this.Facility.Equals(input.Facility))
                ) && 
                (
                    this.Layouts == input.Layouts ||
                    this.Layouts != null &&
                    input.Layouts != null &&
                    this.Layouts.SequenceEqual(input.Layouts)
                ) && 
                (
                    this.Products == input.Products ||
                    this.Products != null &&
                    input.Products != null &&
                    this.Products.SequenceEqual(input.Products)
                ) && 
                (
                    this.Products2 == input.Products2 ||
                    this.Products2 != null &&
                    input.Products2 != null &&
                    this.Products2.SequenceEqual(input.Products2)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Contact != null)
                    hashCode = hashCode * 59 + this.Contact.GetHashCode();
                if (this.Phone != null)
                    hashCode = hashCode * 59 + this.Phone.GetHashCode();
                if (this._Client != null)
                    hashCode = hashCode * 59 + this._Client.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                if (this.Units != null)
                    hashCode = hashCode * 59 + this.Units.GetHashCode();
                if (this.TemplatePath != null)
                    hashCode = hashCode * 59 + this.TemplatePath.GetHashCode();
                if (this.RunLength != null)
                    hashCode = hashCode * 59 + this.RunLength.GetHashCode();
                if (this.PressMinutes != null)
                    hashCode = hashCode * 59 + this.PressMinutes.GetHashCode();
                if (this.PlateCost != null)
                    hashCode = hashCode * 59 + this.PlateCost.GetHashCode();
                if (this.StockCost != null)
                    hashCode = hashCode * 59 + this.StockCost.GetHashCode();
                if (this.PressCost != null)
                    hashCode = hashCode * 59 + this.PressCost.GetHashCode();
                if (this.DieCost != null)
                    hashCode = hashCode * 59 + this.DieCost.GetHashCode();
                if (this.TotalCost != null)
                    hashCode = hashCode * 59 + this.TotalCost.GetHashCode();
                if (this.Waste != null)
                    hashCode = hashCode * 59 + this.Waste.GetHashCode();
                if (this.SheetUsage != null)
                    hashCode = hashCode * 59 + this.SheetUsage.GetHashCode();
                if (this.Underrun != null)
                    hashCode = hashCode * 59 + this.Underrun.GetHashCode();
                if (this.Overrun != null)
                    hashCode = hashCode * 59 + this.Overrun.GetHashCode();
                if (this.LayoutCount != null)
                    hashCode = hashCode * 59 + this.LayoutCount.GetHashCode();
                if (this.Facility != null)
                    hashCode = hashCode * 59 + this.Facility.GetHashCode();
                if (this.Layouts != null)
                    hashCode = hashCode * 59 + this.Layouts.GetHashCode();
                if (this.Products != null)
                    hashCode = hashCode * 59 + this.Products.GetHashCode();
                if (this.Products2 != null)
                    hashCode = hashCode * 59 + this.Products2.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
