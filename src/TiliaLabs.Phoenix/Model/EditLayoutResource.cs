/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Edit layout action resource
    /// </summary>
    [DataContract]
        public partial class EditLayoutResource :  IEquatable<EditLayoutResource>, IValidatableObject
    {
        /// <summary>
        /// Workstyle of layout, when specified changes workstyle
        /// </summary>
        /// <value>Workstyle of layout, when specified changes workstyle</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum WorkstyleEnum
        {
            /// <summary>
            /// Enum FlatWork for value: FlatWork
            /// </summary>
            [EnumMember(Value = "FlatWork")]
            FlatWork = 1,
            /// <summary>
            /// Enum Sheetwise for value: Sheetwise
            /// </summary>
            [EnumMember(Value = "Sheetwise")]
            Sheetwise = 2,
            /// <summary>
            /// Enum Perfecting for value: Perfecting
            /// </summary>
            [EnumMember(Value = "Perfecting")]
            Perfecting = 3        }
        /// <summary>
        /// Workstyle of layout, when specified changes workstyle
        /// </summary>
        /// <value>Workstyle of layout, when specified changes workstyle</value>
        [DataMember(Name="workstyle", EmitDefaultValue=false)]
        public WorkstyleEnum? Workstyle { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EditLayoutResource" /> class.
        /// </summary>
        /// <param name="idref">ID of action resource is being applied to (Hot Folders only).</param>
        /// <param name="name">Layout name, when specified edits current layout name.</param>
        /// <param name="workstyle">Workstyle of layout, when specified changes workstyle.</param>
        /// <param name="runLength">Layout run length, when specified overrides current layout run length.</param>
        public EditLayoutResource(int? idref = default(int?), string name = default(string), WorkstyleEnum? workstyle = default(WorkstyleEnum?), int? runLength = default(int?))
        {
            this.Idref = idref;
            this.Name = name;
            this.Workstyle = workstyle;
            this.RunLength = runLength;
        }
        
        /// <summary>
        /// ID of action resource is being applied to (Hot Folders only)
        /// </summary>
        /// <value>ID of action resource is being applied to (Hot Folders only)</value>
        [DataMember(Name="idref", EmitDefaultValue=false)]
        public int? Idref { get; set; }

        /// <summary>
        /// Layout name, when specified edits current layout name
        /// </summary>
        /// <value>Layout name, when specified edits current layout name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }


        /// <summary>
        /// Layout run length, when specified overrides current layout run length
        /// </summary>
        /// <value>Layout run length, when specified overrides current layout run length</value>
        [DataMember(Name="run-length", EmitDefaultValue=false)]
        public int? RunLength { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EditLayoutResource {\n");
            sb.Append("  Idref: ").Append(Idref).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Workstyle: ").Append(Workstyle).Append("\n");
            sb.Append("  RunLength: ").Append(RunLength).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EditLayoutResource);
        }

        /// <summary>
        /// Returns true if EditLayoutResource instances are equal
        /// </summary>
        /// <param name="input">Instance of EditLayoutResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EditLayoutResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Idref == input.Idref ||
                    (this.Idref != null &&
                    this.Idref.Equals(input.Idref))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Workstyle == input.Workstyle ||
                    (this.Workstyle != null &&
                    this.Workstyle.Equals(input.Workstyle))
                ) && 
                (
                    this.RunLength == input.RunLength ||
                    (this.RunLength != null &&
                    this.RunLength.Equals(input.RunLength))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Idref != null)
                    hashCode = hashCode * 59 + this.Idref.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Workstyle != null)
                    hashCode = hashCode * 59 + this.Workstyle.GetHashCode();
                if (this.RunLength != null)
                    hashCode = hashCode * 59 + this.RunLength.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
