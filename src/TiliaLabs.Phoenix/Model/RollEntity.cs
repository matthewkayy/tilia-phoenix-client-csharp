/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Roll library item
    /// </summary>
    [DataContract]
        public partial class RollEntity :  IEquatable<RollEntity>, IValidatableObject
    {
        /// <summary>
        /// Cost unit type of this roll when not defined from grade
        /// </summary>
        /// <value>Cost unit type of this roll when not defined from grade</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum CostUnitsEnum
        {
            /// <summary>
            /// Enum FromGrade for value: FromGrade
            /// </summary>
            [EnumMember(Value = "FromGrade")]
            FromGrade = 1,
            /// <summary>
            /// Enum PerSheet for value: PerSheet
            /// </summary>
            [EnumMember(Value = "PerSheet")]
            PerSheet = 2,
            /// <summary>
            /// Enum Per500Sheets for value: Per500Sheets
            /// </summary>
            [EnumMember(Value = "Per500Sheets")]
            Per500Sheets = 3,
            /// <summary>
            /// Enum Per1000Sheets for value: Per1000Sheets
            /// </summary>
            [EnumMember(Value = "Per1000Sheets")]
            Per1000Sheets = 4,
            /// <summary>
            /// Enum PerLb for value: PerLb
            /// </summary>
            [EnumMember(Value = "PerLb")]
            PerLb = 5,
            /// <summary>
            /// Enum Per500Lb for value: Per500Lb
            /// </summary>
            [EnumMember(Value = "Per500Lb")]
            Per500Lb = 6,
            /// <summary>
            /// Enum Per1000Lb for value: Per1000Lb
            /// </summary>
            [EnumMember(Value = "Per1000Lb")]
            Per1000Lb = 7,
            /// <summary>
            /// Enum PerKg for value: PerKg
            /// </summary>
            [EnumMember(Value = "PerKg")]
            PerKg = 8,
            /// <summary>
            /// Enum Per1000Kg for value: Per1000Kg
            /// </summary>
            [EnumMember(Value = "Per1000Kg")]
            Per1000Kg = 9,
            /// <summary>
            /// Enum PerFt2 for value: PerFt2
            /// </summary>
            [EnumMember(Value = "PerFt2")]
            PerFt2 = 10,
            /// <summary>
            /// Enum PerM2 for value: PerM2
            /// </summary>
            [EnumMember(Value = "PerM2")]
            PerM2 = 11,
            /// <summary>
            /// Enum PerFt for value: PerFt
            /// </summary>
            [EnumMember(Value = "PerFt")]
            PerFt = 12,
            /// <summary>
            /// Enum PerM for value: PerM
            /// </summary>
            [EnumMember(Value = "PerM")]
            PerM = 13        }
        /// <summary>
        /// Cost unit type of this roll when not defined from grade
        /// </summary>
        /// <value>Cost unit type of this roll when not defined from grade</value>
        [DataMember(Name="cost-units", EmitDefaultValue=false)]
        public CostUnitsEnum? CostUnits { get; set; }
        /// <summary>
        /// The grain of this roll.  Grain defaults to AlongRoll when not specified.
        /// </summary>
        /// <value>The grain of this roll.  Grain defaults to AlongRoll when not specified.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum GrainEnum
        {
            /// <summary>
            /// Enum AlongRoll for value: AlongRoll
            /// </summary>
            [EnumMember(Value = "AlongRoll")]
            AlongRoll = 1,
            /// <summary>
            /// Enum AcrossRoll for value: AcrossRoll
            /// </summary>
            [EnumMember(Value = "AcrossRoll")]
            AcrossRoll = 2,
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 3        }
        /// <summary>
        /// The grain of this roll.  Grain defaults to AlongRoll when not specified.
        /// </summary>
        /// <value>The grain of this roll.  Grain defaults to AlongRoll when not specified.</value>
        [DataMember(Name="grain", EmitDefaultValue=false)]
        public GrainEnum? Grain { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RollEntity" /> class.
        /// </summary>
        /// <param name="name">Name of library item (required).</param>
        /// <param name="id">Unique ID of this item (auto-generated, read-only).</param>
        /// <param name="externalId">Optional external ID of media item.</param>
        /// <param name="description">Asset description.</param>
        /// <param name="stockId">ID of the stock of this roll.</param>
        /// <param name="gradeId">ID of the grade of this roll.</param>
        /// <param name="width">Roll width (required).</param>
        /// <param name="cost">Cost of this roll when cost not defined from grade.</param>
        /// <param name="costUnits">Cost unit type of this roll when not defined from grade.</param>
        /// <param name="grain">The grain of this roll.  Grain defaults to AlongRoll when not specified..</param>
        public RollEntity(string name = default(string), string id = default(string), string externalId = default(string), string description = default(string), string stockId = default(string), string gradeId = default(string), string width = default(string), double? cost = default(double?), CostUnitsEnum? costUnits = default(CostUnitsEnum?), GrainEnum? grain = default(GrainEnum?))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for RollEntity and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "width" is required (not null)
            if (width == null)
            {
                throw new InvalidDataException("width is a required property for RollEntity and cannot be null");
            }
            else
            {
                this.Width = width;
            }
            this.Id = id;
            this.ExternalId = externalId;
            this.Description = description;
            this.StockId = stockId;
            this.GradeId = gradeId;
            this.Cost = cost;
            this.CostUnits = costUnits;
            this.Grain = grain;
        }
        
        /// <summary>
        /// Name of library item
        /// </summary>
        /// <value>Name of library item</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Unique ID of this item (auto-generated, read-only)
        /// </summary>
        /// <value>Unique ID of this item (auto-generated, read-only)</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Optional external ID of media item
        /// </summary>
        /// <value>Optional external ID of media item</value>
        [DataMember(Name="external-id", EmitDefaultValue=false)]
        public string ExternalId { get; set; }

        /// <summary>
        /// Asset description
        /// </summary>
        /// <value>Asset description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// ID of the stock of this roll
        /// </summary>
        /// <value>ID of the stock of this roll</value>
        [DataMember(Name="stock-id", EmitDefaultValue=false)]
        public string StockId { get; set; }

        /// <summary>
        /// ID of the grade of this roll
        /// </summary>
        /// <value>ID of the grade of this roll</value>
        [DataMember(Name="grade-id", EmitDefaultValue=false)]
        public string GradeId { get; set; }

        /// <summary>
        /// Roll width
        /// </summary>
        /// <value>Roll width</value>
        [DataMember(Name="width", EmitDefaultValue=false)]
        public string Width { get; set; }

        /// <summary>
        /// Cost of this roll when cost not defined from grade
        /// </summary>
        /// <value>Cost of this roll when cost not defined from grade</value>
        [DataMember(Name="cost", EmitDefaultValue=false)]
        public double? Cost { get; set; }



        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RollEntity {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  StockId: ").Append(StockId).Append("\n");
            sb.Append("  GradeId: ").Append(GradeId).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  CostUnits: ").Append(CostUnits).Append("\n");
            sb.Append("  Grain: ").Append(Grain).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RollEntity);
        }

        /// <summary>
        /// Returns true if RollEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of RollEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RollEntity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.StockId == input.StockId ||
                    (this.StockId != null &&
                    this.StockId.Equals(input.StockId))
                ) && 
                (
                    this.GradeId == input.GradeId ||
                    (this.GradeId != null &&
                    this.GradeId.Equals(input.GradeId))
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                ) && 
                (
                    this.Cost == input.Cost ||
                    (this.Cost != null &&
                    this.Cost.Equals(input.Cost))
                ) && 
                (
                    this.CostUnits == input.CostUnits ||
                    (this.CostUnits != null &&
                    this.CostUnits.Equals(input.CostUnits))
                ) && 
                (
                    this.Grain == input.Grain ||
                    (this.Grain != null &&
                    this.Grain.Equals(input.Grain))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ExternalId != null)
                    hashCode = hashCode * 59 + this.ExternalId.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.StockId != null)
                    hashCode = hashCode * 59 + this.StockId.GetHashCode();
                if (this.GradeId != null)
                    hashCode = hashCode * 59 + this.GradeId.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                if (this.Cost != null)
                    hashCode = hashCode * 59 + this.Cost.GetHashCode();
                if (this.CostUnits != null)
                    hashCode = hashCode * 59 + this.CostUnits.GetHashCode();
                if (this.Grain != null)
                    hashCode = hashCode * 59 + this.Grain.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
