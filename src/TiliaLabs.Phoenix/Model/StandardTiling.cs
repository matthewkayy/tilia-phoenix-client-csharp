/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Standard rule-based tiling
    /// </summary>
    [DataContract]
        public partial class StandardTiling :  IEquatable<StandardTiling>, IValidatableObject
    {
        /// <summary>
        /// Starting corner for tile placement order
        /// </summary>
        /// <value>Starting corner for tile placement order</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StartEnum
        {
            /// <summary>
            /// Enum TopLeft for value: Top Left
            /// </summary>
            [EnumMember(Value = "Top Left")]
            TopLeft = 1,
            /// <summary>
            /// Enum TopRight for value: Top Right
            /// </summary>
            [EnumMember(Value = "Top Right")]
            TopRight = 2,
            /// <summary>
            /// Enum BottomLeft for value: Bottom Left
            /// </summary>
            [EnumMember(Value = "Bottom Left")]
            BottomLeft = 3,
            /// <summary>
            /// Enum BottomRight for value: Bottom Right
            /// </summary>
            [EnumMember(Value = "Bottom Right")]
            BottomRight = 4        }
        /// <summary>
        /// Starting corner for tile placement order
        /// </summary>
        /// <value>Starting corner for tile placement order</value>
        [DataMember(Name="start", EmitDefaultValue=false)]
        public StartEnum? Start { get; set; }
        /// <summary>
        /// Order rule to use from start corner to define tile placement order
        /// </summary>
        /// <value>Order rule to use from start corner to define tile placement order</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum OrderEnum
        {
            /// <summary>
            /// Enum SnakingVertical for value: Snaking Vertical
            /// </summary>
            [EnumMember(Value = "Snaking Vertical")]
            SnakingVertical = 1,
            /// <summary>
            /// Enum SnakingHorizontal for value: Snaking Horizontal
            /// </summary>
            [EnumMember(Value = "Snaking Horizontal")]
            SnakingHorizontal = 2,
            /// <summary>
            /// Enum ZigzagVertical for value: Zigzag Vertical
            /// </summary>
            [EnumMember(Value = "Zigzag Vertical")]
            ZigzagVertical = 3,
            /// <summary>
            /// Enum ZigzagHorizontal for value: Zigzag Horizontal
            /// </summary>
            [EnumMember(Value = "Zigzag Horizontal")]
            ZigzagHorizontal = 4        }
        /// <summary>
        /// Order rule to use from start corner to define tile placement order
        /// </summary>
        /// <value>Order rule to use from start corner to define tile placement order</value>
        [DataMember(Name="order", EmitDefaultValue=false)]
        public OrderEnum? Order { get; set; }
        /// <summary>
        /// Tiling entity type.  &#x27;StandardTiling&#x27; for standard tiling and &#x27;CustomTiling&#x27; for custom tiling types
        /// </summary>
        /// <value>Tiling entity type.  &#x27;StandardTiling&#x27; for standard tiling and &#x27;CustomTiling&#x27; for custom tiling types</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum Standard for value: Standard
            /// </summary>
            [EnumMember(Value = "Standard")]
            Standard = 1,
            /// <summary>
            /// Enum Custom for value: Custom
            /// </summary>
            [EnumMember(Value = "Custom")]
            Custom = 2        }
        /// <summary>
        /// Tiling entity type.  &#x27;StandardTiling&#x27; for standard tiling and &#x27;CustomTiling&#x27; for custom tiling types
        /// </summary>
        /// <value>Tiling entity type.  &#x27;StandardTiling&#x27; for standard tiling and &#x27;CustomTiling&#x27; for custom tiling types</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="StandardTiling" /> class.
        /// </summary>
        /// <param name="name">Name (required).</param>
        /// <param name="description">Description.</param>
        /// <param name="notes">Notes.</param>
        /// <param name="start">Starting corner for tile placement order.</param>
        /// <param name="order">Order rule to use from start corner to define tile placement order.</param>
        /// <param name="horizontalRule">horizontalRule.</param>
        /// <param name="horizontalMethod">horizontalMethod.</param>
        /// <param name="verticalRule">verticalRule.</param>
        /// <param name="verticalMethod">verticalMethod.</param>
        /// <param name="type">Tiling entity type.  &#x27;StandardTiling&#x27; for standard tiling and &#x27;CustomTiling&#x27; for custom tiling types (required).</param>
        /// <param name="properties">Custom properties.</param>
        /// <param name="path">Path.</param>
        public StandardTiling(string name = default(string), string description = default(string), string notes = default(string), StartEnum? start = default(StartEnum?), OrderEnum? order = default(OrderEnum?), TilingRule horizontalRule = default(TilingRule), TilingMethod horizontalMethod = default(TilingMethod), TilingRule verticalRule = default(TilingRule), TilingMethod verticalMethod = default(TilingMethod), TypeEnum type = default(TypeEnum), List<PropertyObject> properties = default(List<PropertyObject>), string path = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for StandardTiling and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for StandardTiling and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.Description = description;
            this.Notes = notes;
            this.Start = start;
            this.Order = order;
            this.HorizontalRule = horizontalRule;
            this.HorizontalMethod = horizontalMethod;
            this.VerticalRule = verticalRule;
            this.VerticalMethod = verticalMethod;
            this.Properties = properties;
            this.Path = path;
        }
        
        /// <summary>
        /// Unique ID
        /// </summary>
        /// <value>Unique ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; private set; }

        /// <summary>
        /// Name
        /// </summary>
        /// <value>Name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Created On
        /// </summary>
        /// <value>Created On</value>
        [DataMember(Name="created-on", EmitDefaultValue=false)]
        public DateTime? CreatedOn { get; private set; }

        /// <summary>
        /// Modified On
        /// </summary>
        /// <value>Modified On</value>
        [DataMember(Name="modified-on", EmitDefaultValue=false)]
        public DateTime? ModifiedOn { get; private set; }

        /// <summary>
        /// Version
        /// </summary>
        /// <value>Version</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; private set; }

        /// <summary>
        /// Description
        /// </summary>
        /// <value>Description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Notes
        /// </summary>
        /// <value>Notes</value>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }



        /// <summary>
        /// Gets or Sets HorizontalRule
        /// </summary>
        [DataMember(Name="horizontal-rule", EmitDefaultValue=false)]
        public TilingRule HorizontalRule { get; set; }

        /// <summary>
        /// Gets or Sets HorizontalMethod
        /// </summary>
        [DataMember(Name="horizontal-method", EmitDefaultValue=false)]
        public TilingMethod HorizontalMethod { get; set; }

        /// <summary>
        /// Gets or Sets VerticalRule
        /// </summary>
        [DataMember(Name="vertical-rule", EmitDefaultValue=false)]
        public TilingRule VerticalRule { get; set; }

        /// <summary>
        /// Gets or Sets VerticalMethod
        /// </summary>
        [DataMember(Name="vertical-method", EmitDefaultValue=false)]
        public TilingMethod VerticalMethod { get; set; }


        /// <summary>
        /// Custom properties
        /// </summary>
        /// <value>Custom properties</value>
        [DataMember(Name="properties", EmitDefaultValue=false)]
        public List<PropertyObject> Properties { get; set; }

        /// <summary>
        /// Path
        /// </summary>
        /// <value>Path</value>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StandardTiling {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  ModifiedOn: ").Append(ModifiedOn).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  HorizontalRule: ").Append(HorizontalRule).Append("\n");
            sb.Append("  HorizontalMethod: ").Append(HorizontalMethod).Append("\n");
            sb.Append("  VerticalRule: ").Append(VerticalRule).Append("\n");
            sb.Append("  VerticalMethod: ").Append(VerticalMethod).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StandardTiling);
        }

        /// <summary>
        /// Returns true if StandardTiling instances are equal
        /// </summary>
        /// <param name="input">Instance of StandardTiling to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StandardTiling input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CreatedOn == input.CreatedOn ||
                    (this.CreatedOn != null &&
                    this.CreatedOn.Equals(input.CreatedOn))
                ) && 
                (
                    this.ModifiedOn == input.ModifiedOn ||
                    (this.ModifiedOn != null &&
                    this.ModifiedOn.Equals(input.ModifiedOn))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.Start == input.Start ||
                    (this.Start != null &&
                    this.Start.Equals(input.Start))
                ) && 
                (
                    this.Order == input.Order ||
                    (this.Order != null &&
                    this.Order.Equals(input.Order))
                ) && 
                (
                    this.HorizontalRule == input.HorizontalRule ||
                    (this.HorizontalRule != null &&
                    this.HorizontalRule.Equals(input.HorizontalRule))
                ) && 
                (
                    this.HorizontalMethod == input.HorizontalMethod ||
                    (this.HorizontalMethod != null &&
                    this.HorizontalMethod.Equals(input.HorizontalMethod))
                ) && 
                (
                    this.VerticalRule == input.VerticalRule ||
                    (this.VerticalRule != null &&
                    this.VerticalRule.Equals(input.VerticalRule))
                ) && 
                (
                    this.VerticalMethod == input.VerticalMethod ||
                    (this.VerticalMethod != null &&
                    this.VerticalMethod.Equals(input.VerticalMethod))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.CreatedOn != null)
                    hashCode = hashCode * 59 + this.CreatedOn.GetHashCode();
                if (this.ModifiedOn != null)
                    hashCode = hashCode * 59 + this.ModifiedOn.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                if (this.Start != null)
                    hashCode = hashCode * 59 + this.Start.GetHashCode();
                if (this.Order != null)
                    hashCode = hashCode * 59 + this.Order.GetHashCode();
                if (this.HorizontalRule != null)
                    hashCode = hashCode * 59 + this.HorizontalRule.GetHashCode();
                if (this.HorizontalMethod != null)
                    hashCode = hashCode * 59 + this.HorizontalMethod.GetHashCode();
                if (this.VerticalRule != null)
                    hashCode = hashCode * 59 + this.VerticalRule.GetHashCode();
                if (this.VerticalMethod != null)
                    hashCode = hashCode * 59 + this.VerticalMethod.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Properties != null)
                    hashCode = hashCode * 59 + this.Properties.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
