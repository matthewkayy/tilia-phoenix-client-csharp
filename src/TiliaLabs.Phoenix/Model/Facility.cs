/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Project facility
    /// </summary>
    [DataContract]
        public partial class Facility :  IEquatable<Facility>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Facility" /> class.
        /// </summary>
        /// <param name="trails">Job trails which contain one or more layouts and the list of things that are processing them.</param>
        /// <param name="stats">stats (required).</param>
        public Facility(List<JobTrail> trails = default(List<JobTrail>), FacilityStats stats = default(FacilityStats))
        {
            // to ensure "stats" is required (not null)
            if (stats == null)
            {
                throw new InvalidDataException("stats is a required property for Facility and cannot be null");
            }
            else
            {
                this.Stats = stats;
            }
            this.Trails = trails;
        }
        
        /// <summary>
        /// Job trails which contain one or more layouts and the list of things that are processing them
        /// </summary>
        /// <value>Job trails which contain one or more layouts and the list of things that are processing them</value>
        [DataMember(Name="trails", EmitDefaultValue=false)]
        public List<JobTrail> Trails { get; set; }

        /// <summary>
        /// List of all things being actively used in one or more job trails in this facility
        /// </summary>
        /// <value>List of all things being actively used in one or more job trails in this facility</value>
        [DataMember(Name="things", EmitDefaultValue=false)]
        public List<FacilityThingObjectObject> Things { get; private set; }

        /// <summary>
        /// Gets or Sets Stats
        /// </summary>
        [DataMember(Name="stats", EmitDefaultValue=false)]
        public FacilityStats Stats { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Facility {\n");
            sb.Append("  Trails: ").Append(Trails).Append("\n");
            sb.Append("  Things: ").Append(Things).Append("\n");
            sb.Append("  Stats: ").Append(Stats).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Facility);
        }

        /// <summary>
        /// Returns true if Facility instances are equal
        /// </summary>
        /// <param name="input">Instance of Facility to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Facility input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Trails == input.Trails ||
                    this.Trails != null &&
                    input.Trails != null &&
                    this.Trails.SequenceEqual(input.Trails)
                ) && 
                (
                    this.Things == input.Things ||
                    this.Things != null &&
                    input.Things != null &&
                    this.Things.SequenceEqual(input.Things)
                ) && 
                (
                    this.Stats == input.Stats ||
                    (this.Stats != null &&
                    this.Stats.Equals(input.Stats))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Trails != null)
                    hashCode = hashCode * 59 + this.Trails.GetHashCode();
                if (this.Things != null)
                    hashCode = hashCode * 59 + this.Things.GetHashCode();
                if (this.Stats != null)
                    hashCode = hashCode * 59 + this.Stats.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
