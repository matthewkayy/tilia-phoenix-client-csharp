/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Process settings
    /// </summary>
    [DataContract]
        public partial class ProcessSettingEntity :  IEquatable<ProcessSettingEntity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessSettingEntity" /> class.
        /// </summary>
        /// <param name="process">Name of process (required).</param>
        /// <param name="mode">name of Mode to run the given process at.</param>
        /// <param name="modeValue">Specific mode value to run the given process at.</param>
        /// <param name="things">List of things this process can use.</param>
        /// <param name="processTypes">List of process types this product can use.</param>
        public ProcessSettingEntity(string process = default(string), string mode = default(string), double? modeValue = default(double?), List<string> things = default(List<string>), List<string> processTypes = default(List<string>))
        {
            // to ensure "process" is required (not null)
            if (process == null)
            {
                throw new InvalidDataException("process is a required property for ProcessSettingEntity and cannot be null");
            }
            else
            {
                this.Process = process;
            }
            this.Mode = mode;
            this.ModeValue = modeValue;
            this.Things = things;
            this.ProcessTypes = processTypes;
        }
        
        /// <summary>
        /// Name of process
        /// </summary>
        /// <value>Name of process</value>
        [DataMember(Name="process", EmitDefaultValue=false)]
        public string Process { get; set; }

        /// <summary>
        /// name of Mode to run the given process at
        /// </summary>
        /// <value>name of Mode to run the given process at</value>
        [DataMember(Name="mode", EmitDefaultValue=false)]
        public string Mode { get; set; }

        /// <summary>
        /// Specific mode value to run the given process at
        /// </summary>
        /// <value>Specific mode value to run the given process at</value>
        [DataMember(Name="mode-value", EmitDefaultValue=false)]
        public double? ModeValue { get; set; }

        /// <summary>
        /// List of things this process can use
        /// </summary>
        /// <value>List of things this process can use</value>
        [DataMember(Name="things", EmitDefaultValue=false)]
        public List<string> Things { get; set; }

        /// <summary>
        /// List of process types this product can use
        /// </summary>
        /// <value>List of process types this product can use</value>
        [DataMember(Name="process-types", EmitDefaultValue=false)]
        public List<string> ProcessTypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProcessSettingEntity {\n");
            sb.Append("  Process: ").Append(Process).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  ModeValue: ").Append(ModeValue).Append("\n");
            sb.Append("  Things: ").Append(Things).Append("\n");
            sb.Append("  ProcessTypes: ").Append(ProcessTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProcessSettingEntity);
        }

        /// <summary>
        /// Returns true if ProcessSettingEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of ProcessSettingEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessSettingEntity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Process == input.Process ||
                    (this.Process != null &&
                    this.Process.Equals(input.Process))
                ) && 
                (
                    this.Mode == input.Mode ||
                    (this.Mode != null &&
                    this.Mode.Equals(input.Mode))
                ) && 
                (
                    this.ModeValue == input.ModeValue ||
                    (this.ModeValue != null &&
                    this.ModeValue.Equals(input.ModeValue))
                ) && 
                (
                    this.Things == input.Things ||
                    this.Things != null &&
                    input.Things != null &&
                    this.Things.SequenceEqual(input.Things)
                ) && 
                (
                    this.ProcessTypes == input.ProcessTypes ||
                    this.ProcessTypes != null &&
                    input.ProcessTypes != null &&
                    this.ProcessTypes.SequenceEqual(input.ProcessTypes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Process != null)
                    hashCode = hashCode * 59 + this.Process.GetHashCode();
                if (this.Mode != null)
                    hashCode = hashCode * 59 + this.Mode.GetHashCode();
                if (this.ModeValue != null)
                    hashCode = hashCode * 59 + this.ModeValue.GetHashCode();
                if (this.Things != null)
                    hashCode = hashCode * 59 + this.Things.GetHashCode();
                if (this.ProcessTypes != null)
                    hashCode = hashCode * 59 + this.ProcessTypes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
