/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// N-up settings for bound part signatures
    /// </summary>
    [DataContract]
        public partial class NUpEntity :  IEquatable<NUpEntity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NUpEntity" /> class.
        /// </summary>
        /// <param name="number">Number of N-ups which can be a value of 1, 2, or 3 with 1 signifying normal non N-up repeated signatures (required).</param>
        /// <param name="gap">Gap spacing to apply between N-up repeat pages.</param>
        public NUpEntity(int? number = default(int?), string gap = default(string))
        {
            // to ensure "number" is required (not null)
            if (number == null)
            {
                throw new InvalidDataException("number is a required property for NUpEntity and cannot be null");
            }
            else
            {
                this.Number = number;
            }
            this.Gap = gap;
        }
        
        /// <summary>
        /// Number of N-ups which can be a value of 1, 2, or 3 with 1 signifying normal non N-up repeated signatures
        /// </summary>
        /// <value>Number of N-ups which can be a value of 1, 2, or 3 with 1 signifying normal non N-up repeated signatures</value>
        [DataMember(Name="number", EmitDefaultValue=false)]
        public int? Number { get; set; }

        /// <summary>
        /// Gap spacing to apply between N-up repeat pages
        /// </summary>
        /// <value>Gap spacing to apply between N-up repeat pages</value>
        [DataMember(Name="gap", EmitDefaultValue=false)]
        public string Gap { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NUpEntity {\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Gap: ").Append(Gap).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NUpEntity);
        }

        /// <summary>
        /// Returns true if NUpEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of NUpEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NUpEntity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.Gap == input.Gap ||
                    (this.Gap != null &&
                    this.Gap.Equals(input.Gap))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Number != null)
                    hashCode = hashCode * 59 + this.Number.GetHashCode();
                if (this.Gap != null)
                    hashCode = hashCode * 59 + this.Gap.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
