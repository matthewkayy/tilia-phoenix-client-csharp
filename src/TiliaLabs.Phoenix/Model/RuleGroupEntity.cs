/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Group of rules
    /// </summary>
    [DataContract]
        public partial class RuleGroupEntity :  IEquatable<RuleGroupEntity>, IValidatableObject
    {
        /// <summary>
        /// Logic operation to apply when evaluating all rules in this group
        /// </summary>
        /// <value>Logic operation to apply when evaluating all rules in this group</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum LogicEnum
        {
            /// <summary>
            /// Enum And for value: And
            /// </summary>
            [EnumMember(Value = "And")]
            And = 1,
            /// <summary>
            /// Enum Or for value: Or
            /// </summary>
            [EnumMember(Value = "Or")]
            Or = 2        }
        /// <summary>
        /// Logic operation to apply when evaluating all rules in this group
        /// </summary>
        /// <value>Logic operation to apply when evaluating all rules in this group</value>
        [DataMember(Name="logic", EmitDefaultValue=false)]
        public LogicEnum? Logic { get; set; }
        /// <summary>
        /// Rule type.  &#x27;Item&#x27; for item rules and &#x27;Group&#x27; for group rules
        /// </summary>
        /// <value>Rule type.  &#x27;Item&#x27; for item rules and &#x27;Group&#x27; for group rules</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum Item for value: Item
            /// </summary>
            [EnumMember(Value = "Item")]
            Item = 1,
            /// <summary>
            /// Enum Group for value: Group
            /// </summary>
            [EnumMember(Value = "Group")]
            Group = 2        }
        /// <summary>
        /// Rule type.  &#x27;Item&#x27; for item rules and &#x27;Group&#x27; for group rules
        /// </summary>
        /// <value>Rule type.  &#x27;Item&#x27; for item rules and &#x27;Group&#x27; for group rules</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RuleGroupEntity" /> class.
        /// </summary>
        /// <param name="logic">Logic operation to apply when evaluating all rules in this group.</param>
        /// <param name="rules">Rules in this group.</param>
        /// <param name="type">Rule type.  &#x27;Item&#x27; for item rules and &#x27;Group&#x27; for group rules (required).</param>
        public RuleGroupEntity(LogicEnum? logic = default(LogicEnum?), List<RuleEntity> rules = default(List<RuleEntity>), TypeEnum type = default(TypeEnum))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for RuleGroupEntity and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.Logic = logic;
            this.Rules = rules;
        }
        

        /// <summary>
        /// Rules in this group
        /// </summary>
        /// <value>Rules in this group</value>
        [DataMember(Name="rules", EmitDefaultValue=false)]
        public List<RuleEntity> Rules { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RuleGroupEntity {\n");
            sb.Append("  Logic: ").Append(Logic).Append("\n");
            sb.Append("  Rules: ").Append(Rules).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RuleGroupEntity);
        }

        /// <summary>
        /// Returns true if RuleGroupEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of RuleGroupEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RuleGroupEntity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Logic == input.Logic ||
                    (this.Logic != null &&
                    this.Logic.Equals(input.Logic))
                ) && 
                (
                    this.Rules == input.Rules ||
                    this.Rules != null &&
                    input.Rules != null &&
                    this.Rules.SequenceEqual(input.Rules)
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Logic != null)
                    hashCode = hashCode * 59 + this.Logic.GetHashCode();
                if (this.Rules != null)
                    hashCode = hashCode * 59 + this.Rules.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
