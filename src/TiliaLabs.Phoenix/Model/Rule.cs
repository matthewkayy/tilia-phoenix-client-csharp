/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Placement Rule
    /// </summary>
    [DataContract]
        public partial class Rule :  IEquatable<Rule>, IValidatableObject
    {
        /// <summary>
        /// Reference anchor in the layout to base placement on
        /// </summary>
        /// <value>Reference anchor in the layout to base placement on</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum AnchorEnum
        {
            /// <summary>
            /// Enum Content for value: Content
            /// </summary>
            [EnumMember(Value = "Content")]
            Content = 1,
            /// <summary>
            /// Enum Sheet for value: Sheet
            /// </summary>
            [EnumMember(Value = "Sheet")]
            Sheet = 2,
            /// <summary>
            /// Enum Plate for value: Plate
            /// </summary>
            [EnumMember(Value = "Plate")]
            Plate = 3        }
        /// <summary>
        /// Reference anchor in the layout to base placement on
        /// </summary>
        /// <value>Reference anchor in the layout to base placement on</value>
        [DataMember(Name="anchor", EmitDefaultValue=false)]
        public AnchorEnum? Anchor { get; set; }
        /// <summary>
        /// Reference point in the anchor to align placement to
        /// </summary>
        /// <value>Reference point in the anchor to align placement to</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ReferencePointEnum
        {
            /// <summary>
            /// Enum TopLeft for value: TopLeft
            /// </summary>
            [EnumMember(Value = "TopLeft")]
            TopLeft = 1,
            /// <summary>
            /// Enum TopCenter for value: TopCenter
            /// </summary>
            [EnumMember(Value = "TopCenter")]
            TopCenter = 2,
            /// <summary>
            /// Enum TopRight for value: TopRight
            /// </summary>
            [EnumMember(Value = "TopRight")]
            TopRight = 3,
            /// <summary>
            /// Enum CenterLeft for value: CenterLeft
            /// </summary>
            [EnumMember(Value = "CenterLeft")]
            CenterLeft = 4,
            /// <summary>
            /// Enum Center for value: Center
            /// </summary>
            [EnumMember(Value = "Center")]
            Center = 5,
            /// <summary>
            /// Enum CenterRight for value: CenterRight
            /// </summary>
            [EnumMember(Value = "CenterRight")]
            CenterRight = 6,
            /// <summary>
            /// Enum BottomLeft for value: BottomLeft
            /// </summary>
            [EnumMember(Value = "BottomLeft")]
            BottomLeft = 7,
            /// <summary>
            /// Enum BottomCenter for value: BottomCenter
            /// </summary>
            [EnumMember(Value = "BottomCenter")]
            BottomCenter = 8,
            /// <summary>
            /// Enum BottomRight for value: BottomRight
            /// </summary>
            [EnumMember(Value = "BottomRight")]
            BottomRight = 9        }
        /// <summary>
        /// Reference point in the anchor to align placement to
        /// </summary>
        /// <value>Reference point in the anchor to align placement to</value>
        [DataMember(Name="reference-point", EmitDefaultValue=false)]
        public ReferencePointEnum? ReferencePoint { get; set; }
        /// <summary>
        /// Reference point within parent to place this mark&#x27;s reference point
        /// </summary>
        /// <value>Reference point within parent to place this mark&#x27;s reference point</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum PlacementEnum
        {
            /// <summary>
            /// Enum TopLeft for value: TopLeft
            /// </summary>
            [EnumMember(Value = "TopLeft")]
            TopLeft = 1,
            /// <summary>
            /// Enum TopCenter for value: TopCenter
            /// </summary>
            [EnumMember(Value = "TopCenter")]
            TopCenter = 2,
            /// <summary>
            /// Enum TopRight for value: TopRight
            /// </summary>
            [EnumMember(Value = "TopRight")]
            TopRight = 3,
            /// <summary>
            /// Enum CenterLeft for value: CenterLeft
            /// </summary>
            [EnumMember(Value = "CenterLeft")]
            CenterLeft = 4,
            /// <summary>
            /// Enum Center for value: Center
            /// </summary>
            [EnumMember(Value = "Center")]
            Center = 5,
            /// <summary>
            /// Enum CenterRight for value: CenterRight
            /// </summary>
            [EnumMember(Value = "CenterRight")]
            CenterRight = 6,
            /// <summary>
            /// Enum BottomLeft for value: BottomLeft
            /// </summary>
            [EnumMember(Value = "BottomLeft")]
            BottomLeft = 7,
            /// <summary>
            /// Enum BottomCenter for value: BottomCenter
            /// </summary>
            [EnumMember(Value = "BottomCenter")]
            BottomCenter = 8,
            /// <summary>
            /// Enum BottomRight for value: BottomRight
            /// </summary>
            [EnumMember(Value = "BottomRight")]
            BottomRight = 9        }
        /// <summary>
        /// Reference point within parent to place this mark&#x27;s reference point
        /// </summary>
        /// <value>Reference point within parent to place this mark&#x27;s reference point</value>
        [DataMember(Name="placement", EmitDefaultValue=false)]
        public PlacementEnum? Placement { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Rule" /> class.
        /// </summary>
        /// <param name="anchor">Reference anchor in the layout to base placement on.</param>
        /// <param name="referencePoint">Reference point in the anchor to align placement to.</param>
        /// <param name="placement">Reference point within parent to place this mark&#x27;s reference point.</param>
        /// <param name="horizontalOffset">Additional horizontal offset to apply from horizontal placement location.  Positive scalar values move the mark to the right while negative values move the mark to the left within the parent item..</param>
        /// <param name="verticalOffset">Additional vertical offset to apply from vertical placement location.  Positive scalar values move the mark up while negative values move the mark downward within the parent item..</param>
        /// <param name="resizeSheet">Resize Sheet.</param>
        public Rule(AnchorEnum? anchor = default(AnchorEnum?), ReferencePointEnum? referencePoint = default(ReferencePointEnum?), PlacementEnum? placement = default(PlacementEnum?), string horizontalOffset = default(string), string verticalOffset = default(string), bool? resizeSheet = default(bool?))
        {
            this.Anchor = anchor;
            this.ReferencePoint = referencePoint;
            this.Placement = placement;
            this.HorizontalOffset = horizontalOffset;
            this.VerticalOffset = verticalOffset;
            this.ResizeSheet = resizeSheet;
        }
        



        /// <summary>
        /// Additional horizontal offset to apply from horizontal placement location.  Positive scalar values move the mark to the right while negative values move the mark to the left within the parent item.
        /// </summary>
        /// <value>Additional horizontal offset to apply from horizontal placement location.  Positive scalar values move the mark to the right while negative values move the mark to the left within the parent item.</value>
        [DataMember(Name="horizontal-offset", EmitDefaultValue=false)]
        public string HorizontalOffset { get; set; }

        /// <summary>
        /// Additional vertical offset to apply from vertical placement location.  Positive scalar values move the mark up while negative values move the mark downward within the parent item.
        /// </summary>
        /// <value>Additional vertical offset to apply from vertical placement location.  Positive scalar values move the mark up while negative values move the mark downward within the parent item.</value>
        [DataMember(Name="vertical-offset", EmitDefaultValue=false)]
        public string VerticalOffset { get; set; }

        /// <summary>
        /// Resize Sheet
        /// </summary>
        /// <value>Resize Sheet</value>
        [DataMember(Name="resize-sheet", EmitDefaultValue=false)]
        public bool? ResizeSheet { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Rule {\n");
            sb.Append("  Anchor: ").Append(Anchor).Append("\n");
            sb.Append("  ReferencePoint: ").Append(ReferencePoint).Append("\n");
            sb.Append("  Placement: ").Append(Placement).Append("\n");
            sb.Append("  HorizontalOffset: ").Append(HorizontalOffset).Append("\n");
            sb.Append("  VerticalOffset: ").Append(VerticalOffset).Append("\n");
            sb.Append("  ResizeSheet: ").Append(ResizeSheet).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Rule);
        }

        /// <summary>
        /// Returns true if Rule instances are equal
        /// </summary>
        /// <param name="input">Instance of Rule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Rule input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Anchor == input.Anchor ||
                    (this.Anchor != null &&
                    this.Anchor.Equals(input.Anchor))
                ) && 
                (
                    this.ReferencePoint == input.ReferencePoint ||
                    (this.ReferencePoint != null &&
                    this.ReferencePoint.Equals(input.ReferencePoint))
                ) && 
                (
                    this.Placement == input.Placement ||
                    (this.Placement != null &&
                    this.Placement.Equals(input.Placement))
                ) && 
                (
                    this.HorizontalOffset == input.HorizontalOffset ||
                    (this.HorizontalOffset != null &&
                    this.HorizontalOffset.Equals(input.HorizontalOffset))
                ) && 
                (
                    this.VerticalOffset == input.VerticalOffset ||
                    (this.VerticalOffset != null &&
                    this.VerticalOffset.Equals(input.VerticalOffset))
                ) && 
                (
                    this.ResizeSheet == input.ResizeSheet ||
                    (this.ResizeSheet != null &&
                    this.ResizeSheet.Equals(input.ResizeSheet))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Anchor != null)
                    hashCode = hashCode * 59 + this.Anchor.GetHashCode();
                if (this.ReferencePoint != null)
                    hashCode = hashCode * 59 + this.ReferencePoint.GetHashCode();
                if (this.Placement != null)
                    hashCode = hashCode * 59 + this.Placement.GetHashCode();
                if (this.HorizontalOffset != null)
                    hashCode = hashCode * 59 + this.HorizontalOffset.GetHashCode();
                if (this.VerticalOffset != null)
                    hashCode = hashCode * 59 + this.VerticalOffset.GetHashCode();
                if (this.ResizeSheet != null)
                    hashCode = hashCode * 59 + this.ResizeSheet.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
