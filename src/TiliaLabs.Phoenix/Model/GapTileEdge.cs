/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Gap-based tile edge defines gap amount and optional extension distance beyond gap for a given tile edge
    /// </summary>
    [DataContract]
        public partial class GapTileEdge :  IEquatable<GapTileEdge>, IValidatableObject
    {
        /// <summary>
        /// Tiling edge type.  &#x27;GapEdge&#x27; for gaps and &#x27;OverlapEdge&#x27; for overlap edge type
        /// </summary>
        /// <value>Tiling edge type.  &#x27;GapEdge&#x27; for gaps and &#x27;OverlapEdge&#x27; for overlap edge type</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum GapEdge for value: GapEdge
            /// </summary>
            [EnumMember(Value = "GapEdge")]
            GapEdge = 1,
            /// <summary>
            /// Enum OverlapEdge for value: OverlapEdge
            /// </summary>
            [EnumMember(Value = "OverlapEdge")]
            OverlapEdge = 2        }
        /// <summary>
        /// Tiling edge type.  &#x27;GapEdge&#x27; for gaps and &#x27;OverlapEdge&#x27; for overlap edge type
        /// </summary>
        /// <value>Tiling edge type.  &#x27;GapEdge&#x27; for gaps and &#x27;OverlapEdge&#x27; for overlap edge type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GapTileEdge" /> class.
        /// </summary>
        /// <param name="gap">Gap distance to subtract from tile edge (required).</param>
        /// <param name="extension">Amount of extra artwork content beyond the tile gap boundary to extend.</param>
        /// <param name="type">Tiling edge type.  &#x27;GapEdge&#x27; for gaps and &#x27;OverlapEdge&#x27; for overlap edge type (required).</param>
        public GapTileEdge(double? gap = default(double?), double? extension = default(double?), TypeEnum type = default(TypeEnum))
        {
            // to ensure "gap" is required (not null)
            if (gap == null)
            {
                throw new InvalidDataException("gap is a required property for GapTileEdge and cannot be null");
            }
            else
            {
                this.Gap = gap;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for GapTileEdge and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.Extension = extension;
        }
        
        /// <summary>
        /// Gap distance to subtract from tile edge
        /// </summary>
        /// <value>Gap distance to subtract from tile edge</value>
        [DataMember(Name="gap", EmitDefaultValue=false)]
        public double? Gap { get; set; }

        /// <summary>
        /// Amount of extra artwork content beyond the tile gap boundary to extend
        /// </summary>
        /// <value>Amount of extra artwork content beyond the tile gap boundary to extend</value>
        [DataMember(Name="extension", EmitDefaultValue=false)]
        public double? Extension { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GapTileEdge {\n");
            sb.Append("  Gap: ").Append(Gap).Append("\n");
            sb.Append("  Extension: ").Append(Extension).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GapTileEdge);
        }

        /// <summary>
        /// Returns true if GapTileEdge instances are equal
        /// </summary>
        /// <param name="input">Instance of GapTileEdge to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GapTileEdge input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Gap == input.Gap ||
                    (this.Gap != null &&
                    this.Gap.Equals(input.Gap))
                ) && 
                (
                    this.Extension == input.Extension ||
                    (this.Extension != null &&
                    this.Extension.Equals(input.Extension))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Gap != null)
                    hashCode = hashCode * 59 + this.Gap.GetHashCode();
                if (this.Extension != null)
                    hashCode = hashCode * 59 + this.Extension.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
