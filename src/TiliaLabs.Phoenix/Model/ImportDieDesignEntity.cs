/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Import die design from a CAD file into Die Design Library
    /// </summary>
    [DataContract]
        public partial class ImportDieDesignEntity :  IEquatable<ImportDieDesignEntity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImportDieDesignEntity" /> class.
        /// </summary>
        /// <param name="name">Name of template asset to create including folders if desired.  If name is not specified, file name minus extension will be used as the name..</param>
        /// <param name="id">ID of asset to use.  If not specified a unique ID will be generated..</param>
        /// <param name="createFolder">Boolean controlling whether to create a folder when folder or parent folder(s) does not exist.  By default non-existent folders are not created automatically..</param>
        /// <param name="path">Full path of template file to import (required).</param>
        /// <param name="preset">Name of preset to use during import.</param>
        /// <param name="dieName">Name of die in CAD file to import.  By default if die name is not specified and the CAD file contains multiple dies, the first die listed in the CAD data is used..</param>
        public ImportDieDesignEntity(string name = default(string), string id = default(string), bool? createFolder = default(bool?), string path = default(string), string preset = default(string), string dieName = default(string))
        {
            // to ensure "path" is required (not null)
            if (path == null)
            {
                throw new InvalidDataException("path is a required property for ImportDieDesignEntity and cannot be null");
            }
            else
            {
                this.Path = path;
            }
            this.Name = name;
            this.Id = id;
            this.CreateFolder = createFolder;
            this.Preset = preset;
            this.DieName = dieName;
        }
        
        /// <summary>
        /// Name of template asset to create including folders if desired.  If name is not specified, file name minus extension will be used as the name.
        /// </summary>
        /// <value>Name of template asset to create including folders if desired.  If name is not specified, file name minus extension will be used as the name.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// ID of asset to use.  If not specified a unique ID will be generated.
        /// </summary>
        /// <value>ID of asset to use.  If not specified a unique ID will be generated.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Boolean controlling whether to create a folder when folder or parent folder(s) does not exist.  By default non-existent folders are not created automatically.
        /// </summary>
        /// <value>Boolean controlling whether to create a folder when folder or parent folder(s) does not exist.  By default non-existent folders are not created automatically.</value>
        [DataMember(Name="create-folder", EmitDefaultValue=false)]
        public bool? CreateFolder { get; set; }

        /// <summary>
        /// Full path of template file to import
        /// </summary>
        /// <value>Full path of template file to import</value>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// Name of preset to use during import
        /// </summary>
        /// <value>Name of preset to use during import</value>
        [DataMember(Name="preset", EmitDefaultValue=false)]
        public string Preset { get; set; }

        /// <summary>
        /// Name of die in CAD file to import.  By default if die name is not specified and the CAD file contains multiple dies, the first die listed in the CAD data is used.
        /// </summary>
        /// <value>Name of die in CAD file to import.  By default if die name is not specified and the CAD file contains multiple dies, the first die listed in the CAD data is used.</value>
        [DataMember(Name="die-name", EmitDefaultValue=false)]
        public string DieName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImportDieDesignEntity {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreateFolder: ").Append(CreateFolder).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Preset: ").Append(Preset).Append("\n");
            sb.Append("  DieName: ").Append(DieName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ImportDieDesignEntity);
        }

        /// <summary>
        /// Returns true if ImportDieDesignEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of ImportDieDesignEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportDieDesignEntity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CreateFolder == input.CreateFolder ||
                    (this.CreateFolder != null &&
                    this.CreateFolder.Equals(input.CreateFolder))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.Preset == input.Preset ||
                    (this.Preset != null &&
                    this.Preset.Equals(input.Preset))
                ) && 
                (
                    this.DieName == input.DieName ||
                    (this.DieName != null &&
                    this.DieName.Equals(input.DieName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CreateFolder != null)
                    hashCode = hashCode * 59 + this.CreateFolder.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.Preset != null)
                    hashCode = hashCode * 59 + this.Preset.GetHashCode();
                if (this.DieName != null)
                    hashCode = hashCode * 59 + this.DieName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
