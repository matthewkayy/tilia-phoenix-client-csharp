/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Press Placement
    /// </summary>
    [DataContract]
        public partial class PressPlacement :  IEquatable<PressPlacement>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum Placement for value: Placement
            /// </summary>
            [EnumMember(Value = "Placement")]
            Placement = 1,
            /// <summary>
            /// Enum PressPlacement for value: PressPlacement
            /// </summary>
            [EnumMember(Value = "PressPlacement")]
            PressPlacement = 2,
            /// <summary>
            /// Enum OffsetPressPlacement for value: OffsetPressPlacement
            /// </summary>
            [EnumMember(Value = "OffsetPressPlacement")]
            OffsetPressPlacement = 3        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PressPlacement" /> class.
        /// </summary>
        /// <param name="rule">rule (required).</param>
        /// <param name="defaultSheet">defaultSheet.</param>
        /// <param name="type">type (required).</param>
        public PressPlacement(Rule rule = default(Rule), SheetRef defaultSheet = default(SheetRef), TypeEnum type = default(TypeEnum))
        {
            // to ensure "rule" is required (not null)
            if (rule == null)
            {
                throw new InvalidDataException("rule is a required property for PressPlacement and cannot be null");
            }
            else
            {
                this.Rule = rule;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for PressPlacement and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.DefaultSheet = defaultSheet;
        }
        
        /// <summary>
        /// Gets or Sets Rule
        /// </summary>
        [DataMember(Name="rule", EmitDefaultValue=false)]
        public Rule Rule { get; set; }

        /// <summary>
        /// Gets or Sets DefaultSheet
        /// </summary>
        [DataMember(Name="default-sheet", EmitDefaultValue=false)]
        public SheetRef DefaultSheet { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PressPlacement {\n");
            sb.Append("  Rule: ").Append(Rule).Append("\n");
            sb.Append("  DefaultSheet: ").Append(DefaultSheet).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PressPlacement);
        }

        /// <summary>
        /// Returns true if PressPlacement instances are equal
        /// </summary>
        /// <param name="input">Instance of PressPlacement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PressPlacement input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Rule == input.Rule ||
                    (this.Rule != null &&
                    this.Rule.Equals(input.Rule))
                ) && 
                (
                    this.DefaultSheet == input.DefaultSheet ||
                    (this.DefaultSheet != null &&
                    this.DefaultSheet.Equals(input.DefaultSheet))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Rule != null)
                    hashCode = hashCode * 59 + this.Rule.GetHashCode();
                if (this.DefaultSheet != null)
                    hashCode = hashCode * 59 + this.DefaultSheet.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
