/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Information about a template placed in a layout
    /// </summary>
    [DataContract]
        public partial class PlacedTemplateEntity :  IEquatable<PlacedTemplateEntity>, IValidatableObject
    {
        /// <summary>
        /// Template source
        /// </summary>
        /// <value>Template source</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum SourceEnum
        {
            /// <summary>
            /// Enum Generated for value: Generated
            /// </summary>
            [EnumMember(Value = "Generated")]
            Generated = 1,
            /// <summary>
            /// Enum Library for value: Library
            /// </summary>
            [EnumMember(Value = "Library")]
            Library = 2,
            /// <summary>
            /// Enum File for value: File
            /// </summary>
            [EnumMember(Value = "File")]
            File = 3        }
        /// <summary>
        /// Template source
        /// </summary>
        /// <value>Template source</value>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public SourceEnum? Source { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PlacedTemplateEntity" /> class.
        /// </summary>
        /// <param name="name">Template name.</param>
        /// <param name="source">Template source.</param>
        /// <param name="items">Number of items or &#x27;ups&#x27; in this template (required).</param>
        /// <param name="placed">Number of pieces placed into this template (required).</param>
        public PlacedTemplateEntity(string name = default(string), SourceEnum? source = default(SourceEnum?), int? items = default(int?), int? placed = default(int?))
        {
            // to ensure "items" is required (not null)
            if (items == null)
            {
                throw new InvalidDataException("items is a required property for PlacedTemplateEntity and cannot be null");
            }
            else
            {
                this.Items = items;
            }
            // to ensure "placed" is required (not null)
            if (placed == null)
            {
                throw new InvalidDataException("placed is a required property for PlacedTemplateEntity and cannot be null");
            }
            else
            {
                this.Placed = placed;
            }
            this.Name = name;
            this.Source = source;
        }
        
        /// <summary>
        /// Template name
        /// </summary>
        /// <value>Template name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }


        /// <summary>
        /// Number of items or &#x27;ups&#x27; in this template
        /// </summary>
        /// <value>Number of items or &#x27;ups&#x27; in this template</value>
        [DataMember(Name="items", EmitDefaultValue=false)]
        public int? Items { get; set; }

        /// <summary>
        /// Number of pieces placed into this template
        /// </summary>
        /// <value>Number of pieces placed into this template</value>
        [DataMember(Name="placed", EmitDefaultValue=false)]
        public int? Placed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlacedTemplateEntity {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  Placed: ").Append(Placed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PlacedTemplateEntity);
        }

        /// <summary>
        /// Returns true if PlacedTemplateEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of PlacedTemplateEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlacedTemplateEntity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.Items == input.Items ||
                    (this.Items != null &&
                    this.Items.Equals(input.Items))
                ) && 
                (
                    this.Placed == input.Placed ||
                    (this.Placed != null &&
                    this.Placed.Equals(input.Placed))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                if (this.Placed != null)
                    hashCode = hashCode * 59 + this.Placed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
