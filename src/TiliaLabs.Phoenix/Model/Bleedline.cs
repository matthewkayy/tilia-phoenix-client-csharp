/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Bleedline
    /// </summary>
    [DataContract]
        public partial class Bleedline :  IEquatable<Bleedline>, IValidatableObject
    {
        /// <summary>
        /// Bleedline type
        /// </summary>
        /// <value>Bleedline type</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum Margins for value: Margins
            /// </summary>
            [EnumMember(Value = "Margins")]
            Margins = 1,
            /// <summary>
            /// Enum Contour for value: Contour
            /// </summary>
            [EnumMember(Value = "Contour")]
            Contour = 2,
            /// <summary>
            /// Enum CAD for value: CAD
            /// </summary>
            [EnumMember(Value = "CAD")]
            CAD = 3,
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 4        }
        /// <summary>
        /// Bleedline type
        /// </summary>
        /// <value>Bleedline type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Bleedline" /> class.
        /// </summary>
        /// <param name="name">Name (required).</param>
        /// <param name="description">Description.</param>
        /// <param name="notes">Notes.</param>
        /// <param name="source">source.</param>
        /// <param name="shape">shape (required).</param>
        /// <param name="thickness">Dieline thickness.</param>
        /// <param name="rect">rect (required).</param>
        /// <param name="type">Bleedline type (required).</param>
        /// <param name="bleedSource">Bleedline source.</param>
        /// <param name="margin">Bleedline margin (required).</param>
        /// <param name="margins">margins (required).</param>
        /// <param name="shapeModified">Whether or not bleedline shape has been custom modified.</param>
        /// <param name="marginsAdjusted">Whether or not margins have been custom adjusted.</param>
        /// <param name="properties">Custom properties.</param>
        /// <param name="path">Path.</param>
        public Bleedline(string name = default(string), string description = default(string), string notes = default(string), DielineSource source = default(DielineSource), Path shape = default(Path), double? thickness = default(double?), Rect rect = default(Rect), TypeEnum type = default(TypeEnum), string bleedSource = default(string), string margin = default(string), Margins margins = default(Margins), bool? shapeModified = default(bool?), bool? marginsAdjusted = default(bool?), List<PropertyObject> properties = default(List<PropertyObject>), string path = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Bleedline and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "shape" is required (not null)
            if (shape == null)
            {
                throw new InvalidDataException("shape is a required property for Bleedline and cannot be null");
            }
            else
            {
                this.Shape = shape;
            }
            // to ensure "rect" is required (not null)
            if (rect == null)
            {
                throw new InvalidDataException("rect is a required property for Bleedline and cannot be null");
            }
            else
            {
                this.Rect = rect;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for Bleedline and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "margin" is required (not null)
            if (margin == null)
            {
                throw new InvalidDataException("margin is a required property for Bleedline and cannot be null");
            }
            else
            {
                this.Margin = margin;
            }
            // to ensure "margins" is required (not null)
            if (margins == null)
            {
                throw new InvalidDataException("margins is a required property for Bleedline and cannot be null");
            }
            else
            {
                this.Margins = margins;
            }
            this.Description = description;
            this.Notes = notes;
            this.Source = source;
            this.Thickness = thickness;
            this.BleedSource = bleedSource;
            this.ShapeModified = shapeModified;
            this.MarginsAdjusted = marginsAdjusted;
            this.Properties = properties;
            this.Path = path;
        }
        
        /// <summary>
        /// Unique ID
        /// </summary>
        /// <value>Unique ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; private set; }

        /// <summary>
        /// Name
        /// </summary>
        /// <value>Name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Created On
        /// </summary>
        /// <value>Created On</value>
        [DataMember(Name="created-on", EmitDefaultValue=false)]
        public DateTime? CreatedOn { get; private set; }

        /// <summary>
        /// Modified On
        /// </summary>
        /// <value>Modified On</value>
        [DataMember(Name="modified-on", EmitDefaultValue=false)]
        public DateTime? ModifiedOn { get; private set; }

        /// <summary>
        /// Version
        /// </summary>
        /// <value>Version</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; private set; }

        /// <summary>
        /// Description
        /// </summary>
        /// <value>Description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Notes
        /// </summary>
        /// <value>Notes</value>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public DielineSource Source { get; set; }

        /// <summary>
        /// Gets or Sets Shape
        /// </summary>
        [DataMember(Name="shape", EmitDefaultValue=false)]
        public Path Shape { get; set; }

        /// <summary>
        /// Dieline thickness
        /// </summary>
        /// <value>Dieline thickness</value>
        [DataMember(Name="thickness", EmitDefaultValue=false)]
        public double? Thickness { get; set; }

        /// <summary>
        /// Gets or Sets Rect
        /// </summary>
        [DataMember(Name="rect", EmitDefaultValue=false)]
        public Rect Rect { get; set; }


        /// <summary>
        /// Bleedline source
        /// </summary>
        /// <value>Bleedline source</value>
        [DataMember(Name="bleed-source", EmitDefaultValue=false)]
        public string BleedSource { get; set; }

        /// <summary>
        /// Bleedline margin
        /// </summary>
        /// <value>Bleedline margin</value>
        [DataMember(Name="margin", EmitDefaultValue=false)]
        public string Margin { get; set; }

        /// <summary>
        /// Gets or Sets Margins
        /// </summary>
        [DataMember(Name="margins", EmitDefaultValue=false)]
        public Margins Margins { get; set; }

        /// <summary>
        /// Whether or not bleedline shape has been custom modified
        /// </summary>
        /// <value>Whether or not bleedline shape has been custom modified</value>
        [DataMember(Name="shape-modified", EmitDefaultValue=false)]
        public bool? ShapeModified { get; set; }

        /// <summary>
        /// Whether or not margins have been custom adjusted
        /// </summary>
        /// <value>Whether or not margins have been custom adjusted</value>
        [DataMember(Name="margins-adjusted", EmitDefaultValue=false)]
        public bool? MarginsAdjusted { get; set; }

        /// <summary>
        /// Custom properties
        /// </summary>
        /// <value>Custom properties</value>
        [DataMember(Name="properties", EmitDefaultValue=false)]
        public List<PropertyObject> Properties { get; set; }

        /// <summary>
        /// Path
        /// </summary>
        /// <value>Path</value>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Bleedline {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  ModifiedOn: ").Append(ModifiedOn).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Shape: ").Append(Shape).Append("\n");
            sb.Append("  Thickness: ").Append(Thickness).Append("\n");
            sb.Append("  Rect: ").Append(Rect).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  BleedSource: ").Append(BleedSource).Append("\n");
            sb.Append("  Margin: ").Append(Margin).Append("\n");
            sb.Append("  Margins: ").Append(Margins).Append("\n");
            sb.Append("  ShapeModified: ").Append(ShapeModified).Append("\n");
            sb.Append("  MarginsAdjusted: ").Append(MarginsAdjusted).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Bleedline);
        }

        /// <summary>
        /// Returns true if Bleedline instances are equal
        /// </summary>
        /// <param name="input">Instance of Bleedline to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Bleedline input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CreatedOn == input.CreatedOn ||
                    (this.CreatedOn != null &&
                    this.CreatedOn.Equals(input.CreatedOn))
                ) && 
                (
                    this.ModifiedOn == input.ModifiedOn ||
                    (this.ModifiedOn != null &&
                    this.ModifiedOn.Equals(input.ModifiedOn))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.Shape == input.Shape ||
                    (this.Shape != null &&
                    this.Shape.Equals(input.Shape))
                ) && 
                (
                    this.Thickness == input.Thickness ||
                    (this.Thickness != null &&
                    this.Thickness.Equals(input.Thickness))
                ) && 
                (
                    this.Rect == input.Rect ||
                    (this.Rect != null &&
                    this.Rect.Equals(input.Rect))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.BleedSource == input.BleedSource ||
                    (this.BleedSource != null &&
                    this.BleedSource.Equals(input.BleedSource))
                ) && 
                (
                    this.Margin == input.Margin ||
                    (this.Margin != null &&
                    this.Margin.Equals(input.Margin))
                ) && 
                (
                    this.Margins == input.Margins ||
                    (this.Margins != null &&
                    this.Margins.Equals(input.Margins))
                ) && 
                (
                    this.ShapeModified == input.ShapeModified ||
                    (this.ShapeModified != null &&
                    this.ShapeModified.Equals(input.ShapeModified))
                ) && 
                (
                    this.MarginsAdjusted == input.MarginsAdjusted ||
                    (this.MarginsAdjusted != null &&
                    this.MarginsAdjusted.Equals(input.MarginsAdjusted))
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.CreatedOn != null)
                    hashCode = hashCode * 59 + this.CreatedOn.GetHashCode();
                if (this.ModifiedOn != null)
                    hashCode = hashCode * 59 + this.ModifiedOn.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                if (this.Shape != null)
                    hashCode = hashCode * 59 + this.Shape.GetHashCode();
                if (this.Thickness != null)
                    hashCode = hashCode * 59 + this.Thickness.GetHashCode();
                if (this.Rect != null)
                    hashCode = hashCode * 59 + this.Rect.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.BleedSource != null)
                    hashCode = hashCode * 59 + this.BleedSource.GetHashCode();
                if (this.Margin != null)
                    hashCode = hashCode * 59 + this.Margin.GetHashCode();
                if (this.Margins != null)
                    hashCode = hashCode * 59 + this.Margins.GetHashCode();
                if (this.ShapeModified != null)
                    hashCode = hashCode * 59 + this.ShapeModified.GetHashCode();
                if (this.MarginsAdjusted != null)
                    hashCode = hashCode * 59 + this.MarginsAdjusted.GetHashCode();
                if (this.Properties != null)
                    hashCode = hashCode * 59 + this.Properties.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
