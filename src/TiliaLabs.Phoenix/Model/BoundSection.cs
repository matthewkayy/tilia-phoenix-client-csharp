/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Bound section
    /// </summary>
    [DataContract]
        public partial class BoundSection :  IEquatable<BoundSection>, IValidatableObject
    {
        /// <summary>
        /// Binding method
        /// </summary>
        /// <value>Binding method</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum BindingMethodEnum
        {
            /// <summary>
            /// Enum PerfectBound for value: Perfect Bound
            /// </summary>
            [EnumMember(Value = "Perfect Bound")]
            PerfectBound = 1,
            /// <summary>
            /// Enum SaddleStitch for value: Saddle Stitch
            /// </summary>
            [EnumMember(Value = "Saddle Stitch")]
            SaddleStitch = 2,
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 3        }
        /// <summary>
        /// Binding method
        /// </summary>
        /// <value>Binding method</value>
        [DataMember(Name="binding-method", EmitDefaultValue=false)]
        public BindingMethodEnum BindingMethod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BoundSection" /> class.
        /// </summary>
        /// <param name="bindingMethod">Binding method (required).</param>
        /// <param name="signatures">Signatures in this section.</param>
        public BoundSection(BindingMethodEnum bindingMethod = default(BindingMethodEnum), List<BoundSignature> signatures = default(List<BoundSignature>))
        {
            // to ensure "bindingMethod" is required (not null)
            if (bindingMethod == null)
            {
                throw new InvalidDataException("bindingMethod is a required property for BoundSection and cannot be null");
            }
            else
            {
                this.BindingMethod = bindingMethod;
            }
            this.Signatures = signatures;
        }
        
        /// <summary>
        /// Unique ID
        /// </summary>
        /// <value>Unique ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; private set; }


        /// <summary>
        /// Signatures in this section
        /// </summary>
        /// <value>Signatures in this section</value>
        [DataMember(Name="signatures", EmitDefaultValue=false)]
        public List<BoundSignature> Signatures { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BoundSection {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BindingMethod: ").Append(BindingMethod).Append("\n");
            sb.Append("  Signatures: ").Append(Signatures).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BoundSection);
        }

        /// <summary>
        /// Returns true if BoundSection instances are equal
        /// </summary>
        /// <param name="input">Instance of BoundSection to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BoundSection input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.BindingMethod == input.BindingMethod ||
                    (this.BindingMethod != null &&
                    this.BindingMethod.Equals(input.BindingMethod))
                ) && 
                (
                    this.Signatures == input.Signatures ||
                    this.Signatures != null &&
                    input.Signatures != null &&
                    this.Signatures.SequenceEqual(input.Signatures)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.BindingMethod != null)
                    hashCode = hashCode * 59 + this.BindingMethod.GetHashCode();
                if (this.Signatures != null)
                    hashCode = hashCode * 59 + this.Signatures.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
