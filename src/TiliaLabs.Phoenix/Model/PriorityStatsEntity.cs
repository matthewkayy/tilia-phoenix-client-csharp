/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Breakdown of layout stats for each product priority
    /// </summary>
    [DataContract]
        public partial class PriorityStatsEntity :  IEquatable<PriorityStatsEntity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PriorityStatsEntity" /> class.
        /// </summary>
        /// <param name="priority">Priority level (required).</param>
        /// <param name="sheetUsage">Sheet usage on layout for products at this priority level (required).</param>
        public PriorityStatsEntity(int? priority = default(int?), float? sheetUsage = default(float?))
        {
            // to ensure "priority" is required (not null)
            if (priority == null)
            {
                throw new InvalidDataException("priority is a required property for PriorityStatsEntity and cannot be null");
            }
            else
            {
                this.Priority = priority;
            }
            // to ensure "sheetUsage" is required (not null)
            if (sheetUsage == null)
            {
                throw new InvalidDataException("sheetUsage is a required property for PriorityStatsEntity and cannot be null");
            }
            else
            {
                this.SheetUsage = sheetUsage;
            }
        }
        
        /// <summary>
        /// Priority level
        /// </summary>
        /// <value>Priority level</value>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public int? Priority { get; set; }

        /// <summary>
        /// Sheet usage on layout for products at this priority level
        /// </summary>
        /// <value>Sheet usage on layout for products at this priority level</value>
        [DataMember(Name="sheet-usage", EmitDefaultValue=false)]
        public float? SheetUsage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PriorityStatsEntity {\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  SheetUsage: ").Append(SheetUsage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PriorityStatsEntity);
        }

        /// <summary>
        /// Returns true if PriorityStatsEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of PriorityStatsEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PriorityStatsEntity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && 
                (
                    this.SheetUsage == input.SheetUsage ||
                    (this.SheetUsage != null &&
                    this.SheetUsage.Equals(input.SheetUsage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Priority != null)
                    hashCode = hashCode * 59 + this.Priority.GetHashCode();
                if (this.SheetUsage != null)
                    hashCode = hashCode * 59 + this.SheetUsage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
