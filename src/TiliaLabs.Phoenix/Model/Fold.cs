/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Signature fold
    /// </summary>
    [DataContract]
        public partial class Fold :  IEquatable<Fold>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Fold" /> class.
        /// </summary>
        /// <param name="up">Whether this fold is up or down (required).</param>
        /// <param name="vertical">Whether this fold is vertical or horizontal (required).</param>
        /// <param name="cells">Cells in this fold (required).</param>
        public Fold(bool? up = default(bool?), bool? vertical = default(bool?), int? cells = default(int?))
        {
            // to ensure "up" is required (not null)
            if (up == null)
            {
                throw new InvalidDataException("up is a required property for Fold and cannot be null");
            }
            else
            {
                this.Up = up;
            }
            // to ensure "vertical" is required (not null)
            if (vertical == null)
            {
                throw new InvalidDataException("vertical is a required property for Fold and cannot be null");
            }
            else
            {
                this.Vertical = vertical;
            }
            // to ensure "cells" is required (not null)
            if (cells == null)
            {
                throw new InvalidDataException("cells is a required property for Fold and cannot be null");
            }
            else
            {
                this.Cells = cells;
            }
        }
        
        /// <summary>
        /// Whether this fold is up or down
        /// </summary>
        /// <value>Whether this fold is up or down</value>
        [DataMember(Name="up", EmitDefaultValue=false)]
        public bool? Up { get; set; }

        /// <summary>
        /// Whether this fold is vertical or horizontal
        /// </summary>
        /// <value>Whether this fold is vertical or horizontal</value>
        [DataMember(Name="vertical", EmitDefaultValue=false)]
        public bool? Vertical { get; set; }

        /// <summary>
        /// Cells in this fold
        /// </summary>
        /// <value>Cells in this fold</value>
        [DataMember(Name="cells", EmitDefaultValue=false)]
        public int? Cells { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Fold {\n");
            sb.Append("  Up: ").Append(Up).Append("\n");
            sb.Append("  Vertical: ").Append(Vertical).Append("\n");
            sb.Append("  Cells: ").Append(Cells).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Fold);
        }

        /// <summary>
        /// Returns true if Fold instances are equal
        /// </summary>
        /// <param name="input">Instance of Fold to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Fold input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Up == input.Up ||
                    (this.Up != null &&
                    this.Up.Equals(input.Up))
                ) && 
                (
                    this.Vertical == input.Vertical ||
                    (this.Vertical != null &&
                    this.Vertical.Equals(input.Vertical))
                ) && 
                (
                    this.Cells == input.Cells ||
                    (this.Cells != null &&
                    this.Cells.Equals(input.Cells))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Up != null)
                    hashCode = hashCode * 59 + this.Up.GetHashCode();
                if (this.Vertical != null)
                    hashCode = hashCode * 59 + this.Vertical.GetHashCode();
                if (this.Cells != null)
                    hashCode = hashCode * 59 + this.Cells.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
