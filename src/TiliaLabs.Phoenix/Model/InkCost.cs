/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Ink Cost
    /// </summary>
    [DataContract]
        public partial class InkCost :  IEquatable<InkCost>, IValidatableObject
    {
        /// <summary>
        /// Type
        /// </summary>
        /// <value>Type</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum Coverage for value: Coverage
            /// </summary>
            [EnumMember(Value = "Coverage")]
            Coverage = 1,
            /// <summary>
            /// Enum Clicks for value: Clicks
            /// </summary>
            [EnumMember(Value = "Clicks")]
            Clicks = 2        }
        /// <summary>
        /// Type
        /// </summary>
        /// <value>Type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Units
        /// </summary>
        /// <value>Units</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum UnitsEnum
        {
            /// <summary>
            /// Enum Sheets for value: Sheets
            /// </summary>
            [EnumMember(Value = "Sheets")]
            Sheets = 1,
            /// <summary>
            /// Enum FEET for value: FEET
            /// </summary>
            [EnumMember(Value = "FEET")]
            FEET = 2,
            /// <summary>
            /// Enum Inches for value: Inches
            /// </summary>
            [EnumMember(Value = "Inches")]
            Inches = 3,
            /// <summary>
            /// Enum Meters for value: Meters
            /// </summary>
            [EnumMember(Value = "Meters")]
            Meters = 4,
            /// <summary>
            /// Enum Centimeters for value: Centimeters
            /// </summary>
            [EnumMember(Value = "Centimeters")]
            Centimeters = 5,
            /// <summary>
            /// Enum Millimeters for value: Millimeters
            /// </summary>
            [EnumMember(Value = "Millimeters")]
            Millimeters = 6,
            /// <summary>
            /// Enum MSI for value: MSI
            /// </summary>
            [EnumMember(Value = "MSI")]
            MSI = 7,
            /// <summary>
            /// Enum Feet for value: Feet²
            /// </summary>
            [EnumMember(Value = "Feet²")]
            Feet = 8,
            /// <summary>
            /// Enum Inches_8 for value: Inches²
            /// </summary>
            [EnumMember(Value = "Inches²")]
            Inches_8 = 9,
            /// <summary>
            /// Enum Meters_9 for value: Meters²
            /// </summary>
            [EnumMember(Value = "Meters²")]
            Meters_9 = 10,
            /// <summary>
            /// Enum Centimeters_10 for value: Centimeters²
            /// </summary>
            [EnumMember(Value = "Centimeters²")]
            Centimeters_10 = 11,
            /// <summary>
            /// Enum Millimeters_11 for value: Millimeters²
            /// </summary>
            [EnumMember(Value = "Millimeters²")]
            Millimeters_11 = 12        }
        /// <summary>
        /// Units
        /// </summary>
        /// <value>Units</value>
        [DataMember(Name="units", EmitDefaultValue=false)]
        public UnitsEnum Units { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InkCost" /> class.
        /// </summary>
        /// <param name="type">Type (required).</param>
        /// <param name="units">Units (required).</param>
        /// <param name="coverage">Coverage.</param>
        /// <param name="cyan">Cyan.</param>
        /// <param name="magenta">Magenta.</param>
        /// <param name="yellow">Yellow.</param>
        /// <param name="black">Black.</param>
        /// <param name="spots">Spots.</param>
        /// <param name="coatings">Coatings.</param>
        /// <param name="foils">Foils.</param>
        public InkCost(TypeEnum type = default(TypeEnum), UnitsEnum units = default(UnitsEnum), string coverage = default(string), double? cyan = default(double?), double? magenta = default(double?), double? yellow = default(double?), double? black = default(double?), double? spots = default(double?), double? coatings = default(double?), double? foils = default(double?))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for InkCost and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "units" is required (not null)
            if (units == null)
            {
                throw new InvalidDataException("units is a required property for InkCost and cannot be null");
            }
            else
            {
                this.Units = units;
            }
            this.Coverage = coverage;
            this.Cyan = cyan;
            this.Magenta = magenta;
            this.Yellow = yellow;
            this.Black = black;
            this.Spots = spots;
            this.Coatings = coatings;
            this.Foils = foils;
        }
        


        /// <summary>
        /// Coverage
        /// </summary>
        /// <value>Coverage</value>
        [DataMember(Name="coverage", EmitDefaultValue=false)]
        public string Coverage { get; set; }

        /// <summary>
        /// Cyan
        /// </summary>
        /// <value>Cyan</value>
        [DataMember(Name="cyan", EmitDefaultValue=false)]
        public double? Cyan { get; set; }

        /// <summary>
        /// Magenta
        /// </summary>
        /// <value>Magenta</value>
        [DataMember(Name="magenta", EmitDefaultValue=false)]
        public double? Magenta { get; set; }

        /// <summary>
        /// Yellow
        /// </summary>
        /// <value>Yellow</value>
        [DataMember(Name="yellow", EmitDefaultValue=false)]
        public double? Yellow { get; set; }

        /// <summary>
        /// Black
        /// </summary>
        /// <value>Black</value>
        [DataMember(Name="black", EmitDefaultValue=false)]
        public double? Black { get; set; }

        /// <summary>
        /// Spots
        /// </summary>
        /// <value>Spots</value>
        [DataMember(Name="spots", EmitDefaultValue=false)]
        public double? Spots { get; set; }

        /// <summary>
        /// Coatings
        /// </summary>
        /// <value>Coatings</value>
        [DataMember(Name="coatings", EmitDefaultValue=false)]
        public double? Coatings { get; set; }

        /// <summary>
        /// Foils
        /// </summary>
        /// <value>Foils</value>
        [DataMember(Name="foils", EmitDefaultValue=false)]
        public double? Foils { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InkCost {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Units: ").Append(Units).Append("\n");
            sb.Append("  Coverage: ").Append(Coverage).Append("\n");
            sb.Append("  Cyan: ").Append(Cyan).Append("\n");
            sb.Append("  Magenta: ").Append(Magenta).Append("\n");
            sb.Append("  Yellow: ").Append(Yellow).Append("\n");
            sb.Append("  Black: ").Append(Black).Append("\n");
            sb.Append("  Spots: ").Append(Spots).Append("\n");
            sb.Append("  Coatings: ").Append(Coatings).Append("\n");
            sb.Append("  Foils: ").Append(Foils).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InkCost);
        }

        /// <summary>
        /// Returns true if InkCost instances are equal
        /// </summary>
        /// <param name="input">Instance of InkCost to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InkCost input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Units == input.Units ||
                    (this.Units != null &&
                    this.Units.Equals(input.Units))
                ) && 
                (
                    this.Coverage == input.Coverage ||
                    (this.Coverage != null &&
                    this.Coverage.Equals(input.Coverage))
                ) && 
                (
                    this.Cyan == input.Cyan ||
                    (this.Cyan != null &&
                    this.Cyan.Equals(input.Cyan))
                ) && 
                (
                    this.Magenta == input.Magenta ||
                    (this.Magenta != null &&
                    this.Magenta.Equals(input.Magenta))
                ) && 
                (
                    this.Yellow == input.Yellow ||
                    (this.Yellow != null &&
                    this.Yellow.Equals(input.Yellow))
                ) && 
                (
                    this.Black == input.Black ||
                    (this.Black != null &&
                    this.Black.Equals(input.Black))
                ) && 
                (
                    this.Spots == input.Spots ||
                    (this.Spots != null &&
                    this.Spots.Equals(input.Spots))
                ) && 
                (
                    this.Coatings == input.Coatings ||
                    (this.Coatings != null &&
                    this.Coatings.Equals(input.Coatings))
                ) && 
                (
                    this.Foils == input.Foils ||
                    (this.Foils != null &&
                    this.Foils.Equals(input.Foils))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Units != null)
                    hashCode = hashCode * 59 + this.Units.GetHashCode();
                if (this.Coverage != null)
                    hashCode = hashCode * 59 + this.Coverage.GetHashCode();
                if (this.Cyan != null)
                    hashCode = hashCode * 59 + this.Cyan.GetHashCode();
                if (this.Magenta != null)
                    hashCode = hashCode * 59 + this.Magenta.GetHashCode();
                if (this.Yellow != null)
                    hashCode = hashCode * 59 + this.Yellow.GetHashCode();
                if (this.Black != null)
                    hashCode = hashCode * 59 + this.Black.GetHashCode();
                if (this.Spots != null)
                    hashCode = hashCode * 59 + this.Spots.GetHashCode();
                if (this.Coatings != null)
                    hashCode = hashCode * 59 + this.Coatings.GetHashCode();
                if (this.Foils != null)
                    hashCode = hashCode * 59 + this.Foils.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
