/* 
 * tilia Phoenix API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 7.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TiliaLabs.Phoenix.Client.SwaggerDateConverter;

namespace TiliaLabs.Phoenix.Model
{
    /// <summary>
    /// Settings for ordered placement in each layout
    /// </summary>
    [DataContract]
        public partial class OrderedPlacementEntity :  IEquatable<OrderedPlacementEntity>, IValidatableObject
    {
        /// <summary>
        /// The starting corner for placement order
        /// </summary>
        /// <value>The starting corner for placement order</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StartCornerEnum
        {
            /// <summary>
            /// Enum TopLeft for value: TopLeft
            /// </summary>
            [EnumMember(Value = "TopLeft")]
            TopLeft = 1,
            /// <summary>
            /// Enum TopCenter for value: TopCenter
            /// </summary>
            [EnumMember(Value = "TopCenter")]
            TopCenter = 2,
            /// <summary>
            /// Enum TopRight for value: TopRight
            /// </summary>
            [EnumMember(Value = "TopRight")]
            TopRight = 3,
            /// <summary>
            /// Enum CenterLeft for value: CenterLeft
            /// </summary>
            [EnumMember(Value = "CenterLeft")]
            CenterLeft = 4,
            /// <summary>
            /// Enum Center for value: Center
            /// </summary>
            [EnumMember(Value = "Center")]
            Center = 5,
            /// <summary>
            /// Enum CenterRight for value: CenterRight
            /// </summary>
            [EnumMember(Value = "CenterRight")]
            CenterRight = 6,
            /// <summary>
            /// Enum BottomLeft for value: BottomLeft
            /// </summary>
            [EnumMember(Value = "BottomLeft")]
            BottomLeft = 7,
            /// <summary>
            /// Enum BottomCenter for value: BottomCenter
            /// </summary>
            [EnumMember(Value = "BottomCenter")]
            BottomCenter = 8,
            /// <summary>
            /// Enum BottomRight for value: BottomRight
            /// </summary>
            [EnumMember(Value = "BottomRight")]
            BottomRight = 9        }
        /// <summary>
        /// The starting corner for placement order
        /// </summary>
        /// <value>The starting corner for placement order</value>
        [DataMember(Name="start-corner", EmitDefaultValue=false)]
        public StartCornerEnum? StartCorner { get; set; }
        /// <summary>
        /// The order method to use for placement
        /// </summary>
        /// <value>The order method to use for placement</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum OrderMethodEnum
        {
            /// <summary>
            /// Enum VerticalZigzag for value: VerticalZigzag
            /// </summary>
            [EnumMember(Value = "VerticalZigzag")]
            VerticalZigzag = 1,
            /// <summary>
            /// Enum HorizontalZigzag for value: HorizontalZigzag
            /// </summary>
            [EnumMember(Value = "HorizontalZigzag")]
            HorizontalZigzag = 2,
            /// <summary>
            /// Enum VerticalSnake for value: VerticalSnake
            /// </summary>
            [EnumMember(Value = "VerticalSnake")]
            VerticalSnake = 3,
            /// <summary>
            /// Enum HorizontalSnake for value: HorizontalSnake
            /// </summary>
            [EnumMember(Value = "HorizontalSnake")]
            HorizontalSnake = 4        }
        /// <summary>
        /// The order method to use for placement
        /// </summary>
        /// <value>The order method to use for placement</value>
        [DataMember(Name="order-method", EmitDefaultValue=false)]
        public OrderMethodEnum? OrderMethod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderedPlacementEntity" /> class.
        /// </summary>
        /// <param name="favorOrderedPlacement">Favor placing products in order in each layout.</param>
        /// <param name="startCorner">The starting corner for placement order.</param>
        /// <param name="orderMethod">The order method to use for placement.</param>
        public OrderedPlacementEntity(bool? favorOrderedPlacement = default(bool?), StartCornerEnum? startCorner = default(StartCornerEnum?), OrderMethodEnum? orderMethod = default(OrderMethodEnum?))
        {
            this.FavorOrderedPlacement = favorOrderedPlacement;
            this.StartCorner = startCorner;
            this.OrderMethod = orderMethod;
        }
        
        /// <summary>
        /// Favor placing products in order in each layout
        /// </summary>
        /// <value>Favor placing products in order in each layout</value>
        [DataMember(Name="favor-ordered-placement", EmitDefaultValue=false)]
        public bool? FavorOrderedPlacement { get; set; }



        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderedPlacementEntity {\n");
            sb.Append("  FavorOrderedPlacement: ").Append(FavorOrderedPlacement).Append("\n");
            sb.Append("  StartCorner: ").Append(StartCorner).Append("\n");
            sb.Append("  OrderMethod: ").Append(OrderMethod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderedPlacementEntity);
        }

        /// <summary>
        /// Returns true if OrderedPlacementEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderedPlacementEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderedPlacementEntity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FavorOrderedPlacement == input.FavorOrderedPlacement ||
                    (this.FavorOrderedPlacement != null &&
                    this.FavorOrderedPlacement.Equals(input.FavorOrderedPlacement))
                ) && 
                (
                    this.StartCorner == input.StartCorner ||
                    (this.StartCorner != null &&
                    this.StartCorner.Equals(input.StartCorner))
                ) && 
                (
                    this.OrderMethod == input.OrderMethod ||
                    (this.OrderMethod != null &&
                    this.OrderMethod.Equals(input.OrderMethod))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FavorOrderedPlacement != null)
                    hashCode = hashCode * 59 + this.FavorOrderedPlacement.GetHashCode();
                if (this.StartCorner != null)
                    hashCode = hashCode * 59 + this.StartCorner.GetHashCode();
                if (this.OrderMethod != null)
                    hashCode = hashCode * 59 + this.OrderMethod.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
